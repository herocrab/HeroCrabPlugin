<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HeroCrabPlugin.CSharp</name>
    </assembly>
    <members>
        <member name="T:HeroCrabPlugin.Core.INetLogger">
            <summary>
            Logger interface.
            </summary>
        </member>
        <member name="M:HeroCrabPlugin.Core.INetLogger.Write(System.Object,System.String)">
            <summary>
            Write a log message to the logger.
            </summary>
            <param name="sender">Sending class, this will be added to the log for debugging</param>
            <param name="message">Log message text</param>
        </member>
        <member name="T:HeroCrabPlugin.Core.NetBoot">
            <summary>
            Boot strap class used to read and store network configuration.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Core.NetBoot.Config">
            <summary>
            Network configuration.
            </summary>
        </member>
        <member name="M:HeroCrabPlugin.Core.NetBoot.ParseCommandLine(System.String)">
            <summary>
            Initialize the network configuration.
            </summary>
            <param name="args">Command line arguments</param>
            <returns></returns>
        </member>
        <member name="T:HeroCrabPlugin.Core.NetByteQueue">
            <summary>
            Flexible byte queue serializer for common value types.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Core.NetByteQueue.Length">
            <summary>
            Byte length of queue (number of bytes serialized).
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Core.NetByteQueue.Depth">
            <summary>
            Depth or count of fields that have been added to this queue.
            </summary>
        </member>
        <member name="M:HeroCrabPlugin.Core.NetByteQueue.#ctor">
            <summary>
            Flexible byte queue serializer for common value types.
            </summary>
        </member>
        <member name="M:HeroCrabPlugin.Core.NetByteQueue.Clear">
            <summary>
            Clear the queue of all contents.
            </summary>
        </member>
        <member name="M:HeroCrabPlugin.Core.NetByteQueue.ToBytes">
            <summary>
            Queue contents in bytes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HeroCrabPlugin.Core.NetByteQueue.WriteFloats(System.Single[])">
            <summary>
            Write an array of float values to the queue, maximum length of 255.
            </summary>
            <param name="floatArray">Array of floats, less than 255 in length.</param>
        </member>
        <member name="M:HeroCrabPlugin.Core.NetByteQueue.WriteBytes(System.Byte[])">
            <summary>
            Add a series of bytes to the queue to be retrieved with ReadBytes.
            </summary>
            <param name="bytes">Bytes</param>
        </member>
        <member name="M:HeroCrabPlugin.Core.NetByteQueue.WriteRaw(System.Byte[])">
            <summary>
            Add a series of raw bytes to this queue.
            </summary>
            <param name="bytes">Raw bytes</param>
        </member>
        <member name="M:HeroCrabPlugin.Core.NetByteQueue.WriteByte(System.Byte)">
            <summary>
            Add a byte to this queue.
            </summary>
            <param name="value">Single byte</param>
        </member>
        <member name="M:HeroCrabPlugin.Core.NetByteQueue.WriteString(System.String)">
            <summary>
            Add a string to this queue.
            </summary>
            <param name="value">String</param>
        </member>
        <member name="M:HeroCrabPlugin.Core.NetByteQueue.WriteUShort(System.UInt16)">
            <summary>
            Add a ushort (UInt16) to this queue.
            </summary>
            <param name="value">UInt16</param>
        </member>
        <member name="M:HeroCrabPlugin.Core.NetByteQueue.WriteUInt(System.UInt32)">
            <summary>
            Add a uint (UInt32) to this queue.
            </summary>
            <param name="value">UInt32</param>
        </member>
        <member name="M:HeroCrabPlugin.Core.NetByteQueue.WriteInt(System.Int32)">
            <summary>
            Add an int (Int32) to this queue.
            </summary>
            <param name="value">Int32</param>
        </member>
        <member name="M:HeroCrabPlugin.Core.NetByteQueue.WriteLong(System.Int64)">
            <summary>
            Add a long (Int64) to this queue.
            </summary>
            <param name="value">Int64</param>
        </member>
        <member name="M:HeroCrabPlugin.Core.NetByteQueue.WriteFloat(System.Single)">
            <summary>
            Add a float to this queue.
            </summary>
            <param name="floatValue">Float</param>
        </member>
        <member name="M:HeroCrabPlugin.Core.NetByteQueue.WriteBool(System.Boolean)">
            <summary>
            Write a bool to this queue.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:HeroCrabPlugin.Core.NetByteQueue.ReadString">
            <summary>
            Read a string from this queue.
            </summary>
            <returns>String</returns>
        </member>
        <member name="M:HeroCrabPlugin.Core.NetByteQueue.ReadLong">
            <summary>
            Read a long from this queue.
            </summary>
            <returns>Long</returns>
        </member>
        <member name="M:HeroCrabPlugin.Core.NetByteQueue.ReadByte">
            <summary>
            Read a single byte from this queue.
            </summary>
            <returns>Byte</returns>
        </member>
        <member name="M:HeroCrabPlugin.Core.NetByteQueue.ReadUShort">
            <summary>
            Read a ushort (UInt16) from this queue.
            </summary>
            <returns>UInt16</returns>
        </member>
        <member name="M:HeroCrabPlugin.Core.NetByteQueue.ReadInt">
            <summary>
            Read a int (Int32) from this queue.
            </summary>
            <returns>Int32</returns>
        </member>
        <member name="M:HeroCrabPlugin.Core.NetByteQueue.ReadUInt">
            <summary>
            Read a uint (Int64) from this queue.
            </summary>
            <returns>Int64</returns>
        </member>
        <member name="M:HeroCrabPlugin.Core.NetByteQueue.ReadFloat">
            <summary>
            Read a float from this queue.
            </summary>
            <returns>Float</returns>
        </member>
        <member name="M:HeroCrabPlugin.Core.NetByteQueue.ReadBool">
            <summary>
            Read a bool from this queue.
            </summary>
            <returns>Byte</returns>
        </member>
        <member name="M:HeroCrabPlugin.Core.NetByteQueue.ReadBytes">
            <summary>
            Read a series of bytes from this queue, includes length.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HeroCrabPlugin.Core.NetByteQueue.PeekByte">
            <summary>
            Peek the next byte.
            </summary>
            <returns>The next byte</returns>
        </member>
        <member name="M:HeroCrabPlugin.Core.NetByteQueue.Any">
            <summary>
            Returns true if there are bytes in the queue.
            </summary>
            <returns>Bool</returns>
        </member>
        <member name="M:HeroCrabPlugin.Core.NetByteQueue.ReadFloats">
            <summary>
            Read an array of float values from the queue.
            </summary>
            <returns>An array of floats</returns>
        </member>
        <member name="T:HeroCrabPlugin.Core.NetConfig">
            <summary>
            Network boot configuration; this is the launch .json configuration as an object.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Core.NetConfig.Role">
            <summary>
            Role of the host.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Core.NetConfig.Address">
            <summary>
            Server ip address used as listener for joining a game server.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Core.NetConfig.Name">
            <summary>
            Server name used to advertise a game server.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Core.NetConfig.Map">
            <summary>
            Server map, this is typically a world, level, terrain, or environment designation.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Core.NetConfig.RegisterPort">
            <summary>
            Server listener port.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Core.NetConfig.CatalogPort">
            <summary>
            Server listener port.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Core.NetConfig.ServerPort">
            <summary>
            Server listener port.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Core.NetConfig.Connections">
            <summary>
            Maximum number of connections allowed on this server instance.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Core.NetConfig.Log">
            <summary>
            Maximum number of log entries to maintain in the logging buffer.
            </summary>
        </member>
        <member name="M:HeroCrabPlugin.Core.NetConfig.#ctor(System.String,System.String,System.String,System.String,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Network boot configuration; this is the launch .json configuration as an object.
            </summary>
        </member>
        <member name="T:HeroCrabPlugin.Core.NetLogger">
            <summary>
            Logger for network objects.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Core.NetLogger.Mask">
            <summary>
            Logger mask level; used for filtering.
            </summary>
        </member>
        <member name="T:HeroCrabPlugin.Core.NetLogger.NetLoggerWriteHandler">
            <summary>
            Handler for log write.
            </summary>
            <param name="sender"></param>
            <param name="message"></param>
        </member>
        <member name="E:HeroCrabPlugin.Core.NetLogger.LogWrite">
            <summary>
            Event for logging, invoked when a message is logged.
            </summary>
        </member>
        <member name="T:HeroCrabPlugin.Core.NetLogger.LoggingGroup">
            <summary>
            Logging group mask, for specifying a logging level and filtering.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Core.NetLogger.Count">
            <summary>
            Log count.
            </summary>
        </member>
        <member name="M:HeroCrabPlugin.Core.NetLogger.#ctor(HeroCrabPlugin.Core.INetLogger)">
            <summary>
            Create a new network logger.
            </summary>
            <param name="netLogger">Provided logger</param>
        </member>
        <member name="M:HeroCrabPlugin.Core.NetLogger.Add(HeroCrabPlugin.Core.INetLogger)">
            <summary>
            Add a logger to the network logger.
            </summary>
            <param name="netLogger">Provided logger</param>
        </member>
        <member name="M:HeroCrabPlugin.Core.NetLogger.Remove(HeroCrabPlugin.Core.INetLogger)">
            <summary>
            Remove a logger from the network logger.
            </summary>
            <param name="netLogger">Logger</param>
        </member>
        <member name="M:HeroCrabPlugin.Core.NetLogger.Write(HeroCrabPlugin.Core.NetLogger.LoggingGroup,System.Object,System.String)">
            <summary>
            Write a log message to the logger.
            </summary>
            <param name="group">Logging group</param>
            <param name="sender">Sending object or class</param>
            <param name="message">Log message text</param>
        </member>
        <member name="T:HeroCrabPlugin.Core.NetLoggerBuffer">
            <summary>
            Logging buffer for net logger.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Core.NetLoggerBuffer.Length">
            <summary>
            Count of entries in the log.
            </summary>
        </member>
        <member name="M:HeroCrabPlugin.Core.NetLoggerBuffer.#ctor(System.Int32)">
            <summary>
            Logging buffer for net logger.
            </summary>
            <param name="logCapacity"></param>
        </member>
        <member name="M:HeroCrabPlugin.Core.NetLoggerBuffer.Write(System.Object,System.String)">
            <summary>
            Write a message to the log.
            </summary>
            <param name="sender">Sending object or class</param>
            <param name="message">Log message text</param>
        </member>
        <member name="T:HeroCrabPlugin.Core.NetObject">
            <summary>
            Network object base class for network configuration and logger.
            </summary>
        </member>
        <member name="F:HeroCrabPlugin.Core.NetObject.NetSettings">
            <summary>
            Network configuration.
            </summary>
        </member>
        <member name="F:HeroCrabPlugin.Core.NetObject.NetLogger">
            <summary>
            Network logger.
            </summary>
        </member>
        <member name="M:HeroCrabPlugin.Core.NetObject.#ctor">
            <summary>
            Network object base class for injection of configuration and logger.
            </summary>
        </member>
        <member name="T:HeroCrabPlugin.Core.NetServices">
            <summary>
            Network services container for registry singleton.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Core.NetServices.Count">
            <summary>
            Count of registered network services.
            </summary>
        </member>
        <member name="F:HeroCrabPlugin.Core.NetServices.Registry">
            <summary>
            Registry of classes.
            </summary>
        </member>
        <member name="M:HeroCrabPlugin.Core.NetServices.Clear">
            <summary>
            Clear network services.
            </summary>
        </member>
        <member name="M:HeroCrabPlugin.Core.NetServices.Get``1">
            <summary>
            Get a network service from the singleton.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:HeroCrabPlugin.Core.NetServices.Add``1(``0)">
            <summary>
            Add a network service to the singleton.
            </summary>
            <param name="service"></param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:HeroCrabPlugin.Core.NetServices.Remove``1">
            <summary>
            Remove a network service from the singleton.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:HeroCrabPlugin.Core.NetRole">
            <summary>
            Role of the network host.
            </summary>
        </member>
        <member name="F:HeroCrabPlugin.Core.NetRole.Server">
            <summary>
            Server role.
            </summary>
        </member>
        <member name="F:HeroCrabPlugin.Core.NetRole.Client">
            <summary>
            Client role.
            </summary>
        </member>
        <member name="T:HeroCrabPlugin.Core.TickRate">
            <summary>
            Game logic update rate.
            </summary>
        </member>
        <member name="F:HeroCrabPlugin.Core.TickRate.Hz30">
            <summary>
            Game logic update rate is 30 hertz.
            </summary>
        </member>
        <member name="F:HeroCrabPlugin.Core.TickRate.Hz60">
            <summary>
            Game logic update rate is 60 hertz.
            </summary>
        </member>
        <member name="T:HeroCrabPlugin.Core.HostPps">
            <summary>
            Game packet rate target.
            </summary>
        </member>
        <member name="F:HeroCrabPlugin.Core.HostPps.Hz10">
            <summary>
            Target rate of 10 packets per second.
            </summary>
        </member>
        <member name="F:HeroCrabPlugin.Core.HostPps.Hz30">
            <summary>
            Target rate of 30 packets per second.
            </summary>
        </member>
        <member name="T:HeroCrabPlugin.Core.NetSettings">
            <summary>
            Network configuration parameters.
            </summary>
        </member>
        <member name="F:HeroCrabPlugin.Core.NetSettings.NetRole">
            <summary>
            Role of the network host.
            </summary>
        </member>
        <member name="F:HeroCrabPlugin.Core.NetSettings.GameTickRate">
            <summary>
            Game logic update rate.
            </summary>
        </member>
        <member name="F:HeroCrabPlugin.Core.NetSettings.ServerPps">
            <summary>
            Server packet rate target.
            </summary>
        </member>
        <member name="F:HeroCrabPlugin.Core.NetSettings.ClientPps">
            <summary>
            Client packet rate target.
            </summary>
        </member>
        <member name="F:HeroCrabPlugin.Core.NetSettings.ReliableBufferDepth">
            <summary>
            Buffer depth for reliable fields.
            </summary>
        </member>
        <member name="F:HeroCrabPlugin.Core.NetSettings.UnreliableBufferDepth">
            <summary>
            Buffer depth for unreliable fields.
            </summary>
        </member>
        <member name="F:HeroCrabPlugin.Core.NetSettings.ServerBufferDepth">
            <summary>
            Unreliable buffer depth for the server.
            </summary>
        </member>
        <member name="F:HeroCrabPlugin.Core.NetSettings.ClientBufferDepth">
            <summary>
            Unreliable buffer depth for the client.
            </summary>
        </member>
        <member name="F:HeroCrabPlugin.Core.NetSettings.MaxConnections">
            <summary>
            Maximum number of supported connections.
            </summary>
        </member>
        <member name="M:HeroCrabPlugin.Core.NetSettings.#ctor(HeroCrabPlugin.Core.TickRate,HeroCrabPlugin.Core.HostPps,HeroCrabPlugin.Core.HostPps,System.Byte,System.UInt16)">
            <summary>
            Network configuration parameters.
            </summary>
            <param name="gameTickRate">Game logic update rate</param>
            <param name="serverPps">Server packet rate target</param>
            <param name="clientPps">Client packet rate target</param>
            <param name="reliableBufferDepth">Reliable buffer depth</param>
            <param name="maxConnections">Maximum number of supported connections</param>
        </member>
        <member name="M:HeroCrabPlugin.Core.NetSettings.UpdateBufferSettings(HeroCrabPlugin.Core.NetRole)">
            <summary>
            Update buffer depth settings given the host role.
            </summary>
            <param name="role">Role of this host (server or client).</param>
        </member>
        <member name="T:HeroCrabPlugin.Crypto.ICryptoModule">
            <summary>
            Crypto module interface.
            </summary>
        </member>
        <member name="M:HeroCrabPlugin.Crypto.ICryptoModule.Encrypt(System.Byte[],System.String)">
            <summary>
            Encrypt data bytes with a pre-shared key in string format.
            </summary>
            <param name="data">Data in bytes format</param>
            <param name="key">Key in string format</param>
            <returns>Bytes</returns>
        </member>
        <member name="M:HeroCrabPlugin.Crypto.ICryptoModule.Encrypt(System.String,System.String)">
            <summary>
            Encrypt a string in a pre-shared key in string format.
            </summary>
            <param name="data">Data in string format</param>
            <param name="key">Key in bytes format</param>
            <returns>Bytes</returns>
        </member>
        <member name="M:HeroCrabPlugin.Crypto.ICryptoModule.Decrypt(System.Byte[],System.Byte[])">
            <summary>
            Decrypt bytes with a pre-shared key in bytes format.
            </summary>
            <param name="data">Data in bytes format</param>
            <param name="key">Key in bytes format</param>
            <returns>Bytes</returns>
        </member>
        <member name="M:HeroCrabPlugin.Crypto.ICryptoModule.Decrypt(System.Byte[],System.String)">
            <summary>
            Decrypt bytes with a pre-shared key in string format.
            </summary>
            <param name="data">Data in bytes format</param>
            <param name="key">Key in string format</param>
            <returns>Bytes</returns>
        </member>
        <member name="T:HeroCrabPlugin.Crypto.XxteaCryptoModule">
            <summary>
            Crypto module implementing XXTEA PSK cryptography; Developed by David J. Wheeler and Roger M. Needham.
            Algorithm code authored by Ma Bingyao (mabingyao@gmail.com).
            </summary>
        </member>
        <member name="M:HeroCrabPlugin.Crypto.XxteaCryptoModule.Encrypt(System.Byte[],System.Byte[])">
            <summary>
            Encrypt data bytes with a pre-shared key in bytes format.
            </summary>
            <param name="data">Data in bytes format</param>
            <param name="key">Key in bytes format</param>
            <returns>Bytes</returns>
        </member>
        <member name="M:HeroCrabPlugin.Crypto.XxteaCryptoModule.Encrypt(System.String,System.Byte[])">
            <summary>
            Encrypt a string with a pre-shared key in bytes format.
            </summary>
            <param name="data">Data in string format</param>
            <param name="key">Key in bytes format</param>
            <returns>Bytes</returns>
        </member>
        <member name="M:HeroCrabPlugin.Crypto.XxteaCryptoModule.Encrypt(System.Byte[],System.String)">
            <summary>
            Encrypt data bytes with a pre-shared key in string format.
            </summary>
            <param name="data">Data in bytes format</param>
            <param name="key">Key in string format</param>
            <returns>Bytes</returns>
        </member>
        <member name="M:HeroCrabPlugin.Crypto.XxteaCryptoModule.Encrypt(System.String,System.String)">
            <summary>
            Encrypt a string in a pre-shared key in string format.
            </summary>
            <param name="data">Data in string format</param>
            <param name="key">Key in bytes format</param>
            <returns>Bytes</returns>
        </member>
        <member name="M:HeroCrabPlugin.Crypto.XxteaCryptoModule.EncryptToBase64String(System.Byte[],System.Byte[])">
            <summary>
            Encrypt bytes with a pre-shared key in bytes format.
            </summary>
            <param name="data">Data in bytes format</param>
            <param name="key">Key in bytes format</param>
            <returns>String in base-64 format</returns>
        </member>
        <member name="M:HeroCrabPlugin.Crypto.XxteaCryptoModule.EncryptToBase64String(System.String,System.Byte[])">
            <summary>
            Encrypt a string with a pre-shared key in bytes format.
            </summary>
            <param name="data">Data in string format</param>
            <param name="key">Key in bytes format</param>
            <returns>String in base-64 format</returns>
        </member>
        <member name="M:HeroCrabPlugin.Crypto.XxteaCryptoModule.EncryptToBase64String(System.Byte[],System.String)">
            <summary>
            Encrypt bytes with a pre-shared key in string format.
            </summary>
            <param name="data">Data in bytes format</param>
            <param name="key">Key in string format</param>
            <returns>String in base-64 format</returns>
        </member>
        <member name="M:HeroCrabPlugin.Crypto.XxteaCryptoModule.EncryptToBase64String(System.String,System.String)">
            <summary>
            Encrypt a string with a pre-shared key in string format.
            </summary>
            <param name="data">Data in string format</param>
            <param name="key">Key in string format</param>
            <returns>String in base-64 format</returns>
        </member>
        <member name="M:HeroCrabPlugin.Crypto.XxteaCryptoModule.Decrypt(System.Byte[],System.Byte[])">
            <summary>
            Decrypt bytes with a pre-shared key in bytes format.
            </summary>
            <param name="data">Data in bytes format</param>
            <param name="key">Key in bytes format</param>
            <returns>Bytes</returns>
        </member>
        <member name="M:HeroCrabPlugin.Crypto.XxteaCryptoModule.Decrypt(System.Byte[],System.String)">
            <summary>
            Decrypt bytes with a pre-shared key in string format.
            </summary>
            <param name="data">Data in bytes format</param>
            <param name="key">Key in string format</param>
            <returns>Bytes</returns>
        </member>
        <member name="M:HeroCrabPlugin.Crypto.XxteaCryptoModule.DecryptBase64String(System.String,System.Byte[])">
            <summary>
            Decrypt string with a pre-shared key in bytes format.
            </summary>
            <param name="data">Data in string format</param>
            <param name="key">Key in bytes format</param>
            <returns>Bytes</returns>
        </member>
        <member name="M:HeroCrabPlugin.Crypto.XxteaCryptoModule.DecryptBase64String(System.String,System.String)">
            <summary>
            Decrypt bytes with a pre-shared key in string format.
            </summary>
            <param name="data">Data in bytes format</param>
            <param name="key">Key in string format</param>
            <returns>Bytes</returns>
        </member>
        <member name="M:HeroCrabPlugin.Crypto.XxteaCryptoModule.DecryptToString(System.Byte[],System.Byte[])">
            <summary>
            Decrypt bytes with a pre-shared key in bytes format.
            </summary>
            <param name="data">Data in bytes format</param>
            <param name="key">Key in bytes format</param>
            <returns>String in base-64 format</returns>
        </member>
        <member name="M:HeroCrabPlugin.Crypto.XxteaCryptoModule.DecryptToString(System.Byte[],System.String)">
            <summary>
            Decrypt bytes with a pre-shared key in string format.
            </summary>
            <param name="data">Data in bytes format</param>
            <param name="key">Key in string format</param>
            <returns>String in base-64 format</returns>
        </member>
        <member name="M:HeroCrabPlugin.Crypto.XxteaCryptoModule.DecryptBase64StringToString(System.String,System.Byte[])">
            <summary>
            Decrypt bytes with a pre-shared key in bytes format.
            </summary>
            <param name="data">Data in string format</param>
            <param name="key">Key in bytes format</param>
            <returns>String in base-64 format</returns>
        </member>
        <member name="M:HeroCrabPlugin.Crypto.XxteaCryptoModule.DecryptBase64StringToString(System.String,System.String)">
            <summary>
            Decrypt bytes with a pre-shared key in string format.
            </summary>
            <param name="data">Data in string format</param>
            <param name="key">Key in string format</param>
            <returns>String in base-64 format</returns>
        </member>
        <member name="T:HeroCrabPlugin.Element.INetElement">
            <summary>
            Network element contains network fields (RPC endpoints).
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Element.INetElement.Description">
            <summary>
            Network element description, used as ledger in serialization.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Element.INetElement.Filter">
            <summary>
            Network element filter, used to filter or mask by sessions.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Element.INetElement.FieldCount">
            <summary>
            Count of current fields.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Element.INetElement.Enabled">
            <summary>
            Server only: If true this element will be eligible for streaming.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Element.INetElement.IsReliable">
            <summary>
            If true this element will be sent reliably.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Element.INetElement.IsServer">
            <summary>
            IsServer; If true this is the element on the server.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Element.INetElement.IsClient">
            <summary>
            IsClient; If true this is the element on the client.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Element.INetElement.Sibling">
            <summary>
            Server only: Handy sibling element reference; for elements that are related.
            </summary>
        </member>
        <member name="M:HeroCrabPlugin.Element.INetElement.Delete">
            <summary>
            Delete this element from the server; does nothing on client.
            </summary>
        </member>
        <member name="M:HeroCrabPlugin.Element.INetElement.AddByte(System.String,System.Boolean,System.Action{System.Byte})">
            <summary>
            Add a byte network field to this element.
            </summary>
            <param name="name">Field name</param>
            <param name="isReliable">If true this field is sent reliably</param>
            <param name="callback">Call back method invoked when receiving this field</param>
            <returns>Field</returns>
        </member>
        <member name="M:HeroCrabPlugin.Element.INetElement.AddBytes(System.String,System.Boolean,System.Action{System.Byte[]})">
            <summary>
            Add a series of bytes as a field to this element.
            </summary>
            <param name="name">Field name</param>
            <param name="isReliable">If true this field is sent reliably</param>
            <param name="callback">Call back method invoked when receiving this field</param>
            <returns>Field</returns>
        </member>
        <member name="M:HeroCrabPlugin.Element.INetElement.AddFloat(System.String,System.Boolean,System.Action{System.Single})">
            <summary>
            Add a float network field to this element.
            </summary>
            <param name="name">Field name</param>
            <param name="isReliable">If true this field is sent reliably</param>
            <param name="callback">Call back method invoked when receiving this field</param>
            <returns>Field</returns>
        </member>
        <member name="M:HeroCrabPlugin.Element.INetElement.AddInt(System.String,System.Boolean,System.Action{System.Int32})">
            <summary>
            Add an int network field to this element.
            </summary>
            <param name="name">Field name</param>
            <param name="isReliable">If true this field is sent reliably</param>
            <param name="callback">Call back method invoked when receiving this field</param>
            <returns>Field</returns>
        </member>
        <member name="M:HeroCrabPlugin.Element.INetElement.AddLong(System.String,System.Boolean,System.Action{System.Int64})">
            <summary>
            Add a long network field to this element.
            </summary>
            <param name="name">Field name</param>
            <param name="isReliable">If true this field is sent reliably</param>
            <param name="callback">Call back method invoked when receiving this field</param>
            <returns>Field</returns>
        </member>
        <member name="M:HeroCrabPlugin.Element.INetElement.AddString(System.String,System.Boolean,System.Action{System.String})">
            <summary>
            Add a string network field to this element.
            </summary>
            <param name="name">Field name</param>
            <param name="isReliable">If true this field is sent reliably</param>
            <param name="callback">Call back method invoked when receiving this field</param>
            <returns>Field</returns>
        </member>
        <member name="M:HeroCrabPlugin.Element.INetElement.AddUInt(System.String,System.Boolean,System.Action{System.UInt32})">
            <summary>
            Add a byte network field to this element.
            </summary>
            <param name="name">Field name</param>
            <param name="isReliable">If true this field is sent reliably</param>
            <param name="callback">Call back method invoked when receiving this field</param>
            <returns>Field</returns>
        </member>
        <member name="M:HeroCrabPlugin.Element.INetElement.AddUShort(System.String,System.Boolean,System.Action{System.UInt16})">
            <summary>
            Add a ushort network field to this element.
            </summary>
            <param name="name">Field name</param>
            <param name="isReliable">If true this field is sent reliably</param>
            <param name="callback">Call back method invoked when receiving this field</param>
            <returns>Field</returns>
        </member>
        <member name="M:HeroCrabPlugin.Element.INetElement.AddFloats(System.String,System.Boolean,System.Action{System.Single[]})">
            <summary>
            Add an array of floats network field to this element.
            </summary>
            <param name="name">Field name</param>
            <param name="isReliable">If true this field is sent reliably</param>
            <param name="callback">Call back method invoked when receiving this field</param>
            <returns>Field</returns>
        </member>
        <member name="M:HeroCrabPlugin.Element.INetElement.AddBool(System.String,System.Boolean,System.Action{System.Boolean})">
            <summary>
            Add a bool network field to this element.
            </summary>
            <param name="name">Field name</param>
            <param name="isReliable">If true this field is sent reliably</param>
            <param name="callback">Call back method invoked when receiving this field</param>
            <returns>Field</returns>
        </member>
        <member name="M:HeroCrabPlugin.Element.INetElement.SetActionByte(System.String,System.Action{System.Byte})">
            <summary>
            Set the call back action for a named byte field, typically used on the client.
            </summary>
            <param name="name">Field name</param>
            <param name="callback">Call back method invoked when receiving this field</param>
            <returns>Field</returns>
        </member>
        <member name="M:HeroCrabPlugin.Element.INetElement.SetActionBytes(System.String,System.Action{System.Byte[]})">
            <summary>
            Set the call back action for a named string field, typically used on the client.
            </summary>
            <param name="name">Field name</param>
            <param name="callback">Call back method invoked when receiving this field</param>
            <returns>Field</returns>
        </member>
        <member name="M:HeroCrabPlugin.Element.INetElement.SetActionFloat(System.String,System.Action{System.Single})">
            <summary>
            Set the call back action for a named float field, typically used on the client.
            </summary>
            <param name="name">Field name</param>
            <param name="callback">Call back method invoked when receiving this field</param>
            <returns>Field</returns>
        </member>
        <member name="M:HeroCrabPlugin.Element.INetElement.SetActionInt(System.String,System.Action{System.Int32})">
            <summary>
            Set the call back action for a named int field, typically used on the client.
            </summary>
            <param name="name">Field name</param>
            <param name="callback">Call back method invoked when receiving this field</param>
            <returns>Field</returns>
        </member>
        <member name="M:HeroCrabPlugin.Element.INetElement.SetActionLong(System.String,System.Action{System.Int64})">
            <summary>
            Set the call back action for a named long field, typically used on the client.
            </summary>
            <param name="name">Field name</param>
            <param name="callback">Call back method invoked when receiving this field</param>
            <returns>Field</returns>
        </member>
        <member name="M:HeroCrabPlugin.Element.INetElement.SetActionString(System.String,System.Action{System.String})">
            <summary>
            Set the call back action for a named string field, typically used on the client.
            </summary>
            <param name="name">Field name</param>
            <param name="callback">Call back method invoked when receiving this field</param>
            <returns>Field</returns>
        </member>
        <member name="M:HeroCrabPlugin.Element.INetElement.SetActionUInt(System.String,System.Action{System.UInt32})">
            <summary>
            Set the call back action for a named uint field, typically used on the client.
            </summary>
            <param name="name">Field name</param>
            <param name="callback">Call back method invoked when receiving this field</param>
            <returns>Field</returns>
        </member>
        <member name="M:HeroCrabPlugin.Element.INetElement.SetActionUShort(System.String,System.Action{System.UInt16})">
            <summary>
            Set the call back action for a named ushort field, typically used on the client.
            </summary>
            <param name="name">Field name</param>
            <param name="callback">Call back method invoked when receiving this field</param>
            <returns>Field</returns>
        </member>
        <member name="M:HeroCrabPlugin.Element.INetElement.SetActionVector2(System.String,System.Action{FlaxEngine.Vector2})">
            <summary>
            Set the call back action for a named Vector2 field, typically used on the client.
            </summary>
            <param name="name">Field name</param>
            <param name="callback">Call back method invoked when receiving this field</param>
            <returns>Field</returns>
        </member>
        <member name="M:HeroCrabPlugin.Element.INetElement.SetActionVector3(System.String,System.Action{FlaxEngine.Vector3})">
            <summary>
            Set the call back action for a named Vector3 field, typically used on the client.
            </summary>
            <param name="name">Field name</param>
            <param name="callback">Call back method invoked when receiving this field</param>
            <returns>Field</returns>
        </member>
        <member name="M:HeroCrabPlugin.Element.INetElement.SetActionVector4(System.String,System.Action{FlaxEngine.Vector4})">
            <summary>
            Set the call back action for a named Vector4 field, typically used on the client.
            </summary>
            <param name="name">Field name</param>
            <param name="callback">Call back method invoked when receiving this field</param>
            <returns>Field</returns>
        </member>
        <member name="M:HeroCrabPlugin.Element.INetElement.SetActionQuaternion(System.String,System.Action{FlaxEngine.Quaternion})">
            <summary>
            Set the call back action for a named Quaternion field, typically used on the client.
            </summary>
            <param name="name">Field name</param>
            <param name="callback">Call back method invoked when receiving this field</param>
            <returns>Field</returns>
        </member>
        <member name="M:HeroCrabPlugin.Element.INetElement.SetActionBool(System.String,System.Action{System.Boolean})">
            <summary>
            Set the call back action for a named bool field, typically used on the client.
            </summary>
            <param name="name">Field name</param>
            <param name="callback">Call back method invoked when receiving this field</param>
            <returns>Field</returns>
        </member>
        <member name="M:HeroCrabPlugin.Element.INetElement.GetByte(System.String)">
            <summary>
            Retrieves the setter for a byte field.
            </summary>
            <param name="name">Field name</param>
            <returns>Field</returns>
        </member>
        <member name="M:HeroCrabPlugin.Element.INetElement.GetBytes(System.String)">
            <summary>
            Retrieves the setter for a series of bytes field.
            </summary>
            <param name="name">Field name</param>
            <returns>Field</returns>
        </member>
        <member name="M:HeroCrabPlugin.Element.INetElement.GetFloat(System.String)">
            <summary>
            Retrieves the setter for a float field.
            </summary>
            <param name="name">Field name</param>
            <returns>Field</returns>
        </member>
        <member name="M:HeroCrabPlugin.Element.INetElement.GetInt(System.String)">
            <summary>
            Retrieves the setter for an int field.
            </summary>
            <param name="name">Field name</param>
            <returns>Field</returns>
        </member>
        <member name="M:HeroCrabPlugin.Element.INetElement.GetLong(System.String)">
            <summary>
            Retrieves the setter for a long field.
            </summary>
            <param name="name">Field name</param>
            <returns>Field</returns>
        </member>
        <member name="M:HeroCrabPlugin.Element.INetElement.GetString(System.String)">
            <summary>
            Retrieves the setter for a string field.
            </summary>
            <param name="name">Field name</param>
            <returns>Field</returns>
        </member>
        <member name="M:HeroCrabPlugin.Element.INetElement.GetUInt(System.String)">
            <summary>
            Retrieves the setter for a uint field.
            </summary>
            <param name="name">Field name</param>
            <returns>Field</returns>
        </member>
        <member name="M:HeroCrabPlugin.Element.INetElement.GetUShort(System.String)">
            <summary>
            Retrieves the setter for a ushort field.
            </summary>
            <param name="name">Field name</param>
            <returns>Field</returns>
        </member>
        <member name="M:HeroCrabPlugin.Element.INetElement.GetVector2(System.String)">
            <summary>
            Retrieves the setter for a Vector2 field.
            </summary>
            <param name="name">Field name</param>
            <returns>Field</returns>
        </member>
        <member name="M:HeroCrabPlugin.Element.INetElement.GetVector3(System.String)">
            <summary>
            Retrieves the setter for a Vector3 field.
            </summary>
            <param name="name">Field name</param>
            <returns>Field</returns>
        </member>
        <member name="M:HeroCrabPlugin.Element.INetElement.GetVector4(System.String)">
            <summary>
            Retrieves the setter for a Vector4 field.
            </summary>
            <param name="name">Field name</param>
            <returns>Field</returns>
        </member>
        <member name="M:HeroCrabPlugin.Element.INetElement.GetQuaternion(System.String)">
            <summary>
            Retrieves the setter for a Quaternion field.
            </summary>
            <param name="name">Field name</param>
            <returns>Field</returns>
        </member>
        <member name="M:HeroCrabPlugin.Element.INetElement.GetBool(System.String)">
            <summary>
            Retrieves the setter for a bool field.
            </summary>
            <param name="name">Field name</param>
            <returns>Field</returns>
        </member>
        <member name="T:HeroCrabPlugin.Element.NetElement">
            <summary>
            Network element contains network fields (RPC endpoints).
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Element.NetElement.Description">
            <inheritdoc />
        </member>
        <member name="P:HeroCrabPlugin.Element.NetElement.Filter">
            <inheritdoc />
        </member>
        <member name="P:HeroCrabPlugin.Element.NetElement.Enabled">
            <inheritdoc />
        </member>
        <member name="P:HeroCrabPlugin.Element.NetElement.Sibling">
            <inheritdoc />
        </member>
        <member name="P:HeroCrabPlugin.Element.NetElement.IsServer">
            <inheritdoc />
        </member>
        <member name="P:HeroCrabPlugin.Element.NetElement.IsClient">
            <inheritdoc />
        </member>
        <member name="P:HeroCrabPlugin.Element.NetElement.DeleteElement">
            <summary>
            Callback for deleting this element from the server.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Element.NetElement.IsReliable">
            <inheritdoc />
        </member>
        <member name="P:HeroCrabPlugin.Element.NetElement.IsUpdated">
            <summary>
            IsUpdated is true if this element has any fields which have been updated.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Element.NetElement.FieldCount">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Element.NetElement.#ctor(HeroCrabPlugin.Element.NetElementDesc)">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Element.NetElement.Delete">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Element.NetElement.AddByte(System.String,System.Boolean,System.Action{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Element.NetElement.AddBytes(System.String,System.Boolean,System.Action{System.Byte[]})">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Element.NetElement.AddFloat(System.String,System.Boolean,System.Action{System.Single})">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Element.NetElement.AddInt(System.String,System.Boolean,System.Action{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Element.NetElement.AddLong(System.String,System.Boolean,System.Action{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Element.NetElement.AddString(System.String,System.Boolean,System.Action{System.String})">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Element.NetElement.AddUInt(System.String,System.Boolean,System.Action{System.UInt32})">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Element.NetElement.AddUShort(System.String,System.Boolean,System.Action{System.UInt16})">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Element.NetElement.AddFloats(System.String,System.Boolean,System.Action{System.Single[]})">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Element.NetElement.AddBool(System.String,System.Boolean,System.Action{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Element.NetElement.GetByte(System.String)">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Element.NetElement.GetBytes(System.String)">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Element.NetElement.GetFloat(System.String)">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Element.NetElement.GetInt(System.String)">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Element.NetElement.GetLong(System.String)">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Element.NetElement.GetString(System.String)">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Element.NetElement.GetUInt(System.String)">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Element.NetElement.GetUShort(System.String)">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Element.NetElement.GetVector2(System.String)">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Element.NetElement.GetVector3(System.String)">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Element.NetElement.GetVector4(System.String)">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Element.NetElement.GetQuaternion(System.String)">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Element.NetElement.GetBool(System.String)">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Element.NetElement.SetActionByte(System.String,System.Action{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Element.NetElement.SetActionBytes(System.String,System.Action{System.Byte[]})">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Element.NetElement.SetActionFloat(System.String,System.Action{System.Single})">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Element.NetElement.SetActionInt(System.String,System.Action{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Element.NetElement.SetActionLong(System.String,System.Action{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Element.NetElement.SetActionString(System.String,System.Action{System.String})">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Element.NetElement.SetActionUInt(System.String,System.Action{System.UInt32})">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Element.NetElement.SetActionUShort(System.String,System.Action{System.UInt16})">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Element.NetElement.SetActionVector2(System.String,System.Action{FlaxEngine.Vector2})">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Element.NetElement.SetActionVector3(System.String,System.Action{FlaxEngine.Vector3})">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Element.NetElement.SetActionVector4(System.String,System.Action{FlaxEngine.Vector4})">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Element.NetElement.SetActionQuaternion(System.String,System.Action{FlaxEngine.Quaternion})">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Element.NetElement.SetActionBool(System.String,System.Action{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Element.NetElement.Process">
            <summary>
            Process each of the fields in this element, called by host.
            </summary>
        </member>
        <member name="M:HeroCrabPlugin.Element.NetElement.PrepareDelta">
            <summary>
            Prepare delta changes by serializing only updated fields for this element.
            </summary>
        </member>
        <member name="M:HeroCrabPlugin.Element.NetElement.SerializeLast">
            <summary>
            Serialize the last field values, used on initial sending of an element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HeroCrabPlugin.Element.NetElement.Apply(HeroCrabPlugin.Core.NetByteQueue)">
            <summary>
            Receive an update and apply it to network fields.
            </summary>
            <param name="rxQueue">Receive queue</param>
        </member>
        <member name="M:HeroCrabPlugin.Element.NetElement.Serialize">
            <summary>
            Serialize the transmit queue.
            </summary>
            <returns>Bytes</returns>
        </member>
        <member name="M:HeroCrabPlugin.Element.NetElement.ResetFields">
            <summary>
            Reset all fields IsUpdated values and clear transmit queue.
            </summary>
        </member>
        <member name="T:HeroCrabPlugin.Element.NetElementDesc">
            <inheritdoc />
        </member>
        <member name="P:HeroCrabPlugin.Element.NetElementDesc.Id">
            <summary>
            Unique network element id value, assigned by stream.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Element.NetElementDesc.Name">
            <summary>
            Network element name.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Element.NetElementDesc.AuthorId">
            <summary>
            Author id is the id of the session which created this element.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Element.NetElementDesc.AssetId">
            <summary>
            Asset id is a unique id assigned by game logic, which references a prefab or actor.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Element.NetElementDesc.HasFields">
            <summary>
            HasFields is true if this element has any network fields added to it.
            </summary>
        </member>
        <member name="F:HeroCrabPlugin.Element.NetElementDesc.Ledger">
            <summary>
            Ledger for this element; contains ids for network fields and is used in field creation.
            </summary>
        </member>
        <member name="M:HeroCrabPlugin.Element.NetElementDesc.#ctor(System.UInt32,System.String,System.UInt32,System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Element.NetElementDesc.Serialize">
            <summary>
            Serialize this network element description.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HeroCrabPlugin.Element.NetElementDesc.Deserialize(HeroCrabPlugin.Core.NetByteQueue)">
            <summary>
            Deserialize this element description from a byte queue.
            </summary>
            <param name="rxQueue"></param>
            <returns></returns>
        </member>
        <member name="M:HeroCrabPlugin.Element.NetElementDesc.WriteLedger(System.Collections.Generic.SortedDictionary{System.Byte,HeroCrabPlugin.Field.NetFieldDesc})">
            <summary>
            Write the ledger for this network element.
            </summary>
            <param name="ledger"></param>
        </member>
        <member name="T:HeroCrabPlugin.Element.NetElementFilter">
            <summary>
            Network element filter used when sending elements to network sessions.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Element.NetElementFilter.StreamGroup">
            <summary>
            Network stream group; used in filtering.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Element.NetElementFilter.Recipient">
            <summary>
            Network recipient id; 0 = Everyone, 1+ = unique single recipient.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Element.NetElementFilter.Exclude">
            <summary>
            Network excluded recipient id.
            </summary>
        </member>
        <member name="M:HeroCrabPlugin.Element.NetElementFilter.#ctor">
            <summary>
            Network element filter used when sending elements to network sessions.
            </summary>
        </member>
        <member name="M:HeroCrabPlugin.Element.NetElementFilter.Contains(HeroCrabPlugin.Stream.NetStreamGroup)">
            <summary>
            Checks to see if this filter contains an element stream group.
            </summary>
            <param name="streamGroup"></param>
            <returns></returns>
        </member>
        <member name="T:HeroCrabPlugin.Field.INetField`1">
            <summary>
            Network field.
            </summary>
        </member>
        <member name="M:HeroCrabPlugin.Field.INetField`1.Set(`0)">
            <summary>
            Set the network field.
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="T:HeroCrabPlugin.Field.INetFieldReceiver`1">
            <summary>
            Network field receiver callback interface.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:HeroCrabPlugin.Field.INetFieldReceiver`1.Receive">
            <summary>
            Network field receive call back.
            </summary>
        </member>
        <member name="T:HeroCrabPlugin.Field.NetField">
            <inheritdoc />
        </member>
        <member name="P:HeroCrabPlugin.Field.NetField.Description">
            <summary>
            Network field description.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Field.NetField.IsReliable">
            <summary>
            IsReliable is true if this field is set to be sent reliably.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Field.NetField.IsUpdated">
            <summary>
            IsUpdated is true if this field has been updated and is queued for transmission.
            </summary>
        </member>
        <member name="F:HeroCrabPlugin.Field.NetField.TxQueue">
            <summary>
            Transmit queue.
            </summary>
        </member>
        <member name="F:HeroCrabPlugin.Field.NetField.LastQueue">
            <summary>
            Queue containing the last known value for this field.
            </summary>
        </member>
        <member name="F:HeroCrabPlugin.Field.NetField.BufferSize">
            <summary>
            Field buffer size.
            </summary>
        </member>
        <member name="M:HeroCrabPlugin.Field.NetField.#ctor(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Field.NetField.#ctor(HeroCrabPlugin.Field.NetFieldDesc)">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Field.NetField.Clear">
            <summary>
            Clear the net field transmit queue and set IsUpdated to false.
            </summary>
        </member>
        <member name="M:HeroCrabPlugin.Field.NetField.Process">
            <summary>
            Process this network field.
            </summary>
        </member>
        <member name="M:HeroCrabPlugin.Field.NetField.Serialize">
            <summary>
            Serialize network field for transmission.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:HeroCrabPlugin.Field.NetField.SerializeLast">
            <summary>
            Serialize the last known value for this field.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HeroCrabPlugin.Field.NetField.Deserialize(HeroCrabPlugin.Core.NetByteQueue)">
            <summary>
            Deserialize a byte queue into this network field.
            </summary>
            <param name="rxQueue"></param>
        </member>
        <member name="M:HeroCrabPlugin.Field.NetField.Reset">
            <summary>
            Reset this field by clearing the transmit queue and setting IsUpdated to false.
            </summary>
        </member>
        <member name="T:HeroCrabPlugin.Field.NetFieldBool">
            <summary>
            Network Vector2 field.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Field.NetFieldBool.Receive">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Field.NetFieldBool.#ctor(System.Byte,System.String,System.Boolean,System.Action{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Field.NetFieldBool.#ctor(HeroCrabPlugin.Field.NetFieldDesc,System.Action{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Field.NetFieldBool.Set(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Field.NetFieldBool.Process">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Field.NetFieldBool.Deserialize(HeroCrabPlugin.Core.NetByteQueue)">
            <inheritdoc />
        </member>
        <member name="T:HeroCrabPlugin.Field.NetFieldBuffer`1">
            <summary>
            Network field buffer.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:HeroCrabPlugin.Field.NetFieldBuffer`1.Count">
            <summary>
            Count of entries in the buffer.
            </summary>
        </member>
        <member name="M:HeroCrabPlugin.Field.NetFieldBuffer`1.#ctor(HeroCrabPlugin.Field.NetFieldBuffer{`0})">
            <summary>
            Create a new buffer while emptying an existing buffer.
            </summary>
            <param name="queue">NetFieldBuffer</param>
        </member>
        <member name="M:HeroCrabPlugin.Field.NetFieldBuffer`1.#ctor(System.Int32)">
            <summary>
            Create a new buffer given the buffer size.
            </summary>
            <param name="size">Int32</param>
        </member>
        <member name="M:HeroCrabPlugin.Field.NetFieldBuffer`1.Read">
            <summary>
            Read an entry from the buffer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HeroCrabPlugin.Field.NetFieldBuffer`1.Consume(HeroCrabPlugin.Field.NetFieldBuffer{`0})">
            <summary>
            Consume the contents of a buffer by adding them to this buffer.
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:HeroCrabPlugin.Field.NetFieldBuffer`1.Dequeue">
            <summary>
            Dequeue all items in the buffer and return an enumerable.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HeroCrabPlugin.Field.NetFieldBuffer`1.Add(`0)">
            <summary>
            Add an item to this buffer.
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:HeroCrabPlugin.Field.NetFieldBuffer`1.Peek">
            <summary>
            Peek an item from this buffer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HeroCrabPlugin.Field.NetFieldBuffer`1.Last">
            <summary>
            Retrieve the last content in the buffer without dequeuing it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HeroCrabPlugin.Field.NetFieldBuffer`1.Any">
            <summary>
            Check if there are any entries in the buffer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HeroCrabPlugin.Field.NetFieldBuffer`1.Clear">
            <summary>
            Clear the buffer.
            </summary>
        </member>
        <member name="T:HeroCrabPlugin.Field.NetFieldByte">
            <summary>
            Network byte field.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Field.NetFieldByte.Receive">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Field.NetFieldByte.#ctor(System.Byte,System.String,System.Boolean,System.Action{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Field.NetFieldByte.#ctor(HeroCrabPlugin.Field.NetFieldDesc,System.Action{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Field.NetFieldByte.Set(System.Byte)">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Field.NetFieldByte.Process">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Field.NetFieldByte.Deserialize(HeroCrabPlugin.Core.NetByteQueue)">
            <inheritdoc />
        </member>
        <member name="T:HeroCrabPlugin.Field.NetFieldBytes">
            <summary>
            Network bytes field.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Field.NetFieldBytes.Receive">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Field.NetFieldBytes.#ctor(System.Byte,System.String,System.Boolean,System.Action{System.Byte[]})">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Field.NetFieldBytes.#ctor(HeroCrabPlugin.Field.NetFieldDesc,System.Action{System.Byte[]})">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Field.NetFieldBytes.Set(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Field.NetFieldBytes.Process">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Field.NetFieldBytes.Deserialize(HeroCrabPlugin.Core.NetByteQueue)">
            <inheritdoc />
        </member>
        <member name="T:HeroCrabPlugin.Field.NetFieldDesc">
            <summary>
            Network field description.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Field.NetFieldDesc.Index">
            <summary>
            Network field index value.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Field.NetFieldDesc.Name">
            <summary>
            Network field name.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Field.NetFieldDesc.IsReliable">
            <summary>
            IsReliable is true if this field is to be sent reliably.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Field.NetFieldDesc.Type">
            <summary>
            Network field type code indicates value type on creation.
            </summary>
        </member>
        <member name="T:HeroCrabPlugin.Field.NetFieldDesc.TypeCode">
            <summary>
            Network field type code enum.
            </summary>
        </member>
        <member name="M:HeroCrabPlugin.Field.NetFieldDesc.#ctor(System.Byte,System.String,System.Boolean,HeroCrabPlugin.Field.NetFieldDesc.TypeCode)">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Field.NetFieldDesc.Serialize">
            <summary>
            Serialize this network field description.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HeroCrabPlugin.Field.NetFieldDesc.Deserialize(HeroCrabPlugin.Core.NetByteQueue)">
            <summary>
            Deserialize this network field description given the receive queue.
            </summary>
            <param name="rxQueue"></param>
            <returns></returns>
        </member>
        <member name="T:HeroCrabPlugin.Field.NetFieldFloat">
            <summary>
            Network float field.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Field.NetFieldFloat.Receive">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Field.NetFieldFloat.#ctor(System.Byte,System.String,System.Boolean,System.Action{System.Single})">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Field.NetFieldFloat.#ctor(HeroCrabPlugin.Field.NetFieldDesc,System.Action{System.Single})">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Field.NetFieldFloat.Set(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Field.NetFieldFloat.Process">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Field.NetFieldFloat.Deserialize(HeroCrabPlugin.Core.NetByteQueue)">
            <inheritdoc />
        </member>
        <member name="T:HeroCrabPlugin.Field.NetFieldInt">
            <summary>
            Network int field.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Field.NetFieldInt.Receive">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Field.NetFieldInt.#ctor(System.Byte,System.String,System.Boolean,System.Action{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Field.NetFieldInt.#ctor(HeroCrabPlugin.Field.NetFieldDesc,System.Action{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Field.NetFieldInt.Set(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Field.NetFieldInt.Process">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Field.NetFieldInt.Deserialize(HeroCrabPlugin.Core.NetByteQueue)">
            <inheritdoc />
        </member>
        <member name="T:HeroCrabPlugin.Field.NetFieldLong">
            <summary>
            Network long field.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Field.NetFieldLong.Receive">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Field.NetFieldLong.#ctor(System.Byte,System.String,System.Boolean,System.Action{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Field.NetFieldLong.#ctor(HeroCrabPlugin.Field.NetFieldDesc,System.Action{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Field.NetFieldLong.Set(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Field.NetFieldLong.Process">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Field.NetFieldLong.Deserialize(HeroCrabPlugin.Core.NetByteQueue)">
            <inheritdoc />
        </member>
        <member name="T:HeroCrabPlugin.Field.NetFieldString">
            <summary>
            Network string field.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Field.NetFieldString.Receive">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Field.NetFieldString.#ctor(System.Byte,System.String,System.Boolean,System.Action{System.String})">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Field.NetFieldString.#ctor(HeroCrabPlugin.Field.NetFieldDesc,System.Action{System.String})">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Field.NetFieldString.Set(System.String)">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Field.NetFieldString.Process">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Field.NetFieldString.Deserialize(HeroCrabPlugin.Core.NetByteQueue)">
            <inheritdoc />
        </member>
        <member name="T:HeroCrabPlugin.Field.NetFieldUInt">
            <summary>
            Network uint field.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Field.NetFieldUInt.Receive">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Field.NetFieldUInt.#ctor(System.Byte,System.String,System.Boolean,System.Action{System.UInt32})">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Field.NetFieldUInt.#ctor(HeroCrabPlugin.Field.NetFieldDesc,System.Action{System.UInt32})">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Field.NetFieldUInt.Set(System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Field.NetFieldUInt.Process">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Field.NetFieldUInt.Deserialize(HeroCrabPlugin.Core.NetByteQueue)">
            <inheritdoc />
        </member>
        <member name="T:HeroCrabPlugin.Field.NetFieldUShort">
            <summary>
            Network ushort field.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Field.NetFieldUShort.Receive">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Field.NetFieldUShort.#ctor(System.Byte,System.String,System.Boolean,System.Action{System.UInt16})">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Field.NetFieldUShort.#ctor(HeroCrabPlugin.Field.NetFieldDesc,System.Action{System.UInt16})">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Field.NetFieldUShort.Set(System.UInt16)">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Field.NetFieldUShort.Process">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Field.NetFieldUShort.Deserialize(HeroCrabPlugin.Core.NetByteQueue)">
            <inheritdoc />
        </member>
        <member name="T:HeroCrabPlugin.Field.NetFieldFloats">
            <summary>
            Network Vector2 field.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Field.NetFieldFloats.Receive">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Field.NetFieldFloats.#ctor(System.Byte,System.String,System.Boolean,System.Action{System.Single[]})">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Field.NetFieldFloats.#ctor(HeroCrabPlugin.Field.NetFieldDesc,System.Action{System.Single[]})">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Field.NetFieldFloats.Set(System.Single[])">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Field.NetFieldFloats.Process">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Field.NetFieldFloats.Deserialize(HeroCrabPlugin.Core.NetByteQueue)">
            <inheritdoc />
        </member>
        <member name="T:HeroCrabPlugin.Session.INetSession">
            <summary>
            Network session.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Session.INetSession.Id">
            <summary>
            Id of the network session.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Session.INetSession.Ip">
            <summary>
            Ip address of the network session.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Session.INetSession.RxCount">
            <summary>
            Count of received packets.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Session.INetSession.TxCount">
            <summary>
            Count of transmitted packets.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Session.INetSession.MissCount">
            <summary>
            Count of packets received with invalid elements.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Session.INetSession.DupeCount">
            <summary>
            Count of packets received with duplicate create or delete entries.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Session.INetSession.StreamGroup">
            <summary>
            Stream group used when filtering which elements to send this session.
            </summary>
        </member>
        <member name="M:HeroCrabPlugin.Session.INetSession.Disconnect">
            <summary>
            Disconnect this session.
            </summary>
        </member>
        <member name="T:HeroCrabPlugin.Session.NetSession">
            <summary>
            Network session.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Session.NetSession.Id">
            <inheritdoc />
        </member>
        <member name="P:HeroCrabPlugin.Session.NetSession.Ip">
            <inheritdoc />
        </member>
        <member name="P:HeroCrabPlugin.Session.NetSession.RxCount">
            <inheritdoc />
        </member>
        <member name="P:HeroCrabPlugin.Session.NetSession.TxCount">
            <inheritdoc />
        </member>
        <member name="P:HeroCrabPlugin.Session.NetSession.MissCount">
            <inheritdoc />
        </member>
        <member name="P:HeroCrabPlugin.Session.NetSession.DupeCount">
            <inheritdoc />
        </member>
        <member name="P:HeroCrabPlugin.Session.NetSession.SessionCreated">
            <summary>
            Call back for session created.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Session.NetSession.SessionDeleted">
            <summary>
            Call back for session deleted.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Session.NetSession.StreamGroup">
            <inheritdoc />
        </member>
        <member name="T:HeroCrabPlugin.Session.NetSession.InnerTypeCode">
            <summary>
            Inner type code for routing packets.
            </summary>
        </member>
        <member name="F:HeroCrabPlugin.Session.NetSession.TxQueue">
            <summary>
            Transmit queue for this session.
            </summary>
        </member>
        <member name="F:HeroCrabPlugin.Session.NetSession.RxQueue">
            <summary>
            Receive queue for this session.
            </summary>
        </member>
        <member name="F:HeroCrabPlugin.Session.NetSession.IsPacketReliable">
            <summary>
            IsPacketReliable is true if this packet should be delivered reliably.
            </summary>
        </member>
        <member name="M:HeroCrabPlugin.Session.NetSession.Disconnect">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Session.NetSession.Send(System.Single)">
            <summary>
            Send all elements to this session.
            </summary>
        </member>
        <member name="M:HeroCrabPlugin.Session.NetSession.OnReceiveId(System.UInt32)">
            <summary>
            Called when a session receives a session id.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:HeroCrabPlugin.Session.NetSession.#ctor(HeroCrabPlugin.Sublayer.INetSublayer)">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Session.NetSession.SendPacket(System.Single,System.Byte[],System.Boolean)">
            <summary>
            Send packet to this session through the sublayer.
            </summary>
            <param name="time">Game time when this packet is sent</param>
            <param name="packet">Packets bytes</param>
            <param name="isReliable">Send this packet reliably</param>
        </member>
        <member name="M:HeroCrabPlugin.Session.NetSession.OnReceivePacket(System.Byte[])">
            <summary>
            Receive a packet into this session.
            </summary>
            <param name="packet"></param>
        </member>
        <member name="T:HeroCrabPlugin.Session.NetSessionClient">
            <summary>
            Network client session.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Session.NetSessionClient.ElementCreated">
            <summary>
            Call back for element created.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Session.NetSessionClient.ElementDeleted">
            <summary>
            Call back for element deleted.
            </summary>
        </member>
        <member name="M:HeroCrabPlugin.Session.NetSessionClient.#ctor(HeroCrabPlugin.Sublayer.INetSublayer,System.Collections.Generic.SortedDictionary{System.UInt32,HeroCrabPlugin.Element.NetElement})">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Session.NetSessionClient.Send(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Session.NetSessionClient.SendPacket(System.Single,System.Byte[],System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Session.NetSessionClient.OnReceivePacket(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="T:HeroCrabPlugin.Session.NetSessionServer">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Session.NetSessionServer.#ctor(HeroCrabPlugin.Sublayer.INetSublayer,System.Collections.Generic.SortedDictionary{System.UInt32,System.Collections.Generic.List{HeroCrabPlugin.Element.NetElement}},System.Collections.Generic.SortedDictionary{System.UInt32,System.Collections.Generic.List{HeroCrabPlugin.Element.NetElement}})">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Session.NetSessionServer.Process(System.Single)">
            <summary>
            Process the network session.
            </summary>
            <param name="time"></param>
        </member>
        <member name="M:HeroCrabPlugin.Session.NetSessionServer.Send(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Session.NetSessionServer.SendPacket(System.Single,System.Byte[],System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Session.NetSessionServer.OnReceivePacket(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="T:HeroCrabPlugin.Stream.INetStream">
            <summary>
            Network stream contains elements and sessions.
            </summary>
        </member>
        <member name="E:HeroCrabPlugin.Stream.INetStream.SessionConnected">
            <summary>
            Event is invoked when a session is connected.
            </summary>
        </member>
        <member name="E:HeroCrabPlugin.Stream.INetStream.SessionDisconnected">
            <summary>
            Event is invoked when a session is disconnected.
            </summary>
        </member>
        <member name="E:HeroCrabPlugin.Stream.INetStream.ElementCreated">
            <summary>
            Element created event handler.
            </summary>
        </member>
        <member name="E:HeroCrabPlugin.Stream.INetStream.ElementDeleted">
            <summary>
            Element deleted event handler.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Stream.INetStream.ElementCount">
            <summary>
            Count of elements in the stream.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Stream.INetStream.SessionCount">
            <summary>
            Count of sessions in the stream.
            </summary>
        </member>
        <member name="M:HeroCrabPlugin.Stream.INetStream.DeleteSession(HeroCrabPlugin.Sublayer.INetSublayer)">
            <summary>
            Delete a session from the stream given the sublayer.
            </summary>
            <param name="sublayer">Sublayer of session to be deleted</param>
        </member>
        <member name="M:HeroCrabPlugin.Stream.INetStream.Process(System.Single)">
            <summary>
            Process the network stream.
            </summary>
            <param name="time">Game time</param>
        </member>
        <member name="M:HeroCrabPlugin.Stream.INetStream.Clear">
            <summary>
            Clear the network stream.
            </summary>
        </member>
        <member name="M:HeroCrabPlugin.Stream.INetStream.KickAll">
            <summary>
            Kick all connected sessions.
            </summary>
        </member>
        <member name="T:HeroCrabPlugin.Stream.INetStreamClient">
            <summary>
            Client stream interface, used as interface segregation between super-layer and sub-layer.
            </summary>
        </member>
        <member name="M:HeroCrabPlugin.Stream.INetStreamClient.FindSession(HeroCrabPlugin.Session.INetSession@)">
            <summary>
            Find a session, used by game client to retrieve local session.
            </summary>
            <param name="session">Client session</param>
            <returns></returns>
        </member>
        <member name="T:HeroCrabPlugin.Stream.INetStreamServer">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Stream.INetStreamServer.CreateElement(System.String,System.UInt32,System.UInt32,System.Boolean,HeroCrabPlugin.Element.INetElement)">
            <summary>
            Create a network element on the server for the stream.
            </summary>
            <param name="name">Name of this network element</param>
            <param name="assetId">Asset id related to this element</param>
            <param name="authorId">Author id of this element; 0 is server</param>
            <param name="isEnabled">If true, this element will be immediately streamed</param>
            <param name="sibling">Handy sibling element reference; for elements that are related</param>
            <returns></returns>
        </member>
        <member name="M:HeroCrabPlugin.Stream.INetStreamServer.FindSession(System.UInt32,HeroCrabPlugin.Session.INetSession@)">
            <summary>
            Find a session given an id.
            </summary>
            <param name="id">UInt</param>
            <param name="session">Target session by id</param>
            <returns></returns>
        </member>
        <member name="P:HeroCrabPlugin.Stream.INetStreamServer.Recorder">
            <summary>
            Network recorder for replay system.
            </summary>
        </member>
        <member name="T:HeroCrabPlugin.Stream.NetStream">
            <inheritdoc />
        </member>
        <member name="T:HeroCrabPlugin.Stream.NetStream.SessionConnectedHandler">
            <inheritdoc />
        </member>
        <member name="T:HeroCrabPlugin.Stream.NetStream.SessionDisconnectedHandler">
            <inheritdoc />
        </member>
        <member name="T:HeroCrabPlugin.Stream.NetStream.ElementCreatedHandler">
            <inheritdoc />
        </member>
        <member name="T:HeroCrabPlugin.Stream.NetStream.ElementDeletedHandler">
            <inheritdoc />
        </member>
        <member name="E:HeroCrabPlugin.Stream.NetStream.SessionConnected">
            <summary>
            Event is invoked when a session is connected.
            </summary>
        </member>
        <member name="E:HeroCrabPlugin.Stream.NetStream.SessionDisconnected">
            <summary>
            Event is invoked when a session is disconnected.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Stream.NetStream.ElementCount">
            <summary>
            Count of all network elements in the stream.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Stream.NetStream.SessionCount">
            <summary>
            Count of all network sessions in the stream.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Stream.NetStream.PacketInterval">
            <summary>
            Interval at which packets are sent as it relates to game tick.
            </summary>
        </member>
        <member name="F:HeroCrabPlugin.Stream.NetStream.Sessions">
            <summary>
            Sessions added to this stream.
            </summary>
        </member>
        <member name="F:HeroCrabPlugin.Stream.NetStream.Elements">
            <summary>
            Elements added to this stream.
            </summary>
        </member>
        <member name="M:HeroCrabPlugin.Stream.NetStream.#ctor">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Stream.NetStream.KickAll">
            <summary>
            Kick all sessions from the stream.
            </summary>
        </member>
        <member name="M:HeroCrabPlugin.Stream.NetStream.AddSession(HeroCrabPlugin.Session.NetSession)">
            <summary>
            Add a session to this stream.
            </summary>
            <param name="session">Network session</param>
        </member>
        <member name="M:HeroCrabPlugin.Stream.NetStream.DeleteSession(HeroCrabPlugin.Sublayer.INetSublayer)">
            <summary>
            Delete a session from this stream.
            </summary>
            <param name="sublayer">Network sublayer</param>
        </member>
        <member name="M:HeroCrabPlugin.Stream.NetStream.Process(System.Single)">
            <summary>
            Process the network stream.
            </summary>
            <param name="time"></param>
        </member>
        <member name="M:HeroCrabPlugin.Stream.NetStream.Clear">
            <summary>
            Clear all elements from the network stream.
            </summary>
        </member>
        <member name="M:HeroCrabPlugin.Stream.NetStream.SendElements(System.Single)">
            <summary>
            Send elements to sessions, subject to filtering based on stream group.
            </summary>
        </member>
        <member name="T:HeroCrabPlugin.Stream.NetStreamClient">
            <summary>
            Client stream, contains all streamed elements and the client session/
            </summary>
        </member>
        <member name="E:HeroCrabPlugin.Stream.NetStreamClient.ElementCreated">
            <summary>
            Event invoked when an element is created; used by game spawner logic.
            </summary>
        </member>
        <member name="E:HeroCrabPlugin.Stream.NetStreamClient.ElementDeleted">
            <summary>
            Event invoked when an element is deleted; used by game spawner logic.
            </summary>
        </member>
        <member name="M:HeroCrabPlugin.Stream.NetStreamClient.#ctor">
            <summary>
            Client stream, contains all streamed elements and the client session; used internally and by unit tests.
            </summary>
        </member>
        <member name="M:HeroCrabPlugin.Stream.NetStreamClient.SendElements(System.Single)">
            <summary>
            Send all elements to sessions, in this case from the client to the server.
            </summary>
        </member>
        <member name="M:HeroCrabPlugin.Stream.NetStreamClient.CreateSession(HeroCrabPlugin.Sublayer.INetSublayer)">
            <summary>
            Create a session from a sublayer and add it ot the client.
            </summary>
            <param name="sublayer"></param>
            <returns>Client session</returns>
        </member>
        <member name="M:HeroCrabPlugin.Stream.NetStreamClient.FindSession(HeroCrabPlugin.Session.INetSession@)">
            <summary>
            Try to find the session on the client; returns null if session is not present.
            </summary>
            <param name="session"></param>
            <returns></returns>
        </member>
        <member name="T:HeroCrabPlugin.Stream.NetStreamGroup">
            <summary>
            Stream group are a set of flags used in filtering which elements are sent over a session.
            </summary>
        </member>
        <member name="T:HeroCrabPlugin.Stream.NetStreamServer">
            <summary>
            Network server stream.
            </summary>
        </member>
        <member name="E:HeroCrabPlugin.Stream.NetStreamServer.ElementCreated">
            <inheritdoc />
        </member>
        <member name="E:HeroCrabPlugin.Stream.NetStreamServer.ElementDeleted">
            <inheritdoc />
        </member>
        <member name="P:HeroCrabPlugin.Stream.NetStreamServer.Recorder">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Stream.NetStreamServer.#ctor">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Stream.NetStreamServer.SendElements(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Stream.NetStreamServer.AddSession(HeroCrabPlugin.Session.NetSession)">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Stream.NetStreamServer.DeleteSession(HeroCrabPlugin.Sublayer.INetSublayer)">
            <summary>
            Delete a session from this stream given a sublayer.
            </summary>
            <param name="sublayer"></param>
        </member>
        <member name="M:HeroCrabPlugin.Stream.NetStreamServer.CreateSession(HeroCrabPlugin.Sublayer.INetSublayer)">
            <summary>
            Create a session on the server given a sublayer.
            </summary>
            <param name="sublayer"></param>
            <returns>Server session</returns>
        </member>
        <member name="M:HeroCrabPlugin.Stream.NetStreamServer.CreateElement(System.String,System.UInt32,System.UInt32,System.Boolean,HeroCrabPlugin.Element.INetElement)">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Stream.NetStreamServer.SetMaxSessionId">
            <summary>
            Set the maximum session id; used in unit testing.
            </summary>
        </member>
        <member name="M:HeroCrabPlugin.Stream.NetStreamServer.FindSession(System.UInt32,HeroCrabPlugin.Session.INetSession@)">
            <inheritdoc />
        </member>
        <member name="T:HeroCrabPlugin.Sublayer.INetClient">
            <summary>
            Network client.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Sublayer.INetClient.Stream">
            <summary>
            Network Stream which contains all streamed elements and sessions.
            </summary>
        </member>
        <member name="T:HeroCrabPlugin.Sublayer.NetLogWriteHandler">
            <summary>
            Handler for the logger.
            </summary>
            <param name="message">Log message text.</param>
        </member>
        <member name="T:HeroCrabPlugin.Sublayer.INetHost">
            <summary>
            Network host.
            </summary>
        </member>
        <member name="E:HeroCrabPlugin.Sublayer.INetHost.LogWrite">
            <summary>
            Logger event.
            </summary>
        </member>
        <member name="M:HeroCrabPlugin.Sublayer.INetHost.Start(System.String,System.UInt16)">
            <summary>
            Start a network host.
            </summary>
            <param name="ipAddress">For a server this is the listener IP; for a client this is the destination.</param>
            <param name="port">For a server this is the listener port; for a client this is the destination port.</param>
        </member>
        <member name="M:HeroCrabPlugin.Sublayer.INetHost.Stop">
            <summary>
            Stop a network host.
            </summary>
        </member>
        <member name="M:HeroCrabPlugin.Sublayer.INetHost.Process(System.Single)">
            <summary>
            Process a network host; this is required every game tick.
            </summary>
            <param name="time"></param>
        </member>
        <member name="T:HeroCrabPlugin.Sublayer.INetServer">
            <summary>
            Network server.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Sublayer.INetServer.Stream">
            <summary>
            Network Stream which contains all streamed elements and sessions.
            </summary>
        </member>
        <member name="M:HeroCrabPlugin.Sublayer.INetServer.KickAll">
            <summary>
            Kick all connected sessions from the server.
            </summary>
        </member>
        <member name="T:HeroCrabPlugin.Sublayer.INetSublayer">
            <summary>
            Network sub-layer; Used for interface segregation and modularity.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Sublayer.INetSublayer.Id">
            <summary>
            Sub-layer id.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Sublayer.INetSublayer.Ip">
            <summary>
            Sub-layer remote ip address.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Sublayer.INetSublayer.ReceiveDataCallback">
            <summary>
            Receive data call back; this method is invoked when data is received.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Sublayer.INetSublayer.ReceiveIdCallback">
            <summary>
            Receive id call back; this method is invoked when an id is assigned over the network.
            </summary>
        </member>
        <member name="M:HeroCrabPlugin.Sublayer.INetSublayer.Disconnect">
            <summary>
            Disconnect the sub-layer.
            </summary>
        </member>
        <member name="M:HeroCrabPlugin.Sublayer.INetSublayer.Send(System.Single,System.Byte[],System.Boolean)">
            <summary>
            Send a packet through the sub-layer.
            </summary>
            <param name="time">Game time this packet is sent</param>
            <param name="packet">Packet data in raw bytes</param>
            <param name="isReliable">Reliable flag; set to true for packets that require reliable delivery</param>
        </member>
        <member name="M:HeroCrabPlugin.Sublayer.INetSublayer.SendId(System.UInt32)">
            <summary>
            Send a session id over this sublayer; Id's are assigned to the sub-layer when a session is created.
            </summary>
            <param name="id">Session id</param>
        </member>
        <member name="T:HeroCrabPlugin.Sublayer.Replay.INetRecorder">
            <summary>
            Network recorder for replay system.
            </summary>
        </member>
        <member name="M:HeroCrabPlugin.Sublayer.Replay.INetRecorder.Start(System.Single)">
            <summary>
            Start the network recorder.
            </summary>
        </member>
        <member name="M:HeroCrabPlugin.Sublayer.Replay.INetRecorder.Stop">
            <summary>
            Stop the network recorder.
            </summary>
            <returns>Recorded bytes</returns>
        </member>
        <member name="P:HeroCrabPlugin.Sublayer.Replay.INetRecorder.Bytes">
            <summary>
            Network recorder bytes, the result of stopping a recording.
            </summary>
        </member>
        <member name="T:HeroCrabPlugin.Sublayer.Replay.INetReplay">
            <summary>
            Network replay player.
            </summary>
        </member>
        <member name="M:HeroCrabPlugin.Sublayer.Replay.INetReplay.Play(System.Single,System.Byte[])">
            <summary>
            Play a replay.
            </summary>
            <param name="time">Start time of this play action</param>
            <param name="bytes">Replay contents in bytes</param>
        </member>
        <member name="M:HeroCrabPlugin.Sublayer.Replay.INetReplay.Stop">
            <summary>
            Stop a replay.
            </summary>
        </member>
        <member name="M:HeroCrabPlugin.Sublayer.Replay.INetReplay.Process(System.Single)">
            <summary>
            Process this replay, required for playing.
            </summary>
            <param name="time">Game time</param>
        </member>
        <member name="P:HeroCrabPlugin.Sublayer.Replay.INetReplay.Stream">
            <summary>
            Replay stream.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Sublayer.Replay.INetReplay.IsPlaying">
            <summary>
            True if this replay is currently playing.
            </summary>
        </member>
        <member name="T:HeroCrabPlugin.Sublayer.Replay.NetRecorder">
            <summary>
            Network recorder for replay system.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Sublayer.Replay.NetRecorder.Id">
            <inheritdoc />
        </member>
        <member name="P:HeroCrabPlugin.Sublayer.Replay.NetRecorder.Ip">
            <inheritdoc />
        </member>
        <member name="P:HeroCrabPlugin.Sublayer.Replay.NetRecorder.ReceiveDataCallback">
            <inheritdoc />
        </member>
        <member name="P:HeroCrabPlugin.Sublayer.Replay.NetRecorder.ReceiveIdCallback">
            <inheritdoc />
        </member>
        <member name="P:HeroCrabPlugin.Sublayer.Replay.NetRecorder.Bytes">
            <summary>
            Network recorder bytes, the result of stopping a recording.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Sublayer.Replay.NetRecorder.IsRecording">
            <summary>
            Returns true if the network recorder is recording.
            </summary>
        </member>
        <member name="M:HeroCrabPlugin.Sublayer.Replay.NetRecorder.#ctor">
            <summary>
            Network recorder for replay system.
            </summary>
        </member>
        <member name="M:HeroCrabPlugin.Sublayer.Replay.NetRecorder.Start(System.Single)">
            <summary>
            Start the network recorder.
            </summary>
        </member>
        <member name="M:HeroCrabPlugin.Sublayer.Replay.NetRecorder.Stop">
            <summary>
            Stop the network recorder.
            </summary>
            <returns>Recorded bytes</returns>
        </member>
        <member name="M:HeroCrabPlugin.Sublayer.Replay.NetRecorder.Disconnect">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Sublayer.Replay.NetRecorder.Send(System.Single,System.Byte[],System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Sublayer.Replay.NetRecorder.SendId(System.UInt32)">
            <inheritdoc />
        </member>
        <member name="T:HeroCrabPlugin.Sublayer.Replay.NetReplay">
            <summary>
            Network replay for recorded games.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Sublayer.Replay.NetReplay.Id">
            <inheritdoc />
        </member>
        <member name="P:HeroCrabPlugin.Sublayer.Replay.NetReplay.Ip">
            <inheritdoc />
        </member>
        <member name="P:HeroCrabPlugin.Sublayer.Replay.NetReplay.ReceiveDataCallback">
            <inheritdoc />
        </member>
        <member name="P:HeroCrabPlugin.Sublayer.Replay.NetReplay.ReceiveIdCallback">
            <inheritdoc />
        </member>
        <member name="P:HeroCrabPlugin.Sublayer.Replay.NetReplay.Stream">
            <inheritdoc />
        </member>
        <member name="P:HeroCrabPlugin.Sublayer.Replay.NetReplay.IsPlaying">
            <inheritdoc />
        </member>
        <member name="P:HeroCrabPlugin.Sublayer.Replay.NetReplay.DisableStream">
            <summary>
            True when unit testing, false when using stream.
            </summary>
        </member>
        <member name="M:HeroCrabPlugin.Sublayer.Replay.NetReplay.Create">
            <summary>
            Create a new network replay player.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HeroCrabPlugin.Sublayer.Replay.NetReplay.Process(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Sublayer.Replay.NetReplay.Play(System.Single,System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Sublayer.Replay.NetReplay.Stop">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Sublayer.Replay.NetReplay.Disconnect">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Sublayer.Replay.NetReplay.Send(System.Single,System.Byte[],System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Sublayer.Replay.NetReplay.SendId(System.UInt32)">
            <inheritdoc />
        </member>
        <member name="T:HeroCrabPlugin.Sublayer.Udp.NetClient">
            <summary>
            Network client (UDP).
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Sublayer.Udp.NetClient.Stream">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Sublayer.Udp.NetClient.Create(HeroCrabPlugin.Core.NetSettings)">
            <summary>
            Create a new network client (UDP) given the configuration.
            </summary>
            <param name="netSettings">NetworkConfiguration</param>
            <returns></returns>
        </member>
        <member name="M:HeroCrabPlugin.Sublayer.Udp.NetClient.Process(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Sublayer.Udp.NetClient.Start(System.String,System.UInt16)">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Sublayer.Udp.NetClient.Stop">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Sublayer.Udp.NetClient.Dispose">
            <inheritdoc />
        </member>
        <member name="T:HeroCrabPlugin.Sublayer.Udp.NetHost">
            <summary>
            Host base class for client and server.
            </summary>
        </member>
        <member name="E:HeroCrabPlugin.Sublayer.Udp.NetHost.LogWrite">
            <summary>
            Event that is invoked when a log message is written.
            </summary>
        </member>
        <member name="F:HeroCrabPlugin.Sublayer.Udp.NetHost.NetSettings">
            <summary>
            Host network configuration.
            </summary>
        </member>
        <member name="F:HeroCrabPlugin.Sublayer.Udp.NetHost.NetLogger">
            <summary>
            Host network logger.
            </summary>
        </member>
        <member name="M:HeroCrabPlugin.Sublayer.Udp.NetHost.#ctor(HeroCrabPlugin.Core.NetSettings)">
            <summary>
            Network host contains the stream and other necessary subsystems.
            </summary>
            <param name="netSettings"></param>
        </member>
        <member name="T:HeroCrabPlugin.Sublayer.Udp.NetServer">
            <summary>
            Network server (UDP).
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Sublayer.Udp.NetServer.Stream">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Sublayer.Udp.NetServer.Create(HeroCrabPlugin.Core.NetSettings)">
            <summary>
            Create a new network server (UDP) given the network configuration.
            </summary>
            <param name="netSettings"></param>
            <returns></returns>
        </member>
        <member name="M:HeroCrabPlugin.Sublayer.Udp.NetServer.Process(System.Single)">
            <summary>
            Process the network server.
            </summary>
            <param name="time"></param>
        </member>
        <member name="M:HeroCrabPlugin.Sublayer.Udp.NetServer.Start(System.String,System.UInt16)">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Sublayer.Udp.NetServer.Stop">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Sublayer.Udp.NetServer.KickAll">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Sublayer.Udp.NetServer.Dispose">
            <inheritdoc />
        </member>
        <member name="T:HeroCrabPlugin.Sublayer.Udp.NetSublayer">
            <summary>
            Network sublayer for UDP using XXTEA pre-shared keys with Kek and Tek.
            </summary>
        </member>
        <member name="P:HeroCrabPlugin.Sublayer.Udp.NetSublayer.Id">
            <inheritdoc />
        </member>
        <member name="P:HeroCrabPlugin.Sublayer.Udp.NetSublayer.Ip">
            <inheritdoc />
        </member>
        <member name="P:HeroCrabPlugin.Sublayer.Udp.NetSublayer.ReceiveDataCallback">
            <inheritdoc />
        </member>
        <member name="P:HeroCrabPlugin.Sublayer.Udp.NetSublayer.ReceiveIdCallback">
            <inheritdoc />
        </member>
        <member name="P:HeroCrabPlugin.Sublayer.Udp.NetSublayer.DisconnectCallback">
            <summary>
            Disconnect callback.
            </summary>
        </member>
        <member name="M:HeroCrabPlugin.Sublayer.Udp.NetSublayer.Create(ENet.Peer)">
            <summary>
            Create a sublayer (UDP) from an enet peer.
            </summary>
            <param name="peer"></param>
            <returns></returns>
        </member>
        <member name="M:HeroCrabPlugin.Sublayer.Udp.NetSublayer.Disconnect">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Sublayer.Udp.NetSublayer.ReceivePacket(System.Byte,ENet.Packet)">
            <summary>
            Receive a packet from a host given the channel and packet.
            </summary>
            <param name="channel"></param>
            <param name="packet"></param>
        </member>
        <member name="M:HeroCrabPlugin.Sublayer.Udp.NetSublayer.Send(System.Single,System.Byte[],System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:HeroCrabPlugin.Sublayer.Udp.NetSublayer.SendId(System.UInt32)">
            <inheritdoc />
        </member>
        <member name="T:MyHeroCrabPlugin">
            <summary>
            HeroCrab Plugin export properties, for Editor UI.
            </summary>
        </member>
        <member name="P:MyHeroCrabPlugin.Description">
            <inheritdoc />
        </member>
        <member name="M:MyHeroCrabPlugin.Initialize">
            <inheritdoc />
        </member>
        <member name="M:MyHeroCrabPlugin.Deinitialize">
            <inheritdoc />
        </member>
    </members>
</doc>
