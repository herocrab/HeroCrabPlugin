<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Flax.Build</name>
    </assembly>
    <members>
        <member name="T:Flax.Build.Bindings.ApiTypeInfo">
            <summary>
            The native type information for bindings generator.
            </summary>
        </member>
        <member name="P:Flax.Build.Bindings.ApiTypeInfo.FullNameNative">
            <summary>
            Gets the name of the type as it would be referenced from the parent module namespace in the native code. It includes the nesting parent types and typename. For instance enum defined in class will have prefix of that class name.
            </summary>
        </member>
        <member name="P:Flax.Build.Bindings.ApiTypeInfo.FullNameManaged">
            <summary>
            Gets the name of the type as it would be referenced from the parent module namespace in the managed code. It includes the namespace, nesting parent types and typename. For instance enum defined in class will have prefix of that class namespace followed by the class name.
            </summary>
        </member>
        <member name="T:Flax.Build.Bindings.BindingsGenerator">
            <summary>
            The API bindings generation utility that can produce scripting bindings for another languages to the native code.
            </summary>
        </member>
        <member name="M:Flax.Build.Bindings.BindingsGenerator.UsePassByReference(Flax.Build.Builder.BuildData,Flax.Build.Bindings.TypeInfo,Flax.Build.Bindings.ApiTypeInfo)">
            <summary>
            Checks if use reference when passing values of this type to via scripting API methods.
            </summary>
            <param name="buildData">The build data.</param>
            <param name="typeInfo">The value type information.</param>
            <param name="caller">The calling type. It's parent module types and references are used to find the given API type.</param>
            <returns>True if use reference when passing the values of this type, otherwise false.</returns>
        </member>
        <member name="M:Flax.Build.Bindings.BindingsGenerator.FindApiTypeInfo(Flax.Build.Builder.BuildData,Flax.Build.Bindings.TypeInfo,Flax.Build.Bindings.ApiTypeInfo)">
            <summary>
            Finds the API type information.
            </summary>
            <param name="buildData">The build data.</param>
            <param name="typeInfo">The type information.</param>
            <param name="caller">The calling type. It's parent module types and references are used to find the given API type.</param>
            <returns>The found API type inf oor null.</returns>
        </member>
        <member name="T:Flax.Build.Bindings.BindingsGenerator.BindingsResult">
            <summary>
            The bindings generation result.
            </summary>
        </member>
        <member name="F:Flax.Build.Bindings.BindingsGenerator.BindingsResult.UseBindings">
            <summary>
            True if module uses bindings, otherwise false.
            </summary>
        </member>
        <member name="F:Flax.Build.Bindings.BindingsGenerator.BindingsResult.GeneratedCppFilePath">
            <summary>
            The generated C++ file path that contains a API bindings wrapper code to setup the glue code.
            </summary>
        </member>
        <member name="F:Flax.Build.Bindings.BindingsGenerator.BindingsResult.GeneratedCSharpFilePath">
            <summary>
            The generated C# file path that contains a API bindings wrapper code to setup the glue code.
            </summary>
        </member>
        <member name="M:Flax.Build.Bindings.BindingsGenerator.GenerateBindings(Flax.Build.Builder.BuildData,Flax.Build.Module,Flax.Build.NativeCpp.BuildOptions@,Flax.Build.Bindings.BindingsGenerator.BindingsResult@)">
            <summary>
            The API bindings generation utility that can produce scripting bindings for another languages to the native code.
            </summary>
        </member>
        <member name="M:Flax.Build.Bindings.BindingsGenerator.GenerateBindings(Flax.Build.Builder.BuildData)">
            <summary>
            The API bindings generation utility that can produce scripting bindings for another languages to the native code.
            </summary>
        </member>
        <member name="T:Flax.Build.Bindings.ClassInfo">
            <summary>
            The native class information for bindings generator.
            </summary>
        </member>
        <member name="T:Flax.Build.Bindings.ClassStructInfo">
            <summary>
            The native class/structure information for bindings generator.
            </summary>
        </member>
        <member name="T:Flax.Build.Bindings.VirtualClassInfo">
            <summary>
            The native class or interface information for bindings generator that contains virtual functions.
            </summary>
        </member>
        <member name="T:Flax.Build.Bindings.EnumInfo">
            <summary>
            The native enumeration information for bindings generator.
            </summary>
        </member>
        <member name="T:Flax.Build.Bindings.EventInfo">
            <summary>
            The native event information for bindings generator.
            </summary>
        </member>
        <member name="T:Flax.Build.Bindings.FieldInfo">
            <summary>
            The native field information for bindings generator.
            </summary>
        </member>
        <member name="M:Flax.Build.Bindings.FieldInfo.IsPod(Flax.Build.Builder.BuildData,Flax.Build.Bindings.ApiTypeInfo)">
            <summary>
            Gets a value indicating whether this type is POD (plain old data).
            </summary>
        </member>
        <member name="T:Flax.Build.Bindings.FileInfo">
            <summary>
            The native file information for bindings generator.
            </summary>
        </member>
        <member name="T:Flax.Build.Bindings.InjectCppCodeInfo">
            <summary>
            The custom C++ code injection information for bindings generator.
            </summary>
        </member>
        <member name="M:Flax.Build.Bindings.InjectCppCodeInfo.ToString">
            <inheritdoc />
        </member>
        <member name="T:Flax.Build.Bindings.InterfaceInfo">
            <summary>
            The native class/structure interface information for bindings generator.
            </summary>
        </member>
        <member name="T:Flax.Build.Bindings.LangType">
            <summary>
            The in-build language type for bindings generator.
            </summary>
        </member>
        <member name="T:Flax.Build.Bindings.MemberInfo">
            <summary>
            The native member information for bindings generator.
            </summary>
        </member>
        <member name="T:Flax.Build.Bindings.FunctionInfo">
            <summary>
            The native method information for bindings generator.
            </summary>
        </member>
        <member name="T:Flax.Build.Bindings.ModuleInfo">
            <summary>
            The native module information for bindings generator.
            </summary>
        </member>
        <member name="M:Flax.Build.Bindings.ModuleInfo.Init(Flax.Build.Builder.BuildData)">
            <inheritdoc />
        </member>
        <member name="T:Flax.Build.Bindings.PropertyInfo">
            <summary>
            The native property information for bindings generator.
            </summary>
        </member>
        <member name="T:Flax.Build.Bindings.StructureInfo">
            <summary>
            The native structure information for bindings generator.
            </summary>
        </member>
        <member name="T:Flax.Build.Bindings.TypeInfo">
            <summary>
            The native type information for bindings generator.
            </summary>
        </member>
        <member name="P:Flax.Build.Bindings.TypeInfo.IsVoid">
            <summary>
            Gets a value indicating whether this type is void.
            </summary>
        </member>
        <member name="P:Flax.Build.Bindings.TypeInfo.IsConstRef">
            <summary>
            Gets a value indicating whether this type is constant reference to a value.
            </summary>
        </member>
        <member name="M:Flax.Build.Bindings.TypeInfo.IsPod(Flax.Build.Builder.BuildData,Flax.Build.Bindings.ApiTypeInfo)">
            <summary>
            Gets a value indicating whether this type is POD (plain old data).
            </summary>
        </member>
        <member name="T:Flax.Build.Assembler">
            <summary>
            Utility for building C# assemblies from custom set of source files.
            </summary>
        </member>
        <member name="F:Flax.Build.Assembler.DefaultReferences">
            <summary>
            The default assembly references added to the projects.
            </summary>
        </member>
        <member name="F:Flax.Build.Assembler.OutputPath">
            <summary>
            The output assembly path. Use null to store assembly in the process memory.
            </summary>
        </member>
        <member name="F:Flax.Build.Assembler.SourceFiles">
            <summary>
            The source files for compilation.
            </summary>
        </member>
        <member name="F:Flax.Build.Assembler.Assemblies">
            <summary>
            The external user assembly references to use while compiling
            </summary>
        </member>
        <member name="F:Flax.Build.Assembler.References">
            <summary>
            The external user assembly file names to use while compiling
            </summary>
        </member>
        <member name="M:Flax.Build.Assembler.Build">
            <summary>
            Builds the assembly.
            </summary>
            <remarks>Throws an exception in case of any errors.</remarks>
            <returns>The created and loaded assembly.</returns>
        </member>
        <member name="T:Flax.Build.Builder">
            <summary>
            The modules and targets building utility.
            </summary>
        </member>
        <member name="M:Flax.Build.Builder.Clean">
            <summary>
            Cleans the build system cache and intermediate results.
            </summary>
        </member>
        <member name="M:Flax.Build.Builder.GetProjectTargets(Flax.Build.ProjectInfo)">
            <summary>
            Gets the list of targets that can be used when building a given project.
            </summary>
            <param name="project">The project.</param>
            <returns>The array of targets that can be build.</returns>
        </member>
        <member name="M:Flax.Build.Builder.GetProjectModules(Flax.Build.ProjectInfo)">
            <summary>
            Gets the list of modules that are located under a given project (checks for modules located in the given project Source folder).
            </summary>
            <param name="project">The project.</param>
            <returns>The array of modules that are contained in this project.</returns>
        </member>
        <member name="M:Flax.Build.Builder.GetModuleProject(Flax.Build.Module,Flax.Build.ProjectInfo)">
            <summary>
            Gets the project that contains a given module (checks for modules located in the given project Source folder).
            </summary>
            <param name="module">The module.</param>
            <param name="project">The project.</param>
            <returns>The found project.</returns>
        </member>
        <member name="M:Flax.Build.Builder.GetModuleProject(Flax.Build.Module,Flax.Build.Builder.BuildData)">
            <summary>
            Gets the project that contains a given module (checks for modules located in the given project Source folder).
            </summary>
            <param name="module">The module.</param>
            <param name="buildData">The build data.</param>
            <returns>The found project.</returns>
        </member>
        <member name="M:Flax.Build.Builder.IsModuleFromProject(Flax.Build.Module,Flax.Build.ProjectInfo)">
            <summary>
            Checks if the project that contains a given module (checks for modules located in the given project Source folder).
            </summary>
            <param name="module">The module.</param>
            <param name="project">The project to check.</param>
            <returns>True if project contains that module inside, otherwise it's external or referenced.</returns>
        </member>
        <member name="M:Flax.Build.Builder.BuildTargets">
            <summary>
            Builds the targets.
            </summary>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="E:Flax.Build.Builder.GenerateCustomProjects">
            <summary>
            Custom projects generation callback.
            </summary>
        </member>
        <member name="M:Flax.Build.Builder.GenerateProjects">
            <summary>
            Generates the projects for the targets and the solution for the workspace.
            </summary>
        </member>
        <member name="M:Flax.Build.Builder.GenerateProject(Flax.Build.Projects.ProjectFormat)">
            <summary>
            Generates project files for the specified format.
            </summary>
        </member>
        <member name="F:Flax.Build.Builder.BuildFilesPostfix">
            <summary>
            The build configuration files postfix.
            </summary>
        </member>
        <member name="P:Flax.Build.Builder.BuildTypes">
            <summary>
            The cached list of types from Flax.Build assembly. Reused by other build tool utilities to improve performance.
            </summary>
        </member>
        <member name="T:Flax.Build.Builder.RulesAssembly">
            <summary>
            The rules assembly data.
            </summary>
        </member>
        <member name="F:Flax.Build.Builder.RulesAssembly.Assembly">
            <summary>
            The rules assembly.
            </summary>
        </member>
        <member name="F:Flax.Build.Builder.RulesAssembly.Targets">
            <summary>
            The targets objects.
            </summary>
        </member>
        <member name="F:Flax.Build.Builder.RulesAssembly.Modules">
            <summary>
            The modules objects.
            </summary>
        </member>
        <member name="F:Flax.Build.Builder.RulesAssembly.Plugins">
            <summary>
            The plugin objects.
            </summary>
        </member>
        <member name="M:Flax.Build.Builder.RulesAssembly.GetTarget(System.String)">
            <summary>
            Gets the target of the given name.
            </summary>
            <param name="name">The name.</param>
            <returns>The target or null if not found.</returns>
        </member>
        <member name="M:Flax.Build.Builder.RulesAssembly.GetModule(System.String)">
            <summary>
            Gets the module of the given name.
            </summary>
            <param name="name">The name.</param>
            <returns>The module or null if not found.</returns>
        </member>
        <member name="M:Flax.Build.Builder.GetBuildOptions(Flax.Build.Target,Flax.Build.Platform,Flax.Build.Toolchain,Flax.Build.TargetArchitecture,Flax.Build.TargetConfiguration,System.String,System.String)">
            <summary>
            Gets the build options for the given target and the configuration.
            </summary>
            <param name="target">The target.</param>
            <param name="platform">The platform.</param>
            <param name="toolchain">The toolchain.</param>
            <param name="architecture">The build architecture.</param>
            <param name="configuration">The build configuration.</param>
            <param name="workingDirectory">The build workspace root folder path.</param>
            <param name="hotReloadPostfix">The output binaries postfix added for hot-reload builds in Editor to prevent file names collisions.</param>
            <returns>The build options.</returns>
        </member>
        <member name="M:Flax.Build.Builder.GenerateRulesAssembly">
            <summary>
            Generates the rules assembly (from Module and Target files in the workspace directory).
            </summary>
            <returns>The compiled rules assembly.</returns>
        </member>
        <member name="M:Flax.Build.Builder.CollectModules(Flax.Build.Builder.RulesAssembly,Flax.Build.Platform,Flax.Build.Target,Flax.Build.NativeCpp.BuildOptions,Flax.Build.Toolchain,Flax.Build.TargetArchitecture,Flax.Build.TargetConfiguration)">
            <summary>
            Collects the modules required by the given target to build (includes dependencies).
            </summary>
            <param name="rules">The rules.</param>
            <param name="target">The target.</param>
            <param name="targetBuildOptions">The target build options.</param>
            <param name="platform">The platform.</param>
            <param name="toolchain">The toolchain.</param>
            <param name="architecture">The architecture.</param>
            <param name="configuration">The configuration.</param>
            <returns>The list of modules to use for build (unique items).</returns>
        </member>
        <member name="M:Flax.Build.Builder.CollectModules(Flax.Build.Builder.RulesAssembly,Flax.Build.Platform,Flax.Build.Target,Flax.Build.NativeCpp.BuildOptions,Flax.Build.Toolchain,Flax.Build.TargetArchitecture,Flax.Build.TargetConfiguration,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Collects the modules required to build (includes dependencies).
            </summary>
            <param name="rules">The rules.</param>
            <param name="target">The target.</param>
            <param name="targetBuildOptions">The target build options.</param>
            <param name="platform">The platform.</param>
            <param name="toolchain">The toolchain.</param>
            <param name="architecture">The architecture.</param>
            <param name="configuration">The configuration.</param>
            <param name="moduleNames">The list of root modules to start collection.</param>
            <returns>The list of modules to use for build (unique items).</returns>
        </member>
        <member name="T:Flax.Build.DepsModule">
            <summary>
            The build module from 3rd Party provided but used as a precompiled dependency.
            </summary>
            <seealso cref="T:Flax.Build.ThirdPartyModule" />
        </member>
        <member name="M:Flax.Build.DepsModule.AddLib(Flax.Build.NativeCpp.BuildOptions,System.String,System.String)">
            <summary>
            Adds the library to the deps module output files (handles platform specific switches).
            </summary>
            <param name="options">The build options.</param>
            <param name="path">The path fo the folder with deps.</param>
            <param name="name">The library name.</param>
        </member>
        <member name="T:Flax.Build.EditorModule">
            <summary>
            The build module that is a part of the editor.
            </summary>
            <seealso cref="T:Flax.Build.EngineModule" />
        </member>
        <member name="T:Flax.Build.EngineModule">
            <summary>
            The build module that is a part of the engine.
            </summary>
            <seealso cref="T:Flax.Build.Target" />
        </member>
        <member name="M:Flax.Build.EngineModule.Setup(Flax.Build.NativeCpp.BuildOptions)">
            <inheritdoc />
        </member>
        <member name="T:Flax.Build.EngineTarget">
            <summary>
            The build target that builds the engine (eg. as game player or editor).
            </summary>
            <seealso cref="T:Flax.Build.ProjectTarget" />
        </member>
        <member name="P:Flax.Build.EngineTarget.EngineVersion">
            <summary>
            Gets the engine version.
            </summary>
        </member>
        <member name="M:Flax.Build.EngineTarget.Init">
            <inheritdoc />
        </member>
        <member name="M:Flax.Build.EngineTarget.GetOutputFilePath(Flax.Build.NativeCpp.BuildOptions,System.Nullable{Flax.Build.TargetOutputType})">
            <inheritdoc />
        </member>
        <member name="M:Flax.Build.EngineTarget.SetupTargetEnvironment(Flax.Build.NativeCpp.BuildOptions)">
            <inheritdoc />
        </member>
        <member name="M:Flax.Build.EngineTarget.PreBuild(Flax.Build.Graph.TaskGraph,Flax.Build.NativeCpp.BuildOptions)">
            <inheritdoc />
        </member>
        <member name="M:Flax.Build.EngineTarget.PostBuild(Flax.Build.Graph.TaskGraph,Flax.Build.NativeCpp.BuildOptions)">
            <inheritdoc />
        </member>
        <member name="T:Flax.Build.GameModule">
            <summary>
            The base class for game modules.
            </summary>
            <seealso cref="T:Flax.Build.Module" />
        </member>
        <member name="M:Flax.Build.GameModule.Setup(Flax.Build.NativeCpp.BuildOptions)">
            <inheritdoc />
        </member>
        <member name="T:Flax.Build.GameEditorModule">
            <summary>
            The base class for game editor modules.
            </summary>
            <seealso cref="T:Flax.Build.Module" />
            <seealso cref="T:Flax.Build.GameModule" />
        </member>
        <member name="M:Flax.Build.GameEditorModule.Setup(Flax.Build.NativeCpp.BuildOptions)">
            <inheritdoc />
        </member>
        <member name="T:Flax.Build.GameProjectTarget">
            <summary>
            The build target that builds the game project modules for standalone game.
            </summary>
            <seealso cref="T:Flax.Build.ProjectTarget" />
        </member>
        <member name="M:Flax.Build.GameProjectTarget.Init">
            <inheritdoc />
        </member>
        <member name="T:Flax.Build.GameProjectEditorTarget">
            <summary>
            The build target that builds the game project modules for editor.
            </summary>
            <seealso cref="T:Flax.Build.ProjectTarget" />
        </member>
        <member name="M:Flax.Build.GameProjectEditorTarget.Init">
            <inheritdoc />
        </member>
        <member name="T:Flax.Build.Graph.CompileCppTask">
            <summary>
            The C++ file compilation task.
            </summary>
            <seealso cref="T:Flax.Build.Graph.Task" />
        </member>
        <member name="T:Flax.Build.Graph.LinkTask">
            <summary>
            The link files task.
            </summary>
            <seealso cref="T:Flax.Build.Graph.Task" />
        </member>
        <member name="T:Flax.Build.Graph.Task">
            <summary>
            The base class for build system Task Graph.
            </summary>
        </member>
        <member name="F:Flax.Build.Graph.Task.PrerequisiteFiles">
            <summary>
            The collection of the files required by this task to run.
            </summary>
        </member>
        <member name="F:Flax.Build.Graph.Task.ProducedFiles">
            <summary>
            The collection of the files produced by this task.
            </summary>
        </member>
        <member name="F:Flax.Build.Graph.Task.WorkingDirectory">
            <summary>
            The working directory for any process invoked by this task.
            </summary>
        </member>
        <member name="F:Flax.Build.Graph.Task.CommandPath">
            <summary>
            The command to run to create produced files.
            </summary>
        </member>
        <member name="F:Flax.Build.Graph.Task.CommandArguments">
            <summary>
            Command-line parameters to pass via command line to the invoked process.
            </summary>
        </member>
        <member name="F:Flax.Build.Graph.Task.InfoMessage">
            <summary>
            The message to print on task execution start.
            </summary>
        </member>
        <member name="F:Flax.Build.Graph.Task.Cost">
            <summary>
            The estimated action cost. Unitless but might be estimation of milliseconds required to perform this task. It's just an raw estimation (based on input files count or size).
            </summary>
        </member>
        <member name="F:Flax.Build.Graph.Task.StartTime">
            <summary>
            The start time of the task execution.
            </summary>
        </member>
        <member name="F:Flax.Build.Graph.Task.EndTime">
            <summary>
            The end time of the task execution.
            </summary>
        </member>
        <member name="P:Flax.Build.Graph.Task.Duration">
            <summary>
            Gets the task execution duration.
            </summary>
        </member>
        <member name="F:Flax.Build.Graph.Task.DependentTasks">
            <summary>
            The dependent tasks cached for this task (limited depth). Might be null.
            </summary>
        </member>
        <member name="P:Flax.Build.Graph.Task.DependentTasksCount">
            <summary>
            Gets the dependent tasks count.
            </summary>
        </member>
        <member name="F:Flax.Build.Graph.Task.HasValidCachedResults">
            <summary>
            Gets a value indicating whether task results from the previous execution are still valid. Can be used to skip task execution.
            </summary>
        </member>
        <member name="F:Flax.Build.Graph.Task.DisableCache">
            <summary>
            Disables caching this task results.
            </summary>
        </member>
        <member name="F:Flax.Build.Graph.Task.Result">
            <summary>
            The task execution result.
            </summary>
        </member>
        <member name="P:Flax.Build.Graph.Task.Failed">
            <summary>
            Gets a value indicating whether task execution has failed.
            </summary>
        </member>
        <member name="M:Flax.Build.Graph.Task.Compare(Flax.Build.Graph.Task,Flax.Build.Graph.Task)">
            <summary>
            Compares two tasks to sort them for the parallel execution.
            </summary>
            <param name="a">The first task to compare.</param>
            <param name="b">The second task to compare.</param>
        </member>
        <member name="M:Flax.Build.Graph.Task.ToString">
            <inheritdoc />
        </member>
        <member name="T:Flax.Build.Graph.TaskExecutor">
            <summary>
            The base class for Task Graph executors that can perform the actual work.
            </summary>
        </member>
        <member name="M:Flax.Build.Graph.TaskExecutor.Execute(System.Collections.Generic.List{Flax.Build.Graph.Task})">
            <summary>
            Executes the specified tasks collection using custom execution rules.
            </summary>
            <param name="tasks">The tasks.</param>
            <returns>The total count of the executed tasks (excluding the cached ones).</returns>
        </member>
        <member name="T:Flax.Build.Graph.TaskGraph">
            <summary>
            The task execution and processing utility.
            </summary>
        </member>
        <member name="F:Flax.Build.Graph.TaskGraph.Workspace">
            <summary>
            The workspace folder of the task graph.
            </summary>
        </member>
        <member name="F:Flax.Build.Graph.TaskGraph.CachePath">
            <summary>
            Gets the Task Graph cache file path.
            </summary>
        </member>
        <member name="F:Flax.Build.Graph.TaskGraph.Tasks">
            <summary>
            The tasks existing in this graph.
            </summary>
        </member>
        <member name="F:Flax.Build.Graph.TaskGraph.FileToProducingTaskMap">
            <summary>
            The hash table that maps file path to the task that produces it.
            </summary>
            <remarks>Cached by <see cref="M:Flax.Build.Graph.TaskGraph.Setup"/> method.</remarks>
        </member>
        <member name="M:Flax.Build.Graph.TaskGraph.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Flax.Build.Graph.TaskGraph"/> class.
            </summary>
            <param name="workspace">The workspace root folder. Used to locate the build system cache location for the graph.</param>
        </member>
        <member name="M:Flax.Build.Graph.TaskGraph.Add``1">
            <summary>
            Adds a new task to the graph.
            </summary>
            <typeparam name="T">The type of the task.</typeparam>
            <returns>The created task.</returns>
        </member>
        <member name="M:Flax.Build.Graph.TaskGraph.AddCopyFile(System.String,System.String)">
            <summary>
            Adds a new task to the graph that copies a file.
            </summary>
            <param name="dstFile">The destination file path.</param>
            <param name="srcFile">The source file path.</param>
            <returns>The created task.</returns>
        </member>
        <member name="M:Flax.Build.Graph.TaskGraph.Setup">
            <summary>
            Builds the cache for the task graph. Cached the map for files to provide O(1) lookup for producing task.
            </summary>
        </member>
        <member name="M:Flax.Build.Graph.TaskGraph.SortTasks">
            <summary>
            Performs tasks list sorting based on task dependencies and cost heuristics to to improve parallelism of the graph execution.
            </summary>
        </member>
        <member name="M:Flax.Build.Graph.TaskGraph.Execute(System.Int32@)">
            <summary>
            Executes this task graph.
            </summary>
            <param name="executedTasksCount">The total count of the executed tasks (excluding the cached ones).</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:Flax.Build.Graph.TaskGraph.LoadCache">
            <summary>
            Loads the graph execution cache and marks tasks that can be skipped (have still valid results and unmodified prerequisite files).
            </summary>
        </member>
        <member name="M:Flax.Build.Graph.TaskGraph.CleanCache">
            <summary>
            Cleans the graph execution cache.
            </summary>
        </member>
        <member name="M:Flax.Build.Graph.TaskGraph.SaveCache">
            <summary>
            Saves the graph execution cache.
            </summary>
        </member>
        <member name="T:Flax.Build.BuildSystem.Graph.LocalExecutor">
            <summary>
            The local tasks executor. Uses thread pool to submit a tasks execution in parallel.
            </summary>
            <seealso cref="T:Flax.Build.Graph.TaskExecutor" />
        </member>
        <member name="F:Flax.Build.BuildSystem.Graph.LocalExecutor.ThreadCountMin">
            <summary>
            The minimum amount of threads to be used for the parallel execution.
            </summary>
        </member>
        <member name="F:Flax.Build.BuildSystem.Graph.LocalExecutor.ThreadCountMax">
            <summary>
            The maximum amount of threads to be used for the parallel execution.
            </summary>
        </member>
        <member name="F:Flax.Build.BuildSystem.Graph.LocalExecutor.ProcessorCountScale">
            <summary>
            The amount of threads to allocate per processor. Use it to allocate more threads for faster execution or use less to keep reduce CPU usage during build.
            </summary>
        </member>
        <member name="M:Flax.Build.BuildSystem.Graph.LocalExecutor.Execute(System.Collections.Generic.List{Flax.Build.Graph.Task})">
            <inheritdoc />
        </member>
        <member name="T:Flax.Build.HeaderOnlyModule">
            <summary>
            The build module from 3rd Party source that contains only header files.
            </summary>
            <seealso cref="T:Flax.Build.ThirdPartyModule" />
        </member>
        <member name="M:Flax.Build.HeaderOnlyModule.#ctor">
            <inheritdoc />
        </member>
        <member name="T:Flax.Build.InvalidArchitectureException">
            <summary>
            The unsupported architecture exception for code paths that require other architecture.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Flax.Build.InvalidArchitectureException.#ctor(Flax.Build.TargetArchitecture)">
            <summary>
            Initializes a new instance of the <see cref="T:Flax.Build.InvalidArchitectureException"/> class.
            </summary>
            <param name="architecture">The architecture.</param>
        </member>
        <member name="M:Flax.Build.InvalidArchitectureException.#ctor(Flax.Build.TargetArchitecture,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Flax.Build.InvalidArchitectureException"/> class.
            </summary>
            <param name="architecture">The architecture.</param>
            <param name="message">The additional message.</param>
        </member>
        <member name="T:Flax.Build.Module">
            <summary>
            Defines a module that can be compiled and used by other modules and targets.
            </summary>
        </member>
        <member name="F:Flax.Build.Module.Name">
            <summary>
            The module name.
            </summary>
        </member>
        <member name="F:Flax.Build.Module.FilePath">
            <summary>
            The module file path.
            </summary>
        </member>
        <member name="F:Flax.Build.Module.FolderPath">
            <summary>
            The path of the folder that contains this module file.
            </summary>
        </member>
        <member name="F:Flax.Build.Module.BinaryModuleName">
            <summary>
            The name for the output binary module. Can be used to merge multiple native modules into single library. If set to null or <see cref="F:System.String.Empty"/> the module won't be using scripting API features.
            </summary>
        </member>
        <member name="F:Flax.Build.Module.BuildNativeCode">
            <summary>
            True if module has native code to build. Can be used for C#-only modules.
            </summary>
        </member>
        <member name="F:Flax.Build.Module.BuildCSharp">
            <summary>
            True if module has C# code to build. Can be used for native modules without C# bindings nor code.
            </summary>
        </member>
        <member name="F:Flax.Build.Module.Deploy">
            <summary>
            True if module can be deployed.
            </summary>
        </member>
        <member name="M:Flax.Build.Module.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Flax.Build.Module"/> class.
            </summary>
        </member>
        <member name="M:Flax.Build.Module.Init">
            <summary>
            Initializes the module properties.
            </summary>
        </member>
        <member name="M:Flax.Build.Module.Setup(Flax.Build.NativeCpp.BuildOptions)">
            <summary>
            Setups the module build options. Can be used to specify module dependencies, external includes and other settings.
            </summary>
            <param name="options">The module build options.</param>
        </member>
        <member name="M:Flax.Build.Module.SetupEnvironment(Flax.Build.NativeCpp.BuildOptions)">
            <summary>
            Setups the module building environment. Allows to modify compiler and linker options.
            </summary>
            <param name="options">The module build options.</param>
        </member>
        <member name="M:Flax.Build.Module.GetFilesToDeploy(System.Collections.Generic.List{System.String})">
            <summary>
            Gets the files to deploy.
            </summary>
            <param name="files">The output files list.</param>
        </member>
        <member name="M:Flax.Build.Module.AddSourceFileIfExists(Flax.Build.NativeCpp.BuildOptions,System.String)">
            <summary>
            Adds the file to the build sources if exists.
            </summary>
            <param name="options">The options.</param>
            <param name="path">The source file path.</param>
        </member>
        <member name="T:Flax.Build.NativeCpp.BuildOptions">
            <summary>
            The native C++ module build settings container.
            </summary>
        </member>
        <member name="F:Flax.Build.NativeCpp.BuildOptions.Target">
            <summary>
            The target that builds this module.
            </summary>
        </member>
        <member name="F:Flax.Build.NativeCpp.BuildOptions.Platform">
            <summary>
            The build platform.
            </summary>
        </member>
        <member name="F:Flax.Build.NativeCpp.BuildOptions.Toolchain">
            <summary>
            The build platform toolchain.
            </summary>
        </member>
        <member name="F:Flax.Build.NativeCpp.BuildOptions.Architecture">
            <summary>
            The build architecture.
            </summary>
        </member>
        <member name="F:Flax.Build.NativeCpp.BuildOptions.Configuration">
            <summary>
            The build configuration.
            </summary>
        </member>
        <member name="F:Flax.Build.NativeCpp.BuildOptions.CompileEnv">
            <summary>
            The module compilation environment.
            </summary>
        </member>
        <member name="F:Flax.Build.NativeCpp.BuildOptions.LinkEnv">
            <summary>
            The module linking environment.
            </summary>
        </member>
        <member name="F:Flax.Build.NativeCpp.BuildOptions.SourcePaths">
            <summary>
            The source file directories. By default it contains the directory that contains this module file.
            </summary>
        </member>
        <member name="F:Flax.Build.NativeCpp.BuildOptions.SourceFiles">
            <summary>
            The source files to include in module build.
            </summary>
        </member>
        <member name="F:Flax.Build.NativeCpp.BuildOptions.PublicDependencies">
            <summary>
            The collection of the modules that are required by this module (for linking). Inherited by the modules that include it.
            </summary>
        </member>
        <member name="F:Flax.Build.NativeCpp.BuildOptions.PrivateDependencies">
            <summary>
            The collection of the modules that are required by this module (for linking).
            </summary>
        </member>
        <member name="F:Flax.Build.NativeCpp.BuildOptions.PublicDefinitions">
            <summary>
            The collection of defines with preprocessing symbol for a source files of this module. Inherited by the modules that include it.
            </summary>
        </member>
        <member name="F:Flax.Build.NativeCpp.BuildOptions.PrivateDefinitions">
            <summary>
            The collection of defines with preprocessing symbol for a source files of this module.
            </summary>
        </member>
        <member name="F:Flax.Build.NativeCpp.BuildOptions.PublicIncludePaths">
            <summary>
            The collection of additional include paths for a source files of this module. Inherited by the modules that include it.
            </summary>
        </member>
        <member name="F:Flax.Build.NativeCpp.BuildOptions.PrivateIncludePaths">
            <summary>
            The collection of additional include paths for a source files of this module.
            </summary>
        </member>
        <member name="F:Flax.Build.NativeCpp.BuildOptions.DependencyFiles">
            <summary>
            The dependency files to include with output (additional debug files, dynamic libraries, etc.).
            </summary>
        </member>
        <member name="F:Flax.Build.NativeCpp.BuildOptions.OptionalDependencyFiles">
            <summary>
            The optional dependency files to include with output (additional debug files, dynamic libraries, etc.). Missing files won't fail the build.
            </summary>
        </member>
        <member name="F:Flax.Build.NativeCpp.BuildOptions.Libraries">
            <summary>
            The list of libraries to link (typically external and third-party plugins).
            </summary>
        </member>
        <member name="F:Flax.Build.NativeCpp.BuildOptions.DelayLoadLibraries">
            <summary>
            The list of libraries to link for delay-load (typically external and third-party plugins).
            </summary>
        </member>
        <member name="F:Flax.Build.NativeCpp.BuildOptions.OutputFiles">
            <summary>
            The build output files (binaries, object files and static or dynamic libraries).
            </summary>
        </member>
        <member name="F:Flax.Build.NativeCpp.BuildOptions.IntermediateFolder">
            <summary>
            The intermediate build artifacts folder directory.
            </summary>
        </member>
        <member name="F:Flax.Build.NativeCpp.BuildOptions.OutputFolder">
            <summary>
            The output build artifacts folder directory.
            </summary>
        </member>
        <member name="F:Flax.Build.NativeCpp.BuildOptions.WorkingDirectory">
            <summary>
            The build commands working folder directory.
            </summary>
        </member>
        <member name="F:Flax.Build.NativeCpp.BuildOptions.HotReloadPostfix">
            <summary>
            The hot reload postfix added to the output binaries.
            </summary>
        </member>
        <member name="P:Flax.Build.NativeCpp.BuildOptions.DepsFolder">
            <summary>
            The full path to the dependencies folder for the current build platform, configuration, and architecture.
            </summary>
        </member>
        <member name="T:Flax.Build.NativeCpp.BuildOptions.ScriptingAPIOptions">
            <summary>
            The scripting API building options.
            </summary>
        </member>
        <member name="F:Flax.Build.NativeCpp.BuildOptions.ScriptingAPIOptions.Defines">
            <summary>
            The preprocessor defines.
            </summary>
        </member>
        <member name="F:Flax.Build.NativeCpp.BuildOptions.ScriptingAPIOptions.SystemReferences">
            <summary>
            The system libraries references.
            </summary>
        </member>
        <member name="F:Flax.Build.NativeCpp.BuildOptions.ScriptingAPIOptions.FileReferences">
            <summary>
            The .Net libraries references (dll or exe files paths).
            </summary>
        </member>
        <member name="F:Flax.Build.NativeCpp.BuildOptions.ScriptingAPIOptions.IgnoreMissingDocumentationWarnings">
            <summary>
            True if ignore compilation warnings due to missing code documentation comments.
            </summary>
        </member>
        <member name="M:Flax.Build.NativeCpp.BuildOptions.ScriptingAPIOptions.Add(Flax.Build.NativeCpp.BuildOptions.ScriptingAPIOptions)">
            <summary>
            Adds the other options into this.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="F:Flax.Build.NativeCpp.BuildOptions.ScriptingAPI">
            <summary>
            The scripting API building options.
            </summary>
        </member>
        <member name="M:Flax.Build.NativeCpp.BuildOptions.MergeSourcePathsIntoSourceFiles">
            <summary>
            Merges the files from input source paths into source files and clears the source paths list.
            </summary>
        </member>
        <member name="T:Flax.Build.NativeCpp.FavorSizeOrSpeed">
            <summary>
            The compilation optimization hint.
            </summary>
        </member>
        <member name="F:Flax.Build.NativeCpp.FavorSizeOrSpeed.Neither">
            <summary>
            The default option.
            </summary>
        </member>
        <member name="F:Flax.Build.NativeCpp.FavorSizeOrSpeed.FastCode">
            <summary>
            The fast code.
            </summary>
        </member>
        <member name="F:Flax.Build.NativeCpp.FavorSizeOrSpeed.SmallCode">
            <summary>
            The small code.
            </summary>
        </member>
        <member name="T:Flax.Build.NativeCpp.CompileEnvironment">
            <summary>
            The C++ compilation environment required to build source files in the native modules.
            </summary>
        </member>
        <member name="F:Flax.Build.NativeCpp.CompileEnvironment.FavorSizeOrSpeed">
            <summary>
            Selects a predefined set of options that affect the size and speed of generated code.
            </summary>
        </member>
        <member name="F:Flax.Build.NativeCpp.CompileEnvironment.EnableExceptions">
            <summary>
            Enables exceptions support.
            </summary>
        </member>
        <member name="F:Flax.Build.NativeCpp.CompileEnvironment.RuntimeTypeInfo">
            <summary>
            Enables RTTI.
            </summary>
        </member>
        <member name="F:Flax.Build.NativeCpp.CompileEnvironment.Inlining">
            <summary>
            Enables functions inlining support.
            </summary>
        </member>
        <member name="F:Flax.Build.NativeCpp.CompileEnvironment.Optimization">
            <summary>
            Enables code optimization.
            </summary>
        </member>
        <member name="F:Flax.Build.NativeCpp.CompileEnvironment.WholeProgramOptimization">
            <summary>
            Enables the whole program optimization.
            </summary>
        </member>
        <member name="F:Flax.Build.NativeCpp.CompileEnvironment.FunctionLevelLinking">
            <summary>
            Enables functions level linking support.
            </summary>
        </member>
        <member name="F:Flax.Build.NativeCpp.CompileEnvironment.DebugInformation">
            <summary>
            Enables debug information generation.
            </summary>
        </member>
        <member name="F:Flax.Build.NativeCpp.CompileEnvironment.UseDebugCRT">
            <summary>
            Hints to use Debug version of the standard library.
            </summary>
        </member>
        <member name="F:Flax.Build.NativeCpp.CompileEnvironment.CompileAsWinRT">
            <summary>
            Hints to compile code for WinRT.
            </summary>
        </member>
        <member name="F:Flax.Build.NativeCpp.CompileEnvironment.WinRTComponentExtensions">
            <summary>
            Enables WinRT component extensions.
            </summary>
        </member>
        <member name="F:Flax.Build.NativeCpp.CompileEnvironment.GenerateDocumentation">
            <summary>
            Enables documentation generation.
            </summary>
        </member>
        <member name="F:Flax.Build.NativeCpp.CompileEnvironment.RuntimeChecks">
            <summary>
            Enables runtime checks.
            </summary>
        </member>
        <member name="F:Flax.Build.NativeCpp.CompileEnvironment.StringPooling">
            <summary>
            Enables string pooling.
            </summary>
        </member>
        <member name="F:Flax.Build.NativeCpp.CompileEnvironment.IntrinsicFunctions">
            <summary>
            Enables the compiler intrinsic functions.
            </summary>
        </member>
        <member name="F:Flax.Build.NativeCpp.CompileEnvironment.BufferSecurityCheck">
            <summary>
            Enables buffer security checks.
            </summary>
        </member>
        <member name="F:Flax.Build.NativeCpp.CompileEnvironment.TreatWarningsAsErrors">
            <summary>
            Hints to treat warnings as errors.
            </summary>
        </member>
        <member name="F:Flax.Build.NativeCpp.CompileEnvironment.PreprocessorDefinitions">
            <summary>
            The collection of defines with preprocessing symbol for a source files.
            </summary>
        </member>
        <member name="F:Flax.Build.NativeCpp.CompileEnvironment.IncludePaths">
            <summary>
            The additional paths to add to the list of directories searched for include files.
            </summary>
        </member>
        <member name="M:Flax.Build.NativeCpp.CompileEnvironment.Clone">
            <inheritdoc />
        </member>
        <member name="T:Flax.Build.NativeCpp.CompileOutput">
            <summary>
            The C++ compilation output data container.
            </summary>
        </member>
        <member name="F:Flax.Build.NativeCpp.CompileOutput.ObjectFiles">
            <summary>
            The result object files.
            </summary>
        </member>
        <member name="F:Flax.Build.NativeCpp.CompileOutput.DebugDataFiles">
            <summary>
            The result debug data files.
            </summary>
        </member>
        <member name="F:Flax.Build.NativeCpp.CompileOutput.DocumentationFiles">
            <summary>
            The result documentation files.
            </summary>
        </member>
        <member name="T:Flax.Build.NativeCpp.IncludesCache">
            <summary>
            The C++ header files includes cache for C++ source files.
            </summary>
        </member>
        <member name="M:Flax.Build.NativeCpp.IncludesCache.FindAllIncludedFiles(System.String)">
            <summary>
            Finds all included files by the source file (including dependencies).
            </summary>
            <param name="sourceFile">The source file path.</param>
            <returns>The list of included files by this file. Not null nut may be empty.</returns>
        </member>
        <member name="T:Flax.Build.NativeCpp.LinkerOutput">
            <summary>
            The linked output file types.
            </summary>
        </member>
        <member name="F:Flax.Build.NativeCpp.LinkerOutput.Executable">
            <summary>
            The executable file (aka .exe file).
            </summary>
        </member>
        <member name="F:Flax.Build.NativeCpp.LinkerOutput.SharedLibrary">
            <summary>
            The shared library file (aka .dll file).
            </summary>
        </member>
        <member name="F:Flax.Build.NativeCpp.LinkerOutput.StaticLibrary">
            <summary>
            The static library file (aka .lib file).
            </summary>
        </member>
        <member name="F:Flax.Build.NativeCpp.LinkerOutput.ImportLibrary">
            <summary>
            The import library file (aka .lib file).
            </summary>
        </member>
        <member name="T:Flax.Build.NativeCpp.LinkEnvironment">
            <summary>
            The C++ linking environment required to build source files in the native modules.
            </summary>
        </member>
        <member name="F:Flax.Build.NativeCpp.LinkEnvironment.Output">
            <summary>
            The output type.
            </summary>
        </member>
        <member name="F:Flax.Build.NativeCpp.LinkEnvironment.Optimization">
            <summary>
            Enables the code optimization.
            </summary>
        </member>
        <member name="F:Flax.Build.NativeCpp.LinkEnvironment.DebugInformation">
            <summary>
            Enables debug information generation.
            </summary>
        </member>
        <member name="F:Flax.Build.NativeCpp.LinkEnvironment.UseFullDebugInformation">
            <summary>
            Hints to use full debug information.
            </summary>
        </member>
        <member name="F:Flax.Build.NativeCpp.LinkEnvironment.UseFastPDBLinking">
            <summary>
            Hints to use fast PDB linking.
            </summary>
        </member>
        <member name="F:Flax.Build.NativeCpp.LinkEnvironment.LinkTimeCodeGeneration">
            <summary>
            Enables the link time code generation (LTCG).
            </summary>
        </member>
        <member name="F:Flax.Build.NativeCpp.LinkEnvironment.UseIncrementalLinking">
            <summary>
            Hints to use incremental linking.
            </summary>
        </member>
        <member name="F:Flax.Build.NativeCpp.LinkEnvironment.GenerateWindowsMetadata">
            <summary>
            Enables Windows Metadata generation.
            </summary>
        </member>
        <member name="F:Flax.Build.NativeCpp.LinkEnvironment.LinkAsConsoleProgram">
            <summary>
            Use CONSOLE subsystem on Windows instead of the WINDOWS one.
            </summary>
        </member>
        <member name="F:Flax.Build.NativeCpp.LinkEnvironment.GenerateDocumentation">
            <summary>
            Enables documentation generation.
            </summary>
        </member>
        <member name="F:Flax.Build.NativeCpp.LinkEnvironment.InputFiles">
            <summary>
            The collection of the object files to be linked.
            </summary>
        </member>
        <member name="F:Flax.Build.NativeCpp.LinkEnvironment.DocumentationFiles">
            <summary>
            The collection of the documentation files to be used during linked file documentation generation. Used only if <see cref="F:Flax.Build.NativeCpp.LinkEnvironment.GenerateDocumentation"/> is enabled.
            </summary>
        </member>
        <member name="F:Flax.Build.NativeCpp.LinkEnvironment.InputLibraries">
            <summary>
            The collection of dependent static or import libraries that need to be linked.
            </summary>
        </member>
        <member name="F:Flax.Build.NativeCpp.LinkEnvironment.LibraryPaths">
            <summary>
            The collection of dependent static or import libraries paths.
            </summary>
        </member>
        <member name="M:Flax.Build.NativeCpp.LinkEnvironment.Clone">
            <inheritdoc />
        </member>
        <member name="T:Flax.Build.Plugin">
            <summary>
            Defines a build system plugin that can customize building process or implement a custom functionalities like scripting language integration or automated process for game project.
            </summary>
        </member>
        <member name="F:Flax.Build.Plugin.Name">
            <summary>
            The plugin name.
            </summary>
        </member>
        <member name="M:Flax.Build.Plugin.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Flax.Build.Plugin"/> class.
            </summary>
        </member>
        <member name="M:Flax.Build.Plugin.Init">
            <summary>
            Initializes the plugin.
            </summary>
        </member>
        <member name="T:Flax.Build.Plugins.VisualScriptingPlugin">
            <summary>
            Flax.Build plugin for Visual Scripting support. Generates required bindings glue code for overriding native methods with Visual Scripts. 
            </summary>
            <seealso cref="T:Flax.Build.Plugin" />
        </member>
        <member name="M:Flax.Build.Plugins.VisualScriptingPlugin.Init">
            <inheritdoc />
        </member>
        <member name="T:Flax.Build.ProfileEventScope">
            <summary>
            Inserts a profiling event for the given code scope.
            </summary>
        </member>
        <member name="M:Flax.Build.ProfileEventScope.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Flax.Build.ProfileEventScope"/> class.
            </summary>
            <param name="name">The event name.</param>
        </member>
        <member name="M:Flax.Build.ProfileEventScope.Dispose">
            <summary>
            Ends the profiling event.
            </summary>
        </member>
        <member name="T:Flax.Build.Profiling">
            <summary>
            The build system performance profiling tools.
            </summary>
        </member>
        <member name="T:Flax.Build.Profiling.Event">
            <summary>
            The performance event data.
            </summary>
        </member>
        <member name="F:Flax.Build.Profiling.Event.Name">
            <summary>
            The event name.
            </summary>
        </member>
        <member name="F:Flax.Build.Profiling.Event.StartTime">
            <summary>
            The event start time.
            </summary>
        </member>
        <member name="F:Flax.Build.Profiling.Event.Duration">
            <summary>
            The event duration.
            </summary>
        </member>
        <member name="F:Flax.Build.Profiling.Event.Depth">
            <summary>
            The event call depth (for parent-children events evaluation).
            </summary>
        </member>
        <member name="F:Flax.Build.Profiling.Event.ThreadId">
            <summary>
            The calling thread id.
            </summary>
        </member>
        <member name="M:Flax.Build.Profiling.Begin(System.String)">
            <summary>
            Begins the profiling event.
            </summary>
            <param name="name">The name.</param>
            <returns>The event id. Used by <see cref="M:Flax.Build.Profiling.End(System.Int32)"/> callback.</returns>
        </member>
        <member name="M:Flax.Build.Profiling.End(System.Int32)">
            <summary>
            Ends the profiling event.
            </summary>
            <param name="id">The event identifier returned by <see cref="M:Flax.Build.Profiling.Begin(System.String)"/>.</param>
        </member>
        <member name="M:Flax.Build.Profiling.LogStats">
            <summary>
            Logs the recorded profiler events.
            </summary>
        </member>
        <member name="M:Flax.Build.Profiling.GenerateTraceEventFile">
            <summary>
            Generates the Trace Event file for profiling build system events.
            </summary>
        </member>
        <member name="T:Flax.Build.ProjectTarget">
            <summary>
            The build target that is based on .flaxproj file. Used by engine, game and plugins targets. This target uses standard Flax project structure and is always located in root of the Source directory.
            </summary>
            <seealso cref="T:Flax.Build.Target" />
        </member>
        <member name="F:Flax.Build.ProjectTarget.Project">
            <summary>
            The loaded project file.
            </summary>
        </member>
        <member name="M:Flax.Build.ProjectTarget.Init">
            <inheritdoc />
        </member>
        <member name="M:Flax.Build.ProjectTarget.SelectReferencedTarget(Flax.Build.ProjectInfo,Flax.Build.Target[])">
            <inheritdoc />
        </member>
        <member name="M:Flax.Build.ProjectTarget.SetupTargetEnvironment(Flax.Build.NativeCpp.BuildOptions)">
            <inheritdoc />
        </member>
        <member name="T:Flax.Build.TargetType">
            <summary>
            The target types.
            </summary>
        </member>
        <member name="F:Flax.Build.TargetType.NativeCpp">
            <summary>
            The C++ project.
            </summary>
        </member>
        <member name="F:Flax.Build.TargetType.DotNet">
            <summary>
            The C# project.
            </summary>
        </member>
        <member name="T:Flax.Build.TargetOutputType">
            <summary>
            The target output product types.
            </summary>
        </member>
        <member name="F:Flax.Build.TargetOutputType.Executable">
            <summary>
            The standalone executable file.
            </summary>
        </member>
        <member name="F:Flax.Build.TargetOutputType.Library">
            <summary>
            The library file.
            </summary>
        </member>
        <member name="T:Flax.Build.TargetLinkType">
            <summary>
            The target binaries linking types.
            </summary>
        </member>
        <member name="F:Flax.Build.TargetLinkType.Monolithic">
            <summary>
            Link all modules (included into a build) into a single binary.
            </summary>
        </member>
        <member name="F:Flax.Build.TargetLinkType.Modular">
            <summary>
            Link all modules into individual dynamic libraries.
            </summary>
        </member>
        <member name="T:Flax.Build.Target">
            <summary>
            Defines a build target that combines modules to produce a final executable file or composite library.
            </summary>
        </member>
        <member name="F:Flax.Build.Target.Name">
            <summary>
            The target name.
            </summary>
        </member>
        <member name="F:Flax.Build.Target.ProjectName">
            <summary>
            The project name.
            </summary>
        </member>
        <member name="F:Flax.Build.Target.OutputName">
            <summary>
            The target output binary name.
            </summary>
        </member>
        <member name="F:Flax.Build.Target.FilePath">
            <summary>
            The target file path.
            </summary>
        </member>
        <member name="F:Flax.Build.Target.FolderPath">
            <summary>
            The path of the folder that contains this target file.
            </summary>
        </member>
        <member name="F:Flax.Build.Target.IsEditor">
            <summary>
            True if the build target is Editor or Editor environment, otherwise false. Can be used to modify build environment when building for Editor.
            </summary>
        </member>
        <member name="F:Flax.Build.Target.IsPreBuilt">
            <summary>
            True if target is pre built and might not contain full sources (eg. binaries are shipped with pre-build target data without sources).
            </summary>
        </member>
        <member name="F:Flax.Build.Target.UseSymbolsExports">
            <summary>
            True if export symbols when building this target.
            </summary>
        </member>
        <member name="F:Flax.Build.Target.Type">
            <summary>
            The target type.
            </summary>
        </member>
        <member name="F:Flax.Build.Target.OutputType">
            <summary>
            The target output type.
            </summary>
        </member>
        <member name="F:Flax.Build.Target.LinkType">
            <summary>
            The target link type.
            </summary>
        </member>
        <member name="F:Flax.Build.Target.Platforms">
            <summary>
            The target platforms.
            </summary>
        </member>
        <member name="F:Flax.Build.Target.Architectures">
            <summary>
            The target platform architectures.
            </summary>
        </member>
        <member name="F:Flax.Build.Target.Configurations">
            <summary>
            The target build configurations.
            </summary>
        </member>
        <member name="F:Flax.Build.Target.ConfigurationName">
            <summary>
            The custom prefix for the target configuration. Null value indicates the project name as a prefix (or gathered from CustomExternalProjectFilePath).
            </summary>
        </member>
        <member name="F:Flax.Build.Target.GlobalDefinitions">
            <summary>
            The collection of macros to define globally across the whole target (for all of its modules).
            </summary>
        </member>
        <member name="F:Flax.Build.Target.Modules">
            <summary>
            The collection of the modules to be compiled into the target (module names).
            </summary>
        </member>
        <member name="F:Flax.Build.Target.Win32ResourceFile">
            <summary>
            The resource file for Win32 platforms to be included into the output executable file (can be used to customize app icon, description and file copyright note).
            </summary>
        </member>
        <member name="F:Flax.Build.Target.CustomExternalProjectFilePath">
            <summary>
            the custom project file path (disables project file generation for this target).
            </summary>
        </member>
        <member name="M:Flax.Build.Target.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Flax.Build.Target"/> class.
            </summary>
        </member>
        <member name="M:Flax.Build.Target.Init">
            <summary>
            Initializes the target properties.
            </summary>
        </member>
        <member name="M:Flax.Build.Target.GetArchitectures(Flax.Build.TargetPlatform)">
            <summary>
            Gets the supported architectures for the given platform.
            </summary>
            <param name="platform">The platform.</param>
            <returns>The target architectures collection.</returns>
        </member>
        <member name="M:Flax.Build.Target.SelectReferencedTarget(Flax.Build.ProjectInfo,Flax.Build.Target[])">
            <summary>
            Selects the referenced target to build from the list of possible targets (eg. editor targets pick editor targets).
            </summary>
            <param name="project">The project to pick the target from.</param>
            <param name="projectTargets">The targets declared within the project.</param>
            <returns>The target to reference.</returns>
        </member>
        <member name="M:Flax.Build.Target.GetOutputFilePath(Flax.Build.NativeCpp.BuildOptions,System.Nullable{Flax.Build.TargetOutputType})">
            <summary>
            Gets the output file path.
            </summary>
            <param name="options">The build options.</param>
            <param name="outputType">The custom output type (for default one override).</param>
            <returns>The output file path.</returns>
        </member>
        <member name="M:Flax.Build.Target.SetupTargetEnvironment(Flax.Build.NativeCpp.BuildOptions)">
            <summary>
            Setups the target building environment (native C++). Allows to modify compiler and linker options. Options applied here are used by all modules included into this target (can be overridden per module).
            </summary>
            <param name="options">The build options.</param>
        </member>
        <member name="M:Flax.Build.Target.PreBuild">
            <summary>
            Called before building this target.
            </summary>
        </member>
        <member name="M:Flax.Build.Target.PreBuild(Flax.Build.Graph.TaskGraph,Flax.Build.NativeCpp.BuildOptions)">
            <summary>
            Called before building this target with a given build options. Can be used to inject custom commands into the task graph.
            </summary>
            <param name="graph">The task graph.</param>
            <param name="buildOptions">The current build options.</param>
        </member>
        <member name="M:Flax.Build.Target.PostBuild(Flax.Build.Graph.TaskGraph,Flax.Build.NativeCpp.BuildOptions)">
            <summary>
            Called after building this target with a given build options. Can be used to inject custom commands into the task graph.
            </summary>
            <param name="graph">The task graph.</param>
            <param name="buildOptions">The current build options.</param>
        </member>
        <member name="M:Flax.Build.Target.PostBuild">
            <summary>
            Called after building this target.
            </summary>
        </member>
        <member name="T:Flax.Build.ThirdPartyModule">
            <summary>
            The build module from 3rd Party source.
            </summary>
            <seealso cref="T:Flax.Build.Module" />
        </member>
        <member name="T:Flax.Build.ThirdPartyModule.LicenseTypes">
            <summary>
            The 3rd Party Module license types.
            </summary>
        </member>
        <member name="F:Flax.Build.ThirdPartyModule.LicenseTypes.Invalid">
            <summary>
            The invalid.
            </summary>
        </member>
        <member name="F:Flax.Build.ThirdPartyModule.LicenseTypes.Custom">
            <summary>
            The custom license (license file must be specified).
            </summary>
        </member>
        <member name="F:Flax.Build.ThirdPartyModule.LicenseTypes.Apache2">
            <summary>
            Apache license 2.0 (apache-2.0)
            </summary>
        </member>
        <member name="F:Flax.Build.ThirdPartyModule.LicenseTypes.BoostSoftwareLicense">
            <summary>
            Boost Software License 1.0 (bsl-1.0)
            </summary>
        </member>
        <member name="F:Flax.Build.ThirdPartyModule.LicenseTypes.BSD2Clause">
            <summary>
            BSD 2-clause "Simplified" license (bsd-2-clause)
            </summary>
        </member>
        <member name="F:Flax.Build.ThirdPartyModule.LicenseTypes.BSD3Clause">
            <summary>
            BSD 3-clause "New" or "Revised" license (bsd-3-clause)
            </summary>
        </member>
        <member name="F:Flax.Build.ThirdPartyModule.LicenseTypes.BSD3ClauseClear">
            <summary>
            BSD 3-clause Clear license (bsd-3-clause-clear)
            </summary>
        </member>
        <member name="F:Flax.Build.ThirdPartyModule.LicenseTypes.CreativeCommons">
            <summary>
            Creative Commons license family	(cc)
            </summary>
        </member>
        <member name="F:Flax.Build.ThirdPartyModule.LicenseTypes.CreativeCommonsZero">
            <summary>
            Creative Commons Zero v1.0 Universal (cc0-1.0)
            </summary>
        </member>
        <member name="F:Flax.Build.ThirdPartyModule.LicenseTypes.CreativeCommonsAttribution">
            <summary>
            Creative Commons Attribution 4.0 (cc-by-4.0)
            </summary>
        </member>
        <member name="F:Flax.Build.ThirdPartyModule.LicenseTypes.CreativeCommonsAttributionShareAlike">
            <summary>
            Creative Commons Attribution Share Alike 4.0 (cc-by-sa-4.0)
            </summary>
        </member>
        <member name="F:Flax.Build.ThirdPartyModule.LicenseTypes.ECL2">
            <summary>
            Educational Community License v2.0 (ecl-2.0)
            </summary>
        </member>
        <member name="F:Flax.Build.ThirdPartyModule.LicenseTypes.EPL1">
            <summary>
            Eclipse Public License 1.0 (epl-1.0)
            </summary>
        </member>
        <member name="F:Flax.Build.ThirdPartyModule.LicenseTypes.EUPL11">
            <summary>
            European Union Public License 1.1 (eupl-1.1)
            </summary>
        </member>
        <member name="F:Flax.Build.ThirdPartyModule.LicenseTypes.AGPL3">
            <summary>
            GNU Affero General Public License v3.0 (agpl-3.0)
            </summary>
        </member>
        <member name="F:Flax.Build.ThirdPartyModule.LicenseTypes.GPL">
            <summary>
            GNU General Public License family (gpl)
            </summary>
        </member>
        <member name="F:Flax.Build.ThirdPartyModule.LicenseTypes.GPL2">
            <summary>
            GNU General Public License v2.0 (gpl-2.0)
            </summary>
        </member>
        <member name="F:Flax.Build.ThirdPartyModule.LicenseTypes.GPL3">
            <summary>
            GNU General Public License v3.0 (gpl-3.0)
            </summary>
        </member>
        <member name="F:Flax.Build.ThirdPartyModule.LicenseTypes.LGPL">
            <summary>
            GNU Lesser General Public License family (lgpl)
            </summary>
        </member>
        <member name="F:Flax.Build.ThirdPartyModule.LicenseTypes.LGPL21">
            <summary>
            GNU Lesser General Public License v2.1 (lgpl-2.1)
            </summary>
        </member>
        <member name="F:Flax.Build.ThirdPartyModule.LicenseTypes.LGPL3">
            <summary>
            GNU Lesser General Public License v3.0 (lgpl-3.0)
            </summary>
        </member>
        <member name="F:Flax.Build.ThirdPartyModule.LicenseTypes.ISC">
            <summary>
            ISC (isc)
            </summary>
        </member>
        <member name="F:Flax.Build.ThirdPartyModule.LicenseTypes.LaTeXProjectPublicLicense">
            <summary>
            LaTeX Project Public License v1.3c (lppl-1.3c)
            </summary>
        </member>
        <member name="F:Flax.Build.ThirdPartyModule.LicenseTypes.MicrosoftPublicLicense">
            <summary>
            Microsoft Public License (ms-pl)
            </summary>
        </member>
        <member name="F:Flax.Build.ThirdPartyModule.LicenseTypes.MIT">
            <summary>
            MIT (mit)
            </summary>
        </member>
        <member name="F:Flax.Build.ThirdPartyModule.LicenseTypes.MozillaPublicLicense2">
            <summary>
             Mozilla Public License 2.0 (mpl-2.0)
            </summary>
        </member>
        <member name="F:Flax.Build.ThirdPartyModule.LicenseTypes.OpenSoftwareLicense">
            <summary>
            Open Software License 3.0 (osl-3.0)
            </summary>
        </member>
        <member name="F:Flax.Build.ThirdPartyModule.LicenseTypes.OpenFontLicense">
            <summary>
            SIL Open Font License 1.1 (ofl-1.1)
            </summary>
        </member>
        <member name="F:Flax.Build.ThirdPartyModule.LicenseTypes.NCSA">
            <summary>
            University of Illinois/NCSA Open Source License (ncsa)
            </summary>
        </member>
        <member name="F:Flax.Build.ThirdPartyModule.LicenseTypes.Unlicense">
            <summary>
            The Unlicense (unlicense)
            </summary>
        </member>
        <member name="F:Flax.Build.ThirdPartyModule.LicenseTypes.zLib">
            <summary>
            zLib License (zlib)
            </summary>
        </member>
        <member name="F:Flax.Build.ThirdPartyModule.LicenseType">
            <summary>
            The license type.
            </summary>
        </member>
        <member name="F:Flax.Build.ThirdPartyModule.LicenseFilePath">
            <summary>
            The path to the license file (relative to the module file).
            </summary>
        </member>
        <member name="M:Flax.Build.ThirdPartyModule.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Flax.Build.ThirdPartyModule.Setup(Flax.Build.NativeCpp.BuildOptions)">
            <inheritdoc />
        </member>
        <member name="M:Flax.Build.ThirdPartyModule.GetFilesToDeploy(System.Collections.Generic.List{System.String})">
            <inheritdoc />
        </member>
        <member name="T:Flax.Build.InvalidPlatformException">
            <summary>
            The unsupported platform exception for code paths that require other platform.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Flax.Build.InvalidPlatformException.#ctor(Flax.Build.TargetPlatform)">
            <summary>
            Initializes a new instance of the <see cref="T:Flax.Build.InvalidPlatformException"/> class.
            </summary>
            <param name="platform">The platform.</param>
        </member>
        <member name="M:Flax.Build.InvalidPlatformException.#ctor(Flax.Build.TargetPlatform,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Flax.Build.InvalidPlatformException"/> class.
            </summary>
            <param name="platform">The platform.</param>
            <param name="message">The additional message.</param>
        </member>
        <member name="T:Flax.Build.Platform">
            <summary>
            The base class for all platform toolsets.
            </summary>
        </member>
        <member name="P:Flax.Build.Platform.BuildTargetPlatform">
            <summary>
            Gets the current target platform that build tool runs on.
            </summary>
        </member>
        <member name="P:Flax.Build.Platform.BuildPlatform">
            <summary>
            Gets the current platform that build tool runs on.
            </summary>
        </member>
        <member name="P:Flax.Build.Platform.Target">
            <summary>
            Gets the platform target type.
            </summary>
        </member>
        <member name="P:Flax.Build.Platform.HasRequiredSDKsInstalled">
            <summary>
            Gets a value indicating whether required external SDKs are installed for this platform.
            </summary>
        </member>
        <member name="P:Flax.Build.Platform.HasSharedLibrarySupport">
            <summary>
            Gets a value indicating whether that platform supports shared libraries (dynamic link libraries).
            </summary>
        </member>
        <member name="P:Flax.Build.Platform.HasModularBuildSupport">
            <summary>
            Gets a value indicating whether that platform supports building target into modular libraries (otherwise will force monolithic linking).
            </summary>
        </member>
        <member name="P:Flax.Build.Platform.HasExecutableFileReferenceSupport">
            <summary>
            Gets a value indicating whether that platform supports using executable file as a reference when linking shared library. Otherwise, platform enforces monolithic linking or separate shared libraries usage.
            </summary>
        </member>
        <member name="P:Flax.Build.Platform.ExecutableFileExtension">
            <summary>
            Gets the executable file extension (including leading dot).
            </summary>
        </member>
        <member name="P:Flax.Build.Platform.SharedLibraryFileExtension">
            <summary>
            Gets the shared library file extension (including leading dot).
            </summary>
        </member>
        <member name="P:Flax.Build.Platform.StaticLibraryFileExtension">
            <summary>
            Gets the static library file extension (including leading dot).
            </summary>
        </member>
        <member name="P:Flax.Build.Platform.ProgramDatabaseFileExtension">
            <summary>
            Gets the program database file extension (including leading dot).
            </summary>
        </member>
        <member name="P:Flax.Build.Platform.ExecutableFilePrefix">
            <summary>
            Gets the executable files prefix.
            </summary>
        </member>
        <member name="P:Flax.Build.Platform.SharedLibraryFilePrefix">
            <summary>
            Gets the shared library files prefix.
            </summary>
        </member>
        <member name="P:Flax.Build.Platform.StaticLibraryFilePrefix">
            <summary>
            Gets the statuc library files prefix.
            </summary>
        </member>
        <member name="P:Flax.Build.Platform.DefaultProjectFormat">
            <summary>
            Gets the default project format used by the given platform.
            </summary>
        </member>
        <member name="M:Flax.Build.Platform.CreateToolchain(Flax.Build.TargetArchitecture)">
            <summary>
            Creates the toolchain for a given architecture.
            </summary>
            <param name="architecture">The architecture.</param>
            <returns>The toolchain.</returns>
        </member>
        <member name="M:Flax.Build.Platform.CanBuildPlatform(Flax.Build.TargetPlatform)">
            <summary>
            Determines whether this platform can build for the specified platform.
            </summary>
            <param name="platform">The platform.</param>
            <returns><c>true</c> if this platform can build the specified platform; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Flax.Build.Platform.GetLinkOutputFileName(System.String,Flax.Build.NativeCpp.LinkerOutput)">
            <summary>
            Gets the path to the output file for the linker.
            </summary>
            <param name="name">The original library name.</param>
            <param name="output">The output file type.</param>
            <returns>The file name (including prefix, name and extension).</returns>
        </member>
        <member name="M:Flax.Build.Platform.GetPlatform(Flax.Build.TargetPlatform,System.Boolean)">
            <summary>
            Creates the build toolchain for a given platform and architecture.
            </summary>
            <param name="targetPlatform">The target platform.</param>
            <param name="nullIfMissing">True if return null platform if it's missing, otherwise will invoke an exception.</param>
            <returns>The toolchain.</returns>
        </member>
        <member name="M:Flax.Build.Platform.TryGetToolchain(Flax.Build.TargetArchitecture)">
            <summary>
            Tries to create the build toolchain for a given architecture. Returns null if platform is not supported.
            </summary>
            <param name="targetArchitecture">The target architecture.</param>
            <returns>The toolchain.</returns>
        </member>
        <member name="M:Flax.Build.Platform.GetToolchain(Flax.Build.TargetArchitecture)">
            <summary>
            Creates the build toolchain for a given architecture.
            </summary>
            <param name="targetArchitecture">The target architecture.</param>
            <returns>The toolchain.</returns>
        </member>
        <member name="M:Flax.Build.Platform.IsPlatformSupported(Flax.Build.TargetPlatform,Flax.Build.TargetArchitecture)">
            <summary>
            Creates the project files generator for the specified project format.
            </summary>
            <param name="targetPlatform">The target platform.</param>
            <param name="targetArchitecture">The target architecture.</param>
            <returns>True if the given platform is supported, otherwise false.</returns>
        </member>
        <member name="T:Flax.Build.Sdk">
            <summary>
            The base class for all SDKs.
            </summary>
        </member>
        <member name="P:Flax.Build.Sdk.IsValid">
            <summary>
            Returns true if SDK is valid.
            </summary>
        </member>
        <member name="P:Flax.Build.Sdk.Version">
            <summary>
            Gets the version of the SDK.
            </summary>
        </member>
        <member name="P:Flax.Build.Sdk.RootPath">
            <summary>
            Gets the path to the SDK install location.
            </summary>
        </member>
        <member name="P:Flax.Build.Sdk.Platforms">
            <summary>
            Gets the platforms list supported by this SDK.
            </summary>
        </member>
        <member name="M:Flax.Build.Sdk.Print">
            <summary>
            Prints info about all SDKs.
            </summary>
        </member>
        <member name="M:Flax.Build.Sdk.Get(System.String)">
            <summary>
            Gets the specified SDK.
            </summary>
            <param name="name">The SDK name.</param>
            <returns>The SDK instance or null if not supported.</returns>
        </member>
        <member name="M:Flax.Build.Sdk.HasValid(System.String)">
            <summary>
            Returns true if SDK is supported and is valid.
            </summary>
            <param name="name">The SDK name.</param>
            <returns><c>true</c> if the SDK is valid; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Flax.Build.Toolchain">
            <summary>
            The base class for all build toolchains.
            </summary>
        </member>
        <member name="P:Flax.Build.Toolchain.Platform">
            <summary>
            Gets the platform target type.
            </summary>
        </member>
        <member name="P:Flax.Build.Toolchain.Architecture">
            <summary>
            Gets the platform target architecture.
            </summary>
        </member>
        <member name="F:Flax.Build.Toolchain.SystemIncludePaths">
            <summary>
            The default system include paths (for native C++ compilation).
            </summary>
        </member>
        <member name="F:Flax.Build.Toolchain.SystemLibraryPaths">
            <summary>
            The default system library paths (for native C++ linking).
            </summary>
        </member>
        <member name="P:Flax.Build.Toolchain.UseImportLibraryWhenLinking">
            <summary>
            True it toolset requires the import library (eg. .lib or .a) when linking the binary (shared library or executable file). Otherwise, linking will be performed again the shared library (eg. .dll or .so).
            </summary>
        </member>
        <member name="P:Flax.Build.Toolchain.GeneratesImportLibraryWhenLinking">
            <summary>
            True it toolset generates the import library (eg. .lib or .a) file automatically when linking the binary (shared library or executable file).
            </summary>
        </member>
        <member name="P:Flax.Build.Toolchain.DllExport">
            <summary>
            Gets the compiler attribute for symbols exported to shared library (dll file).
            </summary>
        </member>
        <member name="P:Flax.Build.Toolchain.DllImport">
            <summary>
            Gets the compiler attribute for symbols imported from shared library (dll file).
            </summary>
        </member>
        <member name="M:Flax.Build.Toolchain.#ctor(Flax.Build.Platform,Flax.Build.TargetArchitecture)">
            <summary>
            Initializes a new instance of the <see cref="T:Flax.Build.Toolchain"/> class.
            </summary>
            <param name="platform">The platform.</param>
            <param name="architecture">The target architecture.</param>
        </member>
        <member name="M:Flax.Build.Toolchain.LogInfo">
            <summary>
            Prints the information about the toolchain to the log.
            </summary>
        </member>
        <member name="M:Flax.Build.Toolchain.SetupEnvironment(Flax.Build.NativeCpp.BuildOptions)">
            <summary>
            Setups the building environment (native C++). Allows to modify compiler and linker options.
            </summary>
            <param name="options">The build options.</param>
        </member>
        <member name="M:Flax.Build.Toolchain.PreBuild(Flax.Build.Graph.TaskGraph,Flax.Build.NativeCpp.BuildOptions)">
            <summary>
            Called before building a target with a given build options. Can be used to inject custom commands into the task graph.
            </summary>
            <param name="graph">The task graph.</param>
            <param name="options">The current build options.</param>
        </member>
        <member name="M:Flax.Build.Toolchain.PostBuild(Flax.Build.Graph.TaskGraph,Flax.Build.NativeCpp.BuildOptions)">
            <summary>
            Called after building a target with a given build options. Can be used to inject custom commands into the task graph.
            </summary>
            <param name="graph">The task graph.</param>
            <param name="options">The current build options.</param>
        </member>
        <member name="M:Flax.Build.Toolchain.CompileCppFiles(Flax.Build.Graph.TaskGraph,Flax.Build.NativeCpp.BuildOptions,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Compiles the C++ source files.
            </summary>
            <param name="graph">The task graph.</param>
            <param name="options">The build options with compilation environment.</param>
            <param name="sourceFiles">The source files.</param>
            <param name="outputPath">The output directory path (for object files).</param>
            <returns>The output data.</returns>
        </member>
        <member name="M:Flax.Build.Toolchain.LinkFiles(Flax.Build.Graph.TaskGraph,Flax.Build.NativeCpp.BuildOptions,System.String)">
            <summary>
            Links the compiled object files.
            </summary>
            <param name="graph">The task graph.</param>
            <param name="options">The build options with linking environment.</param>
            <param name="outputFilePath">The output file path (result linked file).</param>
        </member>
        <member name="T:Flax.Build.TargetPlatform">
            <summary>
            The target platform types.
            </summary>
        </member>
        <member name="F:Flax.Build.TargetPlatform.Windows">
            <summary>
            Running on Windows.
            </summary>
        </member>
        <member name="F:Flax.Build.TargetPlatform.XboxOne">
            <summary>
            Running on Xbox One.
            </summary>
        </member>
        <member name="F:Flax.Build.TargetPlatform.UWP">
            <summary>
            Running Windows Store App (Universal Windows Platform).
            </summary>
        </member>
        <member name="F:Flax.Build.TargetPlatform.Linux">
            <summary>
            Running on Linux.
            </summary>
        </member>
        <member name="F:Flax.Build.TargetPlatform.PS4">
            <summary>
            Running on PlayStation 4.
            </summary>
        </member>
        <member name="F:Flax.Build.TargetPlatform.XboxScarlett">
            <summary>
            Running on Xbox Series X.
            </summary>
        </member>
        <member name="F:Flax.Build.TargetPlatform.Android">
            <summary>
            Running on Android.
            </summary>
        </member>
        <member name="F:Flax.Build.TargetPlatform.Switch">
            <summary>
            Running on Switch.
            </summary>
        </member>
        <member name="F:Flax.Build.TargetPlatform.PS5">
            <summary>
            Running on PlayStation 5.
            </summary>
        </member>
        <member name="T:Flax.Build.TargetArchitecture">
            <summary>
            The target platform architecture types.
            </summary>
        </member>
        <member name="F:Flax.Build.TargetArchitecture.AnyCPU">
            <summary>
            Anything or not important.
            </summary>
        </member>
        <member name="F:Flax.Build.TargetArchitecture.x86">
            <summary>
            The x86 32-bit.
            </summary>
        </member>
        <member name="F:Flax.Build.TargetArchitecture.x64">
            <summary>
            The x86 64-bit.
            </summary>
        </member>
        <member name="F:Flax.Build.TargetArchitecture.ARM">
            <summary>
            The ARM 32-bit.
            </summary>
        </member>
        <member name="F:Flax.Build.TargetArchitecture.ARM64">
            <summary>
            The ARM 64-bit.
            </summary>
        </member>
        <member name="T:Flax.Build.TargetConfiguration">
            <summary>
            The target configuration modes.
            </summary>
        </member>
        <member name="F:Flax.Build.TargetConfiguration.Debug">
            <summary>
            Debug configuration. Without optimizations but with full debugging information.
            </summary>
        </member>
        <member name="F:Flax.Build.TargetConfiguration.Development">
            <summary>
            Development configuration. With basic optimizations and partial debugging data.
            </summary>
        </member>
        <member name="F:Flax.Build.TargetConfiguration.Release">
            <summary>
            Shipping configuration. With full optimization and no debugging data.
            </summary>
        </member>
        <member name="T:Flax.Build.Configuration">
            <summary>
            The build tool configuration options.
            </summary>
        </member>
        <member name="F:Flax.Build.Configuration.DeployOutput">
            <summary>
            Package deployment output path.
            </summary>
        </member>
        <member name="F:Flax.Build.Configuration.DeployEditor">
            <summary>
            Builds and packages the editor.
            </summary>
        </member>
        <member name="F:Flax.Build.Configuration.DeployPlatforms">
            <summary>
            Builds and packages the platforms data.
            </summary>
        </member>
        <member name="F:Flax.Build.Configuration.DeployCert">
            <summary>
            Certificate file path for binaries signing.
            </summary>
        </member>
        <member name="F:Flax.Build.Configuration.DeployCertPass">
            <summary>
            Certificate file password for binaries signing.
            </summary>
        </member>
        <member name="F:Flax.Build.Configuration.DepsToBuild">
            <summary>
            The deps to build. Separated by ',' char. Empty if build all deps.
            </summary>
        </member>
        <member name="F:Flax.Build.Configuration.AndroidPlatformApi">
            <summary>
            Specifies the Android API level to use (eg. 24).
            </summary>
        </member>
        <member name="F:Flax.Build.Configuration.CurrentDirectory">
            <summary>
            The custom working directory.
            </summary>
        </member>
        <member name="F:Flax.Build.Configuration.GenerateProject">
            <summary>
            Generates the projects for the workspace.
            </summary>
        </member>
        <member name="F:Flax.Build.Configuration.BuildDeps">
            <summary>
            Runs the deps building tool to fetch and compiles the 3rd party files to produce binaries.
            </summary>
        </member>
        <member name="F:Flax.Build.Configuration.ReBuildDeps">
            <summary>
            Runs the deps building tool to fetch and compiles the 3rd party files to produce binaries.
            </summary>
        </member>
        <member name="F:Flax.Build.Configuration.Deploy">
            <summary>
            Runs the deploy tool.
            </summary>
        </member>
        <member name="F:Flax.Build.Configuration.Build">
            <summary>
            Builds the targets. Builds all the targets, use <see cref="F:Flax.Build.Configuration.BuildTargets"/> to select a custom set of targets for the build.
            </summary>
        </member>
        <member name="F:Flax.Build.Configuration.Clean">
            <summary>
            Cleans all the targets and whole build cache data.
            </summary>
        </member>
        <member name="F:Flax.Build.Configuration.Rebuild">
            <summary>
            Rebuilds the targets. Rebuilds all the targets, use <see cref="F:Flax.Build.Configuration.BuildTargets"/> to select a custom set of targets for the build.
            </summary>
        </member>
        <member name="F:Flax.Build.Configuration.PrintSDKs">
            <summary>
            Prints all SDKs found on system. Can be used to query Win10 SDK or any other platform-specific toolsets used by build tool.
            </summary>
        </member>
        <member name="F:Flax.Build.Configuration.PrintPlugins">
            <summary>
            Prints all build system plugins.
            </summary>
        </member>
        <member name="F:Flax.Build.Configuration.BuildTargets">
            <summary>
            The custom set of targets to build.
            </summary>
        </member>
        <member name="F:Flax.Build.Configuration.SkipTargets">
            <summary>
            The custom set of targets to skip during building. Can be used to skip building engine when building game modules.
            </summary>
        </member>
        <member name="F:Flax.Build.Configuration.BuildConfigurations">
            <summary>
            The target configuration to build. If not specified builds all supported configurations.
            </summary>
        </member>
        <member name="F:Flax.Build.Configuration.BuildPlatforms">
            <summary>
            The target platform to build. If not specified builds all supported platforms.
            </summary>
        </member>
        <member name="F:Flax.Build.Configuration.BuildArchitectures">
            <summary>
            The target platform architecture to build. If not specified builds all valid architectures.
            </summary>
        </member>
        <member name="F:Flax.Build.Configuration.Mutex">
            <summary>
            Enables using guard mutex to prevent running multiple instances of the tool.
            </summary>
        </member>
        <member name="F:Flax.Build.Configuration.ConsoleLog">
            <summary>
            Enables logging into console.
            </summary>
        </member>
        <member name="F:Flax.Build.Configuration.Verbose">
            <summary>
            Enables verbose logging and detailed diagnostics.
            </summary>
        </member>
        <member name="F:Flax.Build.Configuration.PerformanceInfo">
            <summary>
            Enables build steps timing diagnostics.
            </summary>
        </member>
        <member name="F:Flax.Build.Configuration.TraceEventFile">
            <summary>
            Outputs the Chrome Trace Event file (in Json format) with performance events for build system profiling.
            </summary>
        </member>
        <member name="F:Flax.Build.Configuration.LogFile">
            <summary>
            The log file path relative to the working directory.
            </summary>
        </member>
        <member name="F:Flax.Build.Configuration.MaxConcurrency">
            <summary>
            The maximum allowed concurrency for a build system (maximum active worker threads count).
            </summary>
        </member>
        <member name="F:Flax.Build.Configuration.ConcurrencyProcessorScale">
            <summary>
            The concurrency scale for a build system that specifies how many worker threads allocate per-logical processor.
            </summary>
        </member>
        <member name="F:Flax.Build.Configuration.BinariesFolder">
            <summary>
            The output binaries folder path relative to the working directory.
            </summary>
        </member>
        <member name="F:Flax.Build.Configuration.IntermediateFolder">
            <summary>
            The intermediate build files folder path relative to the working directory.
            </summary>
        </member>
        <member name="F:Flax.Build.Configuration.HotReloadPostfix">
            <summary>
            If non-empty, marks the build as hot-reload for modules reloading at runtime and adds the specified postfix to the output binaries names to prevent file collisions with existing modules.
            </summary>
        </member>
        <member name="F:Flax.Build.Configuration.BuildBindingsOnly">
            <summary>
            If set, forces targets to build only bindings (C# binaries-only).
            </summary>
        </member>
        <member name="F:Flax.Build.Configuration.ProjectFormatVS2015">
            <summary>
            Generates Visual Studio 2015 project format files. Valid only with -genproject option.
            </summary>
        </member>
        <member name="F:Flax.Build.Configuration.ProjectFormatVS2017">
            <summary>
            Generates Visual Studio 2017 project format files. Valid only with -genproject option.
            </summary>
        </member>
        <member name="F:Flax.Build.Configuration.ProjectFormatVS2019">
            <summary>
            Generates Visual Studio 2019 project format files. Valid only with -genproject option.
            </summary>
        </member>
        <member name="F:Flax.Build.Configuration.ProjectFormatVSCode">
            <summary>
            Generates Visual Studio Code project format files. Valid only with -genproject option.
            </summary>
        </member>
        <member name="F:Flax.Build.Configuration.ProjectFormatCustom">
            <summary>
            Generates code project files for a custom project format type. Valid only with -genproject option.
            </summary>
        </member>
        <member name="F:Flax.Build.Configuration.Compiler">
            <summary>
            Overrides the compiler to use for building. Eg. v140 overrides the toolset when building for Windows.
            </summary>
        </member>
        <member name="F:Flax.Build.Configuration.CustomDefines">
            <summary>
            Custom configuration defines provided via command line for the build tool.
            </summary>
        </member>
        <member name="T:Flax.Build.Platforms.AndroidNdk">
            <summary>
            The Android NDK.
            </summary>
            <seealso cref="T:Flax.Build.Sdk" />
        </member>
        <member name="F:Flax.Build.Platforms.AndroidNdk.Instance">
            <summary>
            The singleton instance.
            </summary>
        </member>
        <member name="P:Flax.Build.Platforms.AndroidNdk.Platforms">
            <inheritdoc />
        </member>
        <member name="M:Flax.Build.Platforms.AndroidNdk.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Flax.Build.Platforms.AndroidNdk"/> class.
            </summary>
        </member>
        <member name="T:Flax.Build.Platforms.AndroidPlatform">
            <summary>
            The Android build platform implementation.
            </summary>
            <seealso cref="T:Flax.Build.Platform" />
            <seealso cref="T:Flax.Build.Platforms.UnixPlatform" />
        </member>
        <member name="P:Flax.Build.Platforms.AndroidPlatform.Target">
            <inheritdoc />
        </member>
        <member name="P:Flax.Build.Platforms.AndroidPlatform.HasRequiredSDKsInstalled">
            <inheritdoc />
        </member>
        <member name="P:Flax.Build.Platforms.AndroidPlatform.HasSharedLibrarySupport">
            <inheritdoc />
        </member>
        <member name="P:Flax.Build.Platforms.AndroidPlatform.HasExecutableFileReferenceSupport">
            <inheritdoc />
        </member>
        <member name="P:Flax.Build.Platforms.AndroidPlatform.ExecutableFileExtension">
            <inheritdoc />
        </member>
        <member name="P:Flax.Build.Platforms.AndroidPlatform.ExecutableFilePrefix">
            <inheritdoc />
        </member>
        <member name="M:Flax.Build.Platforms.AndroidPlatform.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Flax.Build.Platforms.AndroidPlatform"/> class.
            </summary>
        </member>
        <member name="M:Flax.Build.Platforms.AndroidPlatform.CreateToolchain(Flax.Build.TargetArchitecture)">
            <inheritdoc />
        </member>
        <member name="T:Flax.Build.Platforms.AndroidSdk">
            <summary>
            The Android SDK.
            </summary>
            <seealso cref="T:Flax.Build.Sdk" />
        </member>
        <member name="F:Flax.Build.Platforms.AndroidSdk.Instance">
            <summary>
            The singleton instance.
            </summary>
        </member>
        <member name="P:Flax.Build.Platforms.AndroidSdk.Platforms">
            <inheritdoc />
        </member>
        <member name="M:Flax.Build.Platforms.AndroidSdk.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Flax.Build.Platforms.AndroidSdk"/> class.
            </summary>
        </member>
        <member name="M:Flax.Build.Platforms.AndroidSdk.GetHostName">
            <summary>
            Gets the name of the host platform used in Android SDK toolset.
            </summary>
            <returns>The name.</returns>
        </member>
        <member name="T:Flax.Build.Platforms.AndroidToolchain">
            <summary>
            The Android build toolchain implementation.
            </summary>
            <seealso cref="T:Flax.Build.Platform" />
            <seealso cref="T:Flax.Build.Platforms.UnixToolchain" />
        </member>
        <member name="M:Flax.Build.Platforms.AndroidToolchain.#ctor(Flax.Build.Platforms.AndroidPlatform,Flax.Build.TargetArchitecture,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Flax.Build.Platforms.AndroidToolchain"/> class.
            </summary>
            <param name="platform">The platform.</param>
            <param name="architecture">The target architecture.</param>
            <param name="toolchainRoot">The toolchain root path.</param>
        </member>
        <member name="M:Flax.Build.Platforms.AndroidToolchain.GetAbiName(Flax.Build.TargetArchitecture)">
            <summary>
            Gets the Android ABI name for a given processor architecture.
            </summary>
            <param name="architecture">The architecture.</param>
            <returns>The Android ABI name.</returns>
        </member>
        <member name="M:Flax.Build.Platforms.AndroidToolchain.SetupEnvironment(Flax.Build.NativeCpp.BuildOptions)">
            <inheritdoc />
        </member>
        <member name="M:Flax.Build.Platforms.AndroidToolchain.SetupCompileCppFilesArgs(Flax.Build.Graph.TaskGraph,Flax.Build.NativeCpp.BuildOptions,System.Collections.Generic.List{System.String},System.String)">
            <inheritdoc />
        </member>
        <member name="M:Flax.Build.Platforms.AndroidToolchain.SetupLinkFilesArgs(Flax.Build.Graph.TaskGraph,Flax.Build.NativeCpp.BuildOptions,System.Collections.Generic.List{System.String},System.String)">
            <inheritdoc />
        </member>
        <member name="M:Flax.Build.Platforms.AndroidToolchain.SetupArchiveFilesArgs(Flax.Build.Graph.TaskGraph,Flax.Build.NativeCpp.BuildOptions,System.Collections.Generic.List{System.String},System.String)">
            <inheritdoc />
        </member>
        <member name="M:Flax.Build.Platforms.AndroidToolchain.CreateArchive(Flax.Build.Graph.TaskGraph,Flax.Build.NativeCpp.BuildOptions,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Flax.Build.Platforms.AndroidToolchain.CreateBinary(Flax.Build.Graph.TaskGraph,Flax.Build.NativeCpp.BuildOptions,System.String)">
            <inheritdoc />
        </member>
        <member name="T:Flax.Build.Platforms.LinuxPlatform">
            <summary>
            The Linux build platform implementation.
            </summary>
            <seealso cref="T:Flax.Build.Platform" />
            <seealso cref="T:Flax.Build.Platforms.UnixPlatform" />
        </member>
        <member name="P:Flax.Build.Platforms.LinuxPlatform.Target">
            <inheritdoc />
        </member>
        <member name="P:Flax.Build.Platforms.LinuxPlatform.HasRequiredSDKsInstalled">
            <inheritdoc />
        </member>
        <member name="P:Flax.Build.Platforms.LinuxPlatform.HasSharedLibrarySupport">
            <inheritdoc />
        </member>
        <member name="F:Flax.Build.Platforms.LinuxPlatform.ToolchainRoot">
            <summary>
            The toolchain folder root.
            </summary>
        </member>
        <member name="F:Flax.Build.Platforms.LinuxPlatform.Compiler">
            <summary>
            The compiler name.
            </summary>
        </member>
        <member name="M:Flax.Build.Platforms.LinuxPlatform.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Flax.Build.Platforms.LinuxPlatform"/> class.
            </summary>
        </member>
        <member name="M:Flax.Build.Platforms.LinuxPlatform.CreateToolchain(Flax.Build.TargetArchitecture)">
            <inheritdoc />
        </member>
        <member name="M:Flax.Build.Platforms.LinuxPlatform.CanBuildPlatform(Flax.Build.TargetPlatform)">
            <inheritdoc />
        </member>
        <member name="T:Flax.Build.Platforms.LinuxToolchain">
            <summary>
            The Linux build toolchain implementation.
            </summary>
            <seealso cref="T:Flax.Build.Platform" />
            <seealso cref="T:Flax.Build.Platforms.UnixToolchain" />
        </member>
        <member name="M:Flax.Build.Platforms.LinuxToolchain.#ctor(Flax.Build.Platforms.LinuxPlatform,Flax.Build.TargetArchitecture)">
            <summary>
            Initializes a new instance of the <see cref="T:Flax.Build.Platforms.LinuxToolchain"/> class.
            </summary>
            <param name="platform">The platform.</param>
            <param name="architecture">The target architecture.</param>
        </member>
        <member name="M:Flax.Build.Platforms.LinuxToolchain.SetupEnvironment(Flax.Build.NativeCpp.BuildOptions)">
            <inheritdoc />
        </member>
        <member name="M:Flax.Build.Platforms.LinuxToolchain.SetupCompileCppFilesArgs(Flax.Build.Graph.TaskGraph,Flax.Build.NativeCpp.BuildOptions,System.Collections.Generic.List{System.String},System.String)">
            <inheritdoc />
        </member>
        <member name="M:Flax.Build.Platforms.LinuxToolchain.SetupLinkFilesArgs(Flax.Build.Graph.TaskGraph,Flax.Build.NativeCpp.BuildOptions,System.Collections.Generic.List{System.String},System.String)">
            <inheritdoc />
        </member>
        <member name="M:Flax.Build.Platforms.LinuxToolchain.CreateBinary(Flax.Build.Graph.TaskGraph,Flax.Build.NativeCpp.BuildOptions,System.String)">
            <inheritdoc />
        </member>
        <member name="T:Flax.Build.Platforms.UnixPlatform">
            <summary>
            The build platform for all Unix-like systems.
            </summary>
            <seealso cref="T:Flax.Build.Platform" />
        </member>
        <member name="P:Flax.Build.Platforms.UnixPlatform.ExecutableFileExtension">
            <inheritdoc />
        </member>
        <member name="P:Flax.Build.Platforms.UnixPlatform.SharedLibraryFileExtension">
            <inheritdoc />
        </member>
        <member name="P:Flax.Build.Platforms.UnixPlatform.StaticLibraryFileExtension">
            <inheritdoc />
        </member>
        <member name="P:Flax.Build.Platforms.UnixPlatform.ProgramDatabaseFileExtension">
            <inheritdoc />
        </member>
        <member name="P:Flax.Build.Platforms.UnixPlatform.SharedLibraryFilePrefix">
            <inheritdoc />
        </member>
        <member name="P:Flax.Build.Platforms.UnixPlatform.StaticLibraryFilePrefix">
            <inheritdoc />
        </member>
        <member name="P:Flax.Build.Platforms.UnixPlatform.DefaultProjectFormat">
            <inheritdoc />
        </member>
        <member name="M:Flax.Build.Platforms.UnixPlatform.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Flax.Build.Platforms.UnixPlatform"/> class.
            </summary>
        </member>
        <member name="M:Flax.Build.Platforms.UnixPlatform.Which(System.String)">
            <summary>
            Uses which command to find the given file.
            </summary>
            <param name="name">The name of the file to find.</param>
            <returns>The full path or null if not found anything valid.</returns>
        </member>
        <member name="T:Flax.Build.Platforms.UnixToolchain">
            <summary>
            The build toolchain for all Unix-like systems.
            </summary>
            <seealso cref="T:Flax.Build.Toolchain" />
        </member>
        <member name="F:Flax.Build.Platforms.UnixToolchain.ToolsetRoot">
            <summary>
            The toolset root folder path.
            </summary>
        </member>
        <member name="F:Flax.Build.Platforms.UnixToolchain.ArchitectureName">
            <summary>
            The build architecture name.
            </summary>
        </member>
        <member name="F:Flax.Build.Platforms.UnixToolchain.ClangPath">
            <summary>
            The clang path.
            </summary>
        </member>
        <member name="F:Flax.Build.Platforms.UnixToolchain.ArPath">
            <summary>
            The ar tool path.
            </summary>
        </member>
        <member name="F:Flax.Build.Platforms.UnixToolchain.LlvmArPath">
            <summary>
            The LLVM ar tool path.
            </summary>
        </member>
        <member name="F:Flax.Build.Platforms.UnixToolchain.RanlibPath">
            <summary>
            The ranlib tool path.
            </summary>
        </member>
        <member name="F:Flax.Build.Platforms.UnixToolchain.StripPath">
            <summary>
            The strip tool path.
            </summary>
        </member>
        <member name="F:Flax.Build.Platforms.UnixToolchain.ObjcopyPath">
            <summary>
            The obj copy tool path.
            </summary>
        </member>
        <member name="F:Flax.Build.Platforms.UnixToolchain.LdPath">
            <summary>
            The ld tool path.
            </summary>
        </member>
        <member name="F:Flax.Build.Platforms.UnixToolchain.ClangVersion">
            <summary>
            The clang tool version.
            </summary>
        </member>
        <member name="M:Flax.Build.Platforms.UnixToolchain.#ctor(Flax.Build.Platforms.UnixPlatform,Flax.Build.TargetArchitecture,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Flax.Build.Platforms.UnixToolchain"/> class.
            </summary>
            <param name="platform">The platform.</param>
            <param name="architecture">The target architecture.</param>
            <param name="toolchainRoots">The root folder for the toolchains installation.</param>
            <param name="systemCompiler">The system compiler to use. Null if use toolset root.</param>
            <param name="toolchainSubDir">The custom toolchain folder location in <paramref name="toolchainRoots"/> directory. If nul the architecture name will be sued.</param>
        </member>
        <member name="M:Flax.Build.Platforms.UnixToolchain.GetToolchainName(Flax.Build.TargetPlatform,Flax.Build.TargetArchitecture)">
            <summary>
            Gets the name of the toolchain.
            </summary>
            <param name="platform">The platform.</param>
            <param name="architecture">The architecture.</param>
            <returns>The toolchain name.</returns>
        </member>
        <member name="P:Flax.Build.Platforms.UnixToolchain.DllExport">
            <inheritdoc />
        </member>
        <member name="P:Flax.Build.Platforms.UnixToolchain.DllImport">
            <inheritdoc />
        </member>
        <member name="M:Flax.Build.Platforms.UnixToolchain.LogInfo">
            <inheritdoc />
        </member>
        <member name="M:Flax.Build.Platforms.UnixToolchain.SetupEnvironment(Flax.Build.NativeCpp.BuildOptions)">
            <inheritdoc />
        </member>
        <member name="M:Flax.Build.Platforms.UnixToolchain.SetupCompileCppFilesArgs(Flax.Build.Graph.TaskGraph,Flax.Build.NativeCpp.BuildOptions,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Setups the C++ files compilation arguments.
            </summary>
            <param name="graph">The graph.</param>
            <param name="options">The options.</param>
            <param name="args">The arguments.</param>
            <param name="outputPath">The output directory path (for object files).</param>
        </member>
        <member name="M:Flax.Build.Platforms.UnixToolchain.SetupArchiveFilesArgs(Flax.Build.Graph.TaskGraph,Flax.Build.NativeCpp.BuildOptions,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Setups the linking files to archive arguments.
            </summary>
            <param name="graph">The graph.</param>
            <param name="options">The options.</param>
            <param name="args">The arguments.</param>
            <param name="outputFilePath">The output file path.</param>
        </member>
        <member name="M:Flax.Build.Platforms.UnixToolchain.SetupLinkFilesArgs(Flax.Build.Graph.TaskGraph,Flax.Build.NativeCpp.BuildOptions,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Setups the linking files arguments.
            </summary>
            <param name="graph">The graph.</param>
            <param name="options">The options.</param>
            <param name="args">The arguments.</param>
            <param name="outputFilePath">The output file path.</param>
        </member>
        <member name="M:Flax.Build.Platforms.UnixToolchain.CompileCppFiles(Flax.Build.Graph.TaskGraph,Flax.Build.NativeCpp.BuildOptions,System.Collections.Generic.List{System.String},System.String)">
            <inheritdoc />
        </member>
        <member name="M:Flax.Build.Platforms.UnixToolchain.CreateArchive(Flax.Build.Graph.TaskGraph,Flax.Build.NativeCpp.BuildOptions,System.String)">
            <summary>
            Links the files into an archive (static library).
            </summary>
        </member>
        <member name="M:Flax.Build.Platforms.UnixToolchain.CreateBinary(Flax.Build.Graph.TaskGraph,Flax.Build.NativeCpp.BuildOptions,System.String)">
            <summary>
            Links the files into a binary (executable file or dynamic library).
            </summary>
        </member>
        <member name="M:Flax.Build.Platforms.UnixToolchain.LinkFiles(Flax.Build.Graph.TaskGraph,Flax.Build.NativeCpp.BuildOptions,System.String)">
            <inheritdoc />
        </member>
        <member name="T:Flax.Build.Platforms.UWPPlatform">
            <summary>
            The Universal Windows Platform (UWP) implementation.
            </summary>
            <seealso cref="T:Flax.Build.Platform" />
            <seealso cref="T:Flax.Build.Platforms.WindowsPlatformBase" />
        </member>
        <member name="P:Flax.Build.Platforms.UWPPlatform.Target">
            <inheritdoc />
        </member>
        <member name="M:Flax.Build.Platforms.UWPPlatform.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Flax.Build.Platforms.UWPPlatform"/> class.
            </summary>
        </member>
        <member name="M:Flax.Build.Platforms.UWPPlatform.CreateToolchain(Flax.Build.TargetArchitecture)">
            <inheritdoc />
        </member>
        <member name="T:Flax.Build.Platforms.UWPToolchain">
            <summary>
            The Universal Windows Platform (UWP) toolchain implementation.
            </summary>
            <seealso cref="T:Flax.Build.Toolchain" />
            <seealso cref="T:Flax.Build.Platforms.WindowsToolchainBase" />
        </member>
        <member name="M:Flax.Build.Platforms.UWPToolchain.#ctor(Flax.Build.Platforms.UWPPlatform,Flax.Build.TargetArchitecture,Flax.Build.Platforms.WindowsPlatformToolset,Flax.Build.Platforms.WindowsPlatformSDK)">
            <summary>
            Initializes a new instance of the <see cref="T:Flax.Build.Platforms.UWPToolchain"/> class.
            </summary>
            <param name="platform">The platform.</param>
            <param name="architecture">The target architecture.</param>
            <param name="toolsetVer">The target platform toolset version.</param>
            <param name="sdkVer">The target platform SDK version.</param>
        </member>
        <member name="M:Flax.Build.Platforms.UWPToolchain.SetupCompileCppFilesArgs(Flax.Build.Graph.TaskGraph,Flax.Build.NativeCpp.BuildOptions,System.Collections.Generic.List{System.String})">
            <inheritdoc />
        </member>
        <member name="M:Flax.Build.Platforms.UWPToolchain.SetupEnvironment(Flax.Build.NativeCpp.BuildOptions)">
            <inheritdoc />
        </member>
        <member name="T:Flax.Build.Platforms.WindowsPlatform">
            <summary>
            The Microsoft Windows platform implementation.
            </summary>
            <seealso cref="T:Flax.Build.Platform" />
            <seealso cref="T:Flax.Build.Platforms.WindowsPlatformBase" />
        </member>
        <member name="P:Flax.Build.Platforms.WindowsPlatform.Target">
            <inheritdoc />
        </member>
        <member name="M:Flax.Build.Platforms.WindowsPlatform.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Flax.Build.Platforms.WindowsPlatform"/> class.
            </summary>
        </member>
        <member name="M:Flax.Build.Platforms.WindowsPlatform.CreateToolchain(Flax.Build.TargetArchitecture)">
            <inheritdoc />
        </member>
        <member name="M:Flax.Build.Platforms.WindowsPlatform.CanBuildPlatform(Flax.Build.TargetPlatform)">
            <inheritdoc />
        </member>
        <member name="M:Flax.Build.Platforms.WindowsPlatform.Flax#Build#Projects#VisualStudio#IVisualStudioProjectCustomizer#WriteVisualStudioBegin(Flax.Build.Projects.VisualStudio.VisualStudioProject,Flax.Build.Platform,System.Text.StringBuilder,System.Text.StringBuilder,System.Text.StringBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Flax.Build.Platforms.WindowsPlatform.Flax#Build#Projects#VisualStudio#IVisualStudioProjectCustomizer#WriteVisualStudioBuildProperties(Flax.Build.Projects.VisualStudio.VisualStudioProject,Flax.Build.Platform,Flax.Build.Toolchain,Flax.Build.Projects.Project.ConfigurationData,System.Text.StringBuilder,System.Text.StringBuilder,System.Text.StringBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Flax.Build.Platforms.WindowsPlatform.Flax#Build#Projects#VisualStudio#IVisualStudioProjectCustomizer#WriteVisualStudioEnd(Flax.Build.Projects.VisualStudio.VisualStudioProject,Flax.Build.Platform,System.Text.StringBuilder,System.Text.StringBuilder,System.Text.StringBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Flax.Build.Platforms.WindowsPlatform.Flax#Build#Projects#IProjectCustomizer#GetSolutionArchitectureName(Flax.Build.TargetArchitecture,System.String@)">
            <inheritdoc />
        </member>
        <member name="T:Flax.Build.Platforms.WindowsPlatformToolset">
            <summary>
            The Windows platform toolset versions.
            </summary>
        </member>
        <member name="F:Flax.Build.Platforms.WindowsPlatformToolset.Default">
            <summary>
            The same as Visual Studio version (for the project files generation).
            </summary>
        </member>
        <member name="F:Flax.Build.Platforms.WindowsPlatformToolset.Latest">
            <summary>
            Use the latest toolset.
            </summary>
        </member>
        <member name="F:Flax.Build.Platforms.WindowsPlatformToolset.v140">
            <summary>
            Visual Studio 2015
            </summary>
        </member>
        <member name="F:Flax.Build.Platforms.WindowsPlatformToolset.v141">
            <summary>
            Visual Studio 2017
            </summary>
        </member>
        <member name="F:Flax.Build.Platforms.WindowsPlatformToolset.v142">
            <summary>
            Visual Studio 2019
            </summary>
        </member>
        <member name="T:Flax.Build.Platforms.WindowsPlatformSDK">
            <summary>
            The Windows platform SDK versions.
            </summary>
        </member>
        <member name="F:Flax.Build.Platforms.WindowsPlatformSDK.Latest">
            <summary>
            Use the latest SDK.
            </summary>
        </member>
        <member name="F:Flax.Build.Platforms.WindowsPlatformSDK.v8_1">
            <summary>
            Windows 8.1 SDK
            </summary>
        </member>
        <member name="F:Flax.Build.Platforms.WindowsPlatformSDK.v10_0_10240_0">
            <summary>
            Windows 10 SDK (10.0.10240.0) RTM (even if never named like that officially)
            </summary>
        </member>
        <member name="F:Flax.Build.Platforms.WindowsPlatformSDK.v10_0_10586_0">
            <summary>
            Windows 10 SDK (10.0.10586.0) November 2015 Update
            </summary>
        </member>
        <member name="F:Flax.Build.Platforms.WindowsPlatformSDK.v10_0_14393_0">
            <summary>
            Windows 10 SDK (10.0.14393.0) 2016 Anniversary Update
            </summary>
        </member>
        <member name="F:Flax.Build.Platforms.WindowsPlatformSDK.v10_0_15063_0">
            <summary>
            Windows 10 SDK (10.0.15063.0) 2017 Creators Update
            </summary>
        </member>
        <member name="F:Flax.Build.Platforms.WindowsPlatformSDK.v10_0_16299_0">
            <summary>
            Windows 10 SDK (10.0.16299.0) 2017 Fall Creators Update
            </summary>
        </member>
        <member name="F:Flax.Build.Platforms.WindowsPlatformSDK.v10_0_17134_0">
            <summary>
            Windows 10 SDK (10.0.17134.0) April 2018 Update
            </summary>
        </member>
        <member name="F:Flax.Build.Platforms.WindowsPlatformSDK.v10_0_17763_0">
            <summary>
            Windows 10 SDK (10.0.17763.0) October 2018 Update
            </summary>
        </member>
        <member name="F:Flax.Build.Platforms.WindowsPlatformSDK.v10_0_18362_0">
            <summary>
            Windows 10 SDK (10.0.18362.0) May 2019 Update
            </summary>
        </member>
        <member name="F:Flax.Build.Platforms.WindowsPlatformSDK.v10_0_19041_0">
            <summary>
            Windows 10 SDK (10.0.19041.0)
            </summary>
        </member>
        <member name="T:Flax.Build.Platforms.WindowsPlatformBase">
            <summary>
            The Microsoft Windows base platform implementation.
            </summary>
            <seealso cref="T:Flax.Build.Platform" />
        </member>
        <member name="F:Flax.Build.Platforms.WindowsPlatformBase._hasRequiredSDKsInstalled">
            <summary>
            The flag used for <see cref="P:Flax.Build.Platforms.WindowsPlatformBase.HasRequiredSDKsInstalled"/>.
            </summary>
        </member>
        <member name="P:Flax.Build.Platforms.WindowsPlatformBase.HasRequiredSDKsInstalled">
            <inheritdoc />
        </member>
        <member name="P:Flax.Build.Platforms.WindowsPlatformBase.HasSharedLibrarySupport">
            <inheritdoc />
        </member>
        <member name="P:Flax.Build.Platforms.WindowsPlatformBase.HasExecutableFileReferenceSupport">
            <inheritdoc />
        </member>
        <member name="P:Flax.Build.Platforms.WindowsPlatformBase.ExecutableFileExtension">
            <inheritdoc />
        </member>
        <member name="P:Flax.Build.Platforms.WindowsPlatformBase.SharedLibraryFileExtension">
            <inheritdoc />
        </member>
        <member name="P:Flax.Build.Platforms.WindowsPlatformBase.StaticLibraryFileExtension">
            <inheritdoc />
        </member>
        <member name="P:Flax.Build.Platforms.WindowsPlatformBase.ProgramDatabaseFileExtension">
            <inheritdoc />
        </member>
        <member name="P:Flax.Build.Platforms.WindowsPlatformBase.DefaultProjectFormat">
            <inheritdoc />
        </member>
        <member name="M:Flax.Build.Platforms.WindowsPlatformBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Flax.Build.Platforms.WindowsPlatformBase"/> class.
            </summary>
        </member>
        <member name="M:Flax.Build.Platforms.WindowsPlatformBase.TryReadDirRegistryKey(System.String,System.String,System.String@)">
            <summary>
            Tries to reads a directory name stored in a registry key.
            </summary>
            <param name="keyName">The key to read from.</param>
            <param name="valueName">The value within the key to read.</param>
            <param name="value">The directory read from the registry key.</param>
            <returns>True if the key was read, false if it was missing or empty.</returns>
        </member>
        <member name="M:Flax.Build.Platforms.WindowsPlatformBase.TryReadInstallDirRegistryKey32(System.String,System.String,System.String@)">
            <summary>
            Tries to reads an install directory for a 32-bit program from a registry key. It checks for per-user and machine wide settings, and under the Wow64 virtual keys.
            </summary>
            <param name="keySuffix">The path to the key to read, under one of the roots listed above.</param>
            <param name="valueName">The value to be read.</param>
            <param name="dir">When this method completes with success it contains a directory corresponding to the value read.</param>
            <returns>True if the key was read, false otherwise.</returns>
        </member>
        <member name="M:Flax.Build.Platforms.WindowsPlatformBase.GetToolsets">
            <summary>
            Finds all the directories containing the Windows platform toolset.
            </summary>
            <returns>The collection of installed toolsets.</returns>
        </member>
        <member name="M:Flax.Build.Platforms.WindowsPlatformBase.GetSDKVersion(Flax.Build.Platforms.WindowsPlatformSDK)">
            <summary>
            Gets the SDK version.
            </summary>
            <param name="sdk">The SDK.</param>
            <returns>The version of the SDK enum.</returns>
        </member>
        <member name="M:Flax.Build.Platforms.WindowsPlatformBase.GetSDKs">
            <summary>
            Finds all the directories containing the Windows SDKs.
            </summary>
            <returns>The collection of installed SDks.</returns>
        </member>
        <member name="M:Flax.Build.Platforms.WindowsPlatformBase.GetVCToolPath32(Flax.Build.Platforms.WindowsPlatformToolset)">
            <summary>
            Gets the path to the 32-bit tool binaries.
            </summary>
            <param name="toolset">The version of the toolset to use.</param>
            <returns>The directory containing the 64-bit toolchain binaries.</returns>
        </member>
        <member name="M:Flax.Build.Platforms.WindowsPlatformBase.GetVCToolPath64(Flax.Build.Platforms.WindowsPlatformToolset)">
            <summary>
            Gets the path to the 64-bit tool binaries.
            </summary>
            <param name="toolset">The version of the toolset to use.</param>
            <returns>The directory containing the 64-bit toolchain binaries.</returns>
        </member>
        <member name="M:Flax.Build.Platforms.WindowsPlatformBase.Flax#Build#Projects#IProjectCustomizer#GetSolutionArchitectureName(Flax.Build.TargetArchitecture,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Flax.Build.Platforms.WindowsPlatformBase.Flax#Build#Projects#IProjectCustomizer#GetProjectArchitectureName(Flax.Build.Projects.Project,Flax.Build.Platform,Flax.Build.TargetArchitecture,System.String@)">
            <inheritdoc />
        </member>
        <member name="T:Flax.Build.Platforms.WindowsToolchain">
            <summary>
            The Microsoft Windows toolchain implementation.
            </summary>
            <seealso cref="T:Flax.Build.Toolchain" />
            <seealso cref="T:Flax.Build.Platforms.WindowsToolchainBase" />
        </member>
        <member name="M:Flax.Build.Platforms.WindowsToolchain.#ctor(Flax.Build.Platforms.WindowsPlatform,Flax.Build.TargetArchitecture)">
            <summary>
            Initializes a new instance of the <see cref="T:Flax.Build.Platforms.WindowsToolchain"/> class.
            </summary>
            <param name="platform">The platform.</param>
            <param name="architecture">The target architecture.</param>
        </member>
        <member name="M:Flax.Build.Platforms.WindowsToolchain.SetupEnvironment(Flax.Build.NativeCpp.BuildOptions)">
            <inheritdoc />
        </member>
        <member name="M:Flax.Build.Platforms.WindowsToolchain.PreBuild(Flax.Build.Graph.TaskGraph,Flax.Build.NativeCpp.BuildOptions)">
            <inheritdoc />
        </member>
        <member name="T:Flax.Build.Platforms.WindowsToolchainBase">
            <summary>
            The Microsoft Windows base toolchain implementation.
            </summary>
            <seealso cref="T:Flax.Build.Toolchain" />
        </member>
        <member name="F:Flax.Build.Platforms.WindowsToolchainBase._vcToolPath">
            <summary>
            The VC tools root path.
            </summary>
        </member>
        <member name="F:Flax.Build.Platforms.WindowsToolchainBase._compilerPath">
            <summary>
            The compiler path.
            </summary>
        </member>
        <member name="F:Flax.Build.Platforms.WindowsToolchainBase._resourceCompilerPath">
            <summary>
            The resource compiler path.
            </summary>
        </member>
        <member name="F:Flax.Build.Platforms.WindowsToolchainBase._linkerPath">
            <summary>
            The linker path.
            </summary>
        </member>
        <member name="F:Flax.Build.Platforms.WindowsToolchainBase._libToolPath">
            <summary>
            The library tool path.
            </summary>
        </member>
        <member name="F:Flax.Build.Platforms.WindowsToolchainBase._xdcmakePath">
            <summary>
            The xdcmake tool path.
            </summary>
        </member>
        <member name="F:Flax.Build.Platforms.WindowsToolchainBase._makepriPath">
            <summary>
            The makepri tool path.
            </summary>
        </member>
        <member name="P:Flax.Build.Platforms.WindowsToolchainBase.Toolset">
            <summary>
            Gets the platform toolset.
            </summary>
        </member>
        <member name="P:Flax.Build.Platforms.WindowsToolchainBase.SDK">
            <summary>
            Gets the target platform SDK.
            </summary>
        </member>
        <member name="M:Flax.Build.Platforms.WindowsToolchainBase.#ctor(Flax.Build.Platforms.WindowsPlatformBase,Flax.Build.TargetArchitecture,Flax.Build.Platforms.WindowsPlatformToolset,Flax.Build.Platforms.WindowsPlatformSDK)">
            <summary>
            Initializes a new instance of the <see cref="T:Flax.Build.Platforms.WindowsToolchainBase"/> class.
            </summary>
            <param name="platform">The platform.</param>
            <param name="architecture">The target architecture.</param>
            <param name="toolsetVer">The target platform toolset version.</param>
            <param name="sdkVer">The target platform SDK version.</param>
        </member>
        <member name="P:Flax.Build.Platforms.WindowsToolchainBase.UseImportLibraryWhenLinking">
            <inheritdoc />
        </member>
        <member name="P:Flax.Build.Platforms.WindowsToolchainBase.GeneratesImportLibraryWhenLinking">
            <inheritdoc />
        </member>
        <member name="P:Flax.Build.Platforms.WindowsToolchainBase.DllExport">
            <inheritdoc />
        </member>
        <member name="P:Flax.Build.Platforms.WindowsToolchainBase.DllImport">
            <inheritdoc />
        </member>
        <member name="M:Flax.Build.Platforms.WindowsToolchainBase.LogInfo">
            <inheritdoc />
        </member>
        <member name="M:Flax.Build.Platforms.WindowsToolchainBase.AddIncludePath(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Adds the include path to the command line arguments.
            </summary>
            <param name="args">The arguments.</param>
            <param name="path">The include path.</param>
        </member>
        <member name="M:Flax.Build.Platforms.WindowsToolchainBase.GetCppCXMetadataDirectory">
            <summary>
            Gets the C++/CX metadata file directory.
            </summary>
            <returns>The folder path or null if not found.</returns>
        </member>
        <member name="M:Flax.Build.Platforms.WindowsToolchainBase.SetupEnvironment(Flax.Build.NativeCpp.BuildOptions)">
            <inheritdoc />
        </member>
        <member name="M:Flax.Build.Platforms.WindowsToolchainBase.SetupCompileCppFilesArgs(Flax.Build.Graph.TaskGraph,Flax.Build.NativeCpp.BuildOptions,System.Collections.Generic.List{System.String})">
            <summary>
            Setups the C++ files compilation arguments.
            </summary>
            <param name="graph">The graph.</param>
            <param name="options">The options.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Flax.Build.Platforms.WindowsToolchainBase.SetupLinkFilesArgs(Flax.Build.Graph.TaskGraph,Flax.Build.NativeCpp.BuildOptions,System.Collections.Generic.List{System.String})">
            <summary>
            Setups the linking files arguments.
            </summary>
            <param name="graph">The graph.</param>
            <param name="options">The options.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Flax.Build.Platforms.WindowsToolchainBase.CompileCppFiles(Flax.Build.Graph.TaskGraph,Flax.Build.NativeCpp.BuildOptions,System.Collections.Generic.List{System.String},System.String)">
            <inheritdoc />
        </member>
        <member name="M:Flax.Build.Platforms.WindowsToolchainBase.LinkFiles(Flax.Build.Graph.TaskGraph,Flax.Build.NativeCpp.BuildOptions,System.String)">
            <inheritdoc />
        </member>
        <member name="T:Flax.Build.Platforms.GDK">
            <summary>
            The Microsoft Game Development Kit.
            </summary>
            <seealso cref="T:Flax.Build.Sdk" />
        </member>
        <member name="F:Flax.Build.Platforms.GDK.Instance">
            <summary>
            The singleton instance.
            </summary>
        </member>
        <member name="P:Flax.Build.Platforms.GDK.Platforms">
            <inheritdoc />
        </member>
        <member name="M:Flax.Build.Platforms.GDK.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Flax.Build.Platforms.GDK"/> class.
            </summary>
        </member>
        <member name="T:Flax.Build.Platforms.GDKPlatform">
            <summary>
            The GDK platform implementation.
            </summary>
            <seealso cref="T:Flax.Build.Platform" />
            <seealso cref="T:Flax.Build.Platforms.WindowsPlatformBase" />
        </member>
        <member name="M:Flax.Build.Platforms.GDKPlatform.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Flax.Build.Platforms.GDKPlatform"/> class.
            </summary>
        </member>
        <member name="T:Flax.Build.Platforms.GDKToolchain">
            <summary>
            The GDK toolchain implementation.
            </summary>
            <seealso cref="T:Flax.Build.Toolchain" />
            <seealso cref="T:Flax.Build.Platforms.WindowsToolchainBase" />
        </member>
        <member name="M:Flax.Build.Platforms.GDKToolchain.#ctor(Flax.Build.Platforms.GDKPlatform,Flax.Build.TargetArchitecture)">
            <summary>
            Initializes a new instance of the <see cref="T:Flax.Build.Platforms.GDKToolchain"/> class.
            </summary>
            <param name="platform">The platform.</param>
            <param name="architecture">The architecture.</param>
        </member>
        <member name="M:Flax.Build.Platforms.GDKToolchain.SetupEnvironment(Flax.Build.NativeCpp.BuildOptions)">
            <inheritdoc />
        </member>
        <member name="T:Flax.Build.Projects.IProjectCustomizer">
            <summary>
            Interface for objects that can customize generated project files (eg. insert debugger customization or custom extension settings).
            </summary>
        </member>
        <member name="M:Flax.Build.Projects.IProjectCustomizer.GetSolutionArchitectureName(Flax.Build.TargetArchitecture,System.String@)">
            <summary>
            Gets the name of the project architecture for the solution.
            </summary>
            <param name="architecture">The platform architecture.</param>
            <param name="name">The result name.</param>
        </member>
        <member name="M:Flax.Build.Projects.IProjectCustomizer.GetProjectArchitectureName(Flax.Build.Projects.Project,Flax.Build.Platform,Flax.Build.TargetArchitecture,System.String@)">
            <summary>
            Gets the name of the project architecture.
            </summary>
            <param name="project">The project.</param>
            <param name="platform">The platform.</param>
            <param name="architecture">The platform architecture.</param>
            <param name="name">The result name.</param>
        </member>
        <member name="T:Flax.Build.Projects.Project">
            <summary>
            The project file data for generator.
            </summary>
        </member>
        <member name="F:Flax.Build.Projects.Project.Generator">
            <summary>
            The project generator that created this project.
            </summary>
        </member>
        <member name="F:Flax.Build.Projects.Project.Name">
            <summary>
            The project name.
            </summary>
        </member>
        <member name="F:Flax.Build.Projects.Project.Type">
            <summary>
            The project type. Overrides the type of the target.
            </summary>
        </member>
        <member name="F:Flax.Build.Projects.Project.OutputType">
            <summary>
            The project output type. Overrides the output type of the target.
            </summary>
        </member>
        <member name="P:Flax.Build.Projects.Project.Path">
            <summary>
            The project file path.
            </summary>
        </member>
        <member name="F:Flax.Build.Projects.Project.WorkspaceRootPath">
            <summary>
            The workspace root directory path.
            </summary>
        </member>
        <member name="F:Flax.Build.Projects.Project.SourceDirectories">
            <summary>
            The project source files directories.
            </summary>
        </member>
        <member name="F:Flax.Build.Projects.Project.SourceFiles">
            <summary>
            The project source files.
            </summary>
        </member>
        <member name="F:Flax.Build.Projects.Project.GeneratedSourceFiles">
            <summary>
            The project source files that are generated by the build system. Can be hidden in project tree but are relevant for the project.
            </summary>
        </member>
        <member name="F:Flax.Build.Projects.Project.Targets">
            <summary>
            The targets used in the project. Non-empty and non-null collection of one or more valid projects.
            </summary>
        </member>
        <member name="F:Flax.Build.Projects.Project.Defines">
            <summary>
            The source code build defines.
            </summary>
        </member>
        <member name="F:Flax.Build.Projects.Project.SearchPaths">
            <summary>
            The additional included source files path.
            </summary>
        </member>
        <member name="F:Flax.Build.Projects.Project.Dependencies">
            <summary>
            The project dependencies.
            </summary>
        </member>
        <member name="F:Flax.Build.Projects.Project.GroupName">
            <summary>
            The custom name of the project group. Useful to group the project in the solution eg. by category or the project name.
            </summary>
        </member>
        <member name="P:Flax.Build.Projects.Project.SourceFolderPath">
            <summary>
            Gets the source folder path (or workspace root if no source directory is assigned).
            </summary>
        </member>
        <member name="T:Flax.Build.Projects.Project.ConfigurationData">
            <summary>
            The configuration data.
            </summary>
        </member>
        <member name="F:Flax.Build.Projects.Project.ConfigurationData.Name">
            <summary>
            The name of the configuration (eg. Editor.Windows.Debug|x64).
            </summary>
        </member>
        <member name="F:Flax.Build.Projects.Project.ConfigurationData.Text">
            <summary>
            The configuration text (eg.Editor.Windows.Debug).
            </summary>
        </member>
        <member name="F:Flax.Build.Projects.Project.ConfigurationData.Platform">
            <summary>
            The platform.
            </summary>
        </member>
        <member name="F:Flax.Build.Projects.Project.ConfigurationData.PlatformName">
            <summary>
            The platform name.
            </summary>
        </member>
        <member name="F:Flax.Build.Projects.Project.ConfigurationData.Architecture">
            <summary>
            The architecture.
            </summary>
        </member>
        <member name="F:Flax.Build.Projects.Project.ConfigurationData.ArchitectureName">
            <summary>
            The architecture name.
            </summary>
        </member>
        <member name="F:Flax.Build.Projects.Project.ConfigurationData.Configuration">
            <summary>
            The configuration.
            </summary>
        </member>
        <member name="F:Flax.Build.Projects.Project.ConfigurationData.ConfigurationName">
            <summary>
            The configuration name.
            </summary>
        </member>
        <member name="F:Flax.Build.Projects.Project.ConfigurationData.Target">
            <summary>
            The target.
            </summary>
        </member>
        <member name="F:Flax.Build.Projects.Project.ConfigurationData.TargetBuildOptions">
            <summary>
            The target build options merged from the modules (fake project build environment).
            </summary>
        </member>
        <member name="F:Flax.Build.Projects.Project.ConfigurationData.Modules">
            <summary>
            The list of modules for build (fake project build environment).
            </summary>
        </member>
        <member name="M:Flax.Build.Projects.Project.ConfigurationData.#ctor(Flax.Build.Target,Flax.Build.Projects.Project,Flax.Build.Platform,Flax.Build.TargetArchitecture,Flax.Build.TargetConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Flax.Build.Projects.Project.ConfigurationData"/> struct.
            </summary>
            <param name="target">The target.</param>
            <param name="project">The project.</param>
            <param name="platform">The platform.</param>
            <param name="architecture">The architecture.</param>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:Flax.Build.Projects.Project.ConfigurationData.ToString">
            <inheritdoc />
        </member>
        <member name="F:Flax.Build.Projects.Project.Configurations">
            <summary>
            The project configurations.
            </summary>
        </member>
        <member name="T:Flax.Build.Projects.Project.NativeCppProject">
            <summary>
            The native C++ project options.
            </summary>
        </member>
        <member name="F:Flax.Build.Projects.Project.NativeCpp">
            <summary>
            The native C++ project options.
            </summary>
        </member>
        <member name="T:Flax.Build.Projects.Project.CSharpProject">
            <summary>
            The native C# project options.
            </summary>
        </member>
        <member name="F:Flax.Build.Projects.Project.CSharpProject.UseFlaxVS">
            <summary>
            If set to true, the generated project will use Flax.VS extension for scripts debugging, otherwise it will be generic C# project.
            </summary>
        </member>
        <member name="F:Flax.Build.Projects.Project.CSharpProject.SystemReferences">
            <summary>
            The system libraries references.
            </summary>
        </member>
        <member name="F:Flax.Build.Projects.Project.CSharpProject.FileReferences">
            <summary>
            The .Net libraries references (dll or exe files paths).
            </summary>
        </member>
        <member name="F:Flax.Build.Projects.Project.CSharpProject.OutputPath">
            <summary>
            The output folder path (optional).
            </summary>
        </member>
        <member name="F:Flax.Build.Projects.Project.CSharpProject.IntermediateOutputPath">
            <summary>
            The intermediate output folder path (optional).
            </summary>
        </member>
        <member name="F:Flax.Build.Projects.Project.CSharp">
            <summary>
            The native C# project options.
            </summary>
        </member>
        <member name="M:Flax.Build.Projects.Project.Generate">
            <summary>
            Generates the project.
            </summary>
        </member>
        <member name="M:Flax.Build.Projects.Project.ToString">
            <inheritdoc />
        </member>
        <member name="T:Flax.Build.Projects.ProjectFormat">
            <summary>
            The project files format.
            </summary>
        </member>
        <member name="F:Flax.Build.Projects.ProjectFormat.Custom">
            <summary>
            The custom project format (external).
            </summary>
        </member>
        <member name="F:Flax.Build.Projects.ProjectFormat.VisualStudio">
            <summary>
            Visual Studio (auto select the newest version installed on the system).
            </summary>
        </member>
        <member name="F:Flax.Build.Projects.ProjectFormat.VisualStudio2015">
            <summary>
            Visual Studio 2015.
            </summary>
        </member>
        <member name="F:Flax.Build.Projects.ProjectFormat.VisualStudio2017">
            <summary>
            Visual Studio 2017.
            </summary>
        </member>
        <member name="F:Flax.Build.Projects.ProjectFormat.VisualStudio2019">
            <summary>
            Visual Studio 2019.
            </summary>
        </member>
        <member name="F:Flax.Build.Projects.ProjectFormat.VisualStudioCode">
            <summary>
            Visual Studio Code.
            </summary>
        </member>
        <member name="T:Flax.Build.Projects.ProjectGenerator">
            <summary>
            The project files generators base class.
            </summary>
        </member>
        <member name="P:Flax.Build.Projects.ProjectGenerator.ProjectFileExtension">
            <summary>
            Gets the project file extension (excluding the leading dot).
            </summary>
        </member>
        <member name="P:Flax.Build.Projects.ProjectGenerator.SolutionFileExtension">
            <summary>
            Gets the solution file extension (excluding the leading dot).
            </summary>
        </member>
        <member name="P:Flax.Build.Projects.ProjectGenerator.Type">
            <summary>
            Gets the generator projects target type.
            </summary>
        </member>
        <member name="M:Flax.Build.Projects.ProjectGenerator.CreateProject">
            <summary>
            Creates the empty project (factory design pattern).
            </summary>
            <returns>The empty project.</returns>
        </member>
        <member name="M:Flax.Build.Projects.ProjectGenerator.CreateSolution">
            <summary>
            Creates the empty solution (factory design pattern).
            </summary>
            <returns>The empty solution.</returns>
        </member>
        <member name="M:Flax.Build.Projects.ProjectGenerator.GenerateProject(Flax.Build.Projects.Project)">
            <summary>
            Generates the project.
            </summary>
            <param name="project">The project.</param>
        </member>
        <member name="M:Flax.Build.Projects.ProjectGenerator.GenerateSolution(Flax.Build.Projects.Solution)">
            <summary>
            Generates the solution.
            </summary>
            <param name="solution">The solution.</param>
        </member>
        <member name="M:Flax.Build.Projects.ProjectGenerator.GenerateCustomProjects(System.Collections.Generic.List{Flax.Build.Projects.Project})">
            <summary>
            Generates the custom projects for the solution.
            </summary>
            <param name="projects">The projects.</param>
        </member>
        <member name="F:Flax.Build.Projects.ProjectGenerator.CustomProjectTypes">
            <summary>
            The custom project types factories. Key is the custom project format name and the value is the <see cref="T:Flax.Build.Projects.ProjectGenerator"/> factory function used to spawn it.
            </summary>
        </member>
        <member name="M:Flax.Build.Projects.ProjectGenerator.Create(Flax.Build.Projects.ProjectFormat,Flax.Build.TargetType)">
            <summary>
            Creates the project files generator for the specified project format.
            </summary>
            <param name="format">The format.</param>
            <param name="type">The target project type.</param>
            <returns>The generator.</returns>
        </member>
        <member name="T:Flax.Build.Projects.Solution">
            <summary>
            The solution file data for generator.
            </summary>
        </member>
        <member name="F:Flax.Build.Projects.Solution.Name">
            <summary>
            The solution name.
            </summary>
        </member>
        <member name="F:Flax.Build.Projects.Solution.Path">
            <summary>
            The solution file path.
            </summary>
        </member>
        <member name="F:Flax.Build.Projects.Solution.WorkspaceRootPath">
            <summary>
            The workspace root directory path.
            </summary>
        </member>
        <member name="F:Flax.Build.Projects.Solution.Projects">
            <summary>
            The projects.
            </summary>
        </member>
        <member name="F:Flax.Build.Projects.Solution.MainProject">
            <summary>
            The main project to use as solution default (eg. for build and for startup).
            </summary>
        </member>
        <member name="T:Flax.Build.Projects.VisualStudioCode.VisualStudioCodeInstance">
            <summary>
            The Visual Studio Code instance utility.
            </summary>
        </member>
        <member name="F:Flax.Build.Projects.VisualStudioCode.VisualStudioCodeInstance.Path">
            <summary>
            The install directory path.
            </summary>
        </member>
        <member name="M:Flax.Build.Projects.VisualStudioCode.VisualStudioCodeInstance.HasIDE">
            <summary>
            Determines whether any version of the IDE is installed.
            </summary>
            <returns><c>true</c> if any version is installed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Flax.Build.Projects.VisualStudioCode.VisualStudioCodeInstance.GetInstance">
            <summary>
            Gets the installed Visual Studio instance.
            </summary>
            <returns>The install location.</returns>
        </member>
        <member name="T:Flax.Build.Projects.VisualStudioCode.VisualStudioCodeProjectGenerator">
            <summary>
            Project generator for Visual Studio Code.
            </summary>
        </member>
        <member name="M:Flax.Build.Projects.VisualStudioCode.VisualStudioCodeProjectGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Flax.Build.Projects.VisualStudioCode.VisualStudioCodeProjectGenerator"/> class.
            </summary>
        </member>
        <member name="P:Flax.Build.Projects.VisualStudioCode.VisualStudioCodeProjectGenerator.ProjectFileExtension">
            <inheritdoc />
        </member>
        <member name="P:Flax.Build.Projects.VisualStudioCode.VisualStudioCodeProjectGenerator.SolutionFileExtension">
            <inheritdoc />
        </member>
        <member name="P:Flax.Build.Projects.VisualStudioCode.VisualStudioCodeProjectGenerator.Type">
            <inheritdoc />
        </member>
        <member name="M:Flax.Build.Projects.VisualStudioCode.VisualStudioCodeProjectGenerator.CreateProject">
            <inheritdoc />
        </member>
        <member name="M:Flax.Build.Projects.VisualStudioCode.VisualStudioCodeProjectGenerator.GenerateProject(Flax.Build.Projects.Project)">
            <inheritdoc />
        </member>
        <member name="M:Flax.Build.Projects.VisualStudioCode.VisualStudioCodeProjectGenerator.JsonWriter.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Flax.Build.Projects.VisualStudioCode.VisualStudioCodeProjectGenerator.GenerateSolution(Flax.Build.Projects.Solution)">
            <inheritdoc />
        </member>
        <member name="T:Flax.Build.Projects.VisualStudio.CSProjectGenerator">
            <summary>
            The Visual Studio project generator for C# projects (.csproj).
            </summary>
            <seealso cref="T:Flax.Build.Projects.VisualStudio.VisualStudioProjectGenerator" />
        </member>
        <member name="M:Flax.Build.Projects.VisualStudio.CSProjectGenerator.#ctor(Flax.Build.Projects.VisualStudio.VisualStudioVersion)">
            <inheritdoc />
        </member>
        <member name="P:Flax.Build.Projects.VisualStudio.CSProjectGenerator.ProjectFileExtension">
            <inheritdoc />
        </member>
        <member name="P:Flax.Build.Projects.VisualStudio.CSProjectGenerator.Type">
            <inheritdoc />
        </member>
        <member name="M:Flax.Build.Projects.VisualStudio.CSProjectGenerator.GenerateProject(Flax.Build.Projects.Project)">
            <inheritdoc />
        </member>
        <member name="T:Flax.Build.Projects.VisualStudio.IVisualStudioProjectCustomizer">
            <summary>
            Interface for objects that can customize generated Visual Studio project files (eg. insert debugger customization or custom extension settings).
            </summary>
        </member>
        <member name="M:Flax.Build.Projects.VisualStudio.IVisualStudioProjectCustomizer.WriteVisualStudioBegin(Flax.Build.Projects.VisualStudio.VisualStudioProject,Flax.Build.Platform,System.Text.StringBuilder,System.Text.StringBuilder,System.Text.StringBuilder)">
            <summary>
            Writes the Visual Studio project begin custom data.
            </summary>
            <param name="project">The project.</param>
            <param name="platform">The platform.</param>
            <param name="vcProjectFileContent">Contents of the VC project file.</param>
            <param name="vcFiltersFileContent">Contents of the VC filters file.</param>
            <param name="vcUserFileContent">Contents of the VC user file.</param>
        </member>
        <member name="M:Flax.Build.Projects.VisualStudio.IVisualStudioProjectCustomizer.WriteVisualStudioBuildProperties(Flax.Build.Projects.VisualStudio.VisualStudioProject,Flax.Build.Platform,Flax.Build.Toolchain,Flax.Build.Projects.Project.ConfigurationData,System.Text.StringBuilder,System.Text.StringBuilder,System.Text.StringBuilder)">
            <summary>
            Writes the Visual Studio project build configuration properties.
            </summary>
            <param name="project">The project.</param>
            <param name="platform">The platform.</param>
            <param name="toolchain">The toolchain.</param>
            <param name="configuration">The project configuration.</param>
            <param name="vcProjectFileContent">Content of the VC project file.</param>
            <param name="vcFiltersFileContent">Content of the VC filters file.</param>
            <param name="vcUserFileContent">Contents of the VC user file.</param>
        </member>
        <member name="M:Flax.Build.Projects.VisualStudio.IVisualStudioProjectCustomizer.WriteVisualStudioEnd(Flax.Build.Projects.VisualStudio.VisualStudioProject,Flax.Build.Platform,System.Text.StringBuilder,System.Text.StringBuilder,System.Text.StringBuilder)">
            <summary>
            Writes the Visual Studio project end custom data.
            </summary>
            <param name="project">The project.</param>
            <param name="platform">The platform.</param>
            <param name="vcProjectFileContent">Contents of the VC project file.</param>
            <param name="vcFiltersFileContent">Contents of the VC filters file.</param>
            <param name="vcUserFileContent">Contents of the VC user file.</param>
        </member>
        <member name="T:Flax.Build.Projects.VisualStudio.VCProjectGenerator">
            <summary>
            The Visual Studio project generator for C++ projects (.vcxproj).
            </summary>
            <seealso cref="T:Flax.Build.Projects.VisualStudio.VisualStudioProjectGenerator" />
        </member>
        <member name="P:Flax.Build.Projects.VisualStudio.VCProjectGenerator.ProjectFilePlatformToolsetVersion">
            <summary>
            Gets the project file platform toolset version.
            </summary>
        </member>
        <member name="M:Flax.Build.Projects.VisualStudio.VCProjectGenerator.#ctor(Flax.Build.Projects.VisualStudio.VisualStudioVersion)">
            <inheritdoc />
        </member>
        <member name="P:Flax.Build.Projects.VisualStudio.VCProjectGenerator.ProjectFileExtension">
            <inheritdoc />
        </member>
        <member name="P:Flax.Build.Projects.VisualStudio.VCProjectGenerator.Type">
            <inheritdoc />
        </member>
        <member name="M:Flax.Build.Projects.VisualStudio.VCProjectGenerator.GenerateProject(Flax.Build.Projects.Project)">
            <inheritdoc />
        </member>
        <member name="T:Flax.Build.Projects.VisualStudio.VisualStudioInstance">
            <summary>
            The Visual Studio instance utility.
            </summary>
        </member>
        <member name="F:Flax.Build.Projects.VisualStudio.VisualStudioInstance.Version">
            <summary>
            The version.
            </summary>
        </member>
        <member name="F:Flax.Build.Projects.VisualStudio.VisualStudioInstance.Path">
            <summary>
            The install directory path.
            </summary>
        </member>
        <member name="P:Flax.Build.Projects.VisualStudio.VisualStudioInstance.HasFlaxVS">
            <summary>
            Determinates whenever Visual Studio has Flax.VS extension installed (for C# scripts debugging).
            </summary>
        </member>
        <member name="M:Flax.Build.Projects.VisualStudio.VisualStudioInstance.HasIDE">
            <summary>
            Determines whether any version of the IDE is installed.
            </summary>
            <returns><c>true</c> if any version is installed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Flax.Build.Projects.VisualStudio.VisualStudioInstance.HasIDE(Flax.Build.Projects.VisualStudio.VisualStudioVersion)">
            <summary>
            Determines whether the specified version of the IDE is installed.
            </summary>
            <param name="version">The version to check.</param>
            <returns><c>true</c> if the specified version is installed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Flax.Build.Projects.VisualStudio.VisualStudioInstance.GetInstances">
            <summary>
            Gets the installed Visual Studio instances (the first item is the latest version).
            </summary>
            <returns>The install locations.</returns>
        </member>
        <member name="T:Flax.Build.Projects.VisualStudio.VisualStudioProject">
            <summary>
            The generic implementation of the Visual Studio project.
            </summary>
            <seealso cref="T:Flax.Build.Projects.Project" />
        </member>
        <member name="F:Flax.Build.Projects.VisualStudio.VisualStudioProject.ProjectGuid">
            <summary>
            The project unique identifier (from the project file or the generated).
            </summary>
        </member>
        <member name="F:Flax.Build.Projects.VisualStudio.VisualStudioProject.FolderGuid">
            <summary>
            The project parent folder identifier (used in the solution hierarchy).
            </summary>
        </member>
        <member name="P:Flax.Build.Projects.VisualStudio.VisualStudioProject.ProjectTypeGuid">
            <summary>
            Gets the project type unique identifier. Used by the Visual Studio solution file to identify the project type.
            </summary>
        </member>
        <member name="P:Flax.Build.Projects.VisualStudio.VisualStudioProject.Path">
            <inheritdoc />
        </member>
        <member name="T:Flax.Build.Projects.VisualStudio.VisualStudioProjectGenerator">
            <summary>
            Project generator for Visual Studio IDE.
            </summary>
        </member>
        <member name="P:Flax.Build.Projects.VisualStudio.VisualStudioProjectGenerator.AndroidProject.ProjectTypeGuid">
            <inheritdoc />
        </member>
        <member name="M:Flax.Build.Projects.VisualStudio.VisualStudioProjectGenerator.AndroidProject.Generate">
            <inheritdoc />
        </member>
        <member name="T:Flax.Build.Projects.VisualStudio.VisualStudioProjectGenerator.ProjectTypeGuids">
            <summary>
            The Visual Studio solution project file types GUIDs. Based on http://www.codeproject.com/Reference/720512/List-of-Visual-Studio-Project-Type-GUIDs.
            </summary>
        </member>
        <member name="F:Flax.Build.Projects.VisualStudio.VisualStudioProjectGenerator.ProjectTypeGuids.SolutionFolder">
            <summary>
            The solution folder.
            </summary>
        </member>
        <member name="F:Flax.Build.Projects.VisualStudio.VisualStudioProjectGenerator.ProjectTypeGuids.WindowsCSharp">
            <summary>
            The Windows C#
            </summary>
        </member>
        <member name="F:Flax.Build.Projects.VisualStudio.VisualStudioProjectGenerator.ProjectTypeGuids.WindowsVisualCpp">
            <summary>
            The Windows Visual C++.
            </summary>
        </member>
        <member name="F:Flax.Build.Projects.VisualStudio.VisualStudioProjectGenerator.ProjectTypeGuids.Android">
            <summary>
            The Android.
            </summary>
        </member>
        <member name="F:Flax.Build.Projects.VisualStudio.VisualStudioProjectGenerator.ProjectTypeGuids.FlaxVS">
            <summary>
            The Flax.VS.
            </summary>
        </member>
        <member name="M:Flax.Build.Projects.VisualStudio.VisualStudioProjectGenerator.ProjectTypeGuids.ToOption(System.Guid)">
            <summary>
            Converts the GUI to To the option.
            </summary>
            <param name="projectType">Type of the project.</param>
            <returns>The option string.</returns>
        </member>
        <member name="F:Flax.Build.Projects.VisualStudio.VisualStudioProjectGenerator.Version">
            <summary>
            The target IDE version.
            </summary>
        </member>
        <member name="P:Flax.Build.Projects.VisualStudio.VisualStudioProjectGenerator.ProjectFileToolVersion">
            <summary>
            Gets the project file tool version.
            </summary>
        </member>
        <member name="M:Flax.Build.Projects.VisualStudio.VisualStudioProjectGenerator.#ctor(Flax.Build.Projects.VisualStudio.VisualStudioVersion)">
            <summary>
            Initializes a new instance of the <see cref="T:Flax.Build.Projects.VisualStudio.VisualStudioProjectGenerator"/> class.
            </summary>
            <param name="version">The version.</param>
        </member>
        <member name="M:Flax.Build.Projects.VisualStudio.VisualStudioProjectGenerator.GetProjectGuid(System.String)">
            <summary>
            Gets the project unique identifier from the existing project or generates a new one.
            </summary>
            <param name="path">The path.</param>
            <returns>The project ID.</returns>
        </member>
        <member name="P:Flax.Build.Projects.VisualStudio.VisualStudioProjectGenerator.SolutionFileExtension">
            <inheritdoc />
        </member>
        <member name="M:Flax.Build.Projects.VisualStudio.VisualStudioProjectGenerator.CreateProject">
            <inheritdoc />
        </member>
        <member name="M:Flax.Build.Projects.VisualStudio.VisualStudioProjectGenerator.SolutionConfiguration.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Flax.Build.Projects.VisualStudio.VisualStudioProjectGenerator.SolutionConfiguration.Equals(Flax.Build.Projects.VisualStudio.VisualStudioProjectGenerator.SolutionConfiguration)">
            <inheritdoc />
        </member>
        <member name="M:Flax.Build.Projects.VisualStudio.VisualStudioProjectGenerator.SolutionConfiguration.ToString">
            <inheritdoc />
        </member>
        <member name="M:Flax.Build.Projects.VisualStudio.VisualStudioProjectGenerator.GenerateSolution(Flax.Build.Projects.Solution)">
            <inheritdoc />
        </member>
        <member name="M:Flax.Build.Projects.VisualStudio.VisualStudioProjectGenerator.GenerateCustomProjects(System.Collections.Generic.List{Flax.Build.Projects.Project})">
            <inheritdoc />
        </member>
        <member name="T:Flax.Build.Projects.VisualStudio.VisualStudioVersion">
            <summary>
            The Visual Studio versions.
            </summary>
        </member>
        <member name="F:Flax.Build.Projects.VisualStudio.VisualStudioVersion.VisualStudio2015">
            <summary>
            The Visual Studio 2015.
            </summary>
        </member>
        <member name="F:Flax.Build.Projects.VisualStudio.VisualStudioVersion.VisualStudio2017">
            <summary>
            The Visual Studio 2017.
            </summary>
        </member>
        <member name="F:Flax.Build.Projects.VisualStudio.VisualStudioVersion.VisualStudio2019">
            <summary>
            The Visual Studio 2019.
            </summary>
        </member>
        <member name="T:Flax.Build.StringWriterWithEncoding">
            <summary>
            The <see cref="T:System.IO.StreamWriter"/> implementation with a custom encoding.
            </summary>
            <seealso cref="T:System.IO.StringWriter" />
        </member>
        <member name="M:Flax.Build.StringWriterWithEncoding.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Flax.Build.StringWriterWithEncoding"/> class.
            </summary>
        </member>
        <member name="M:Flax.Build.StringWriterWithEncoding.#ctor(System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Flax.Build.StringWriterWithEncoding"/> class.
            </summary>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="P:Flax.Build.StringWriterWithEncoding.Encoding">
            <summary>
            Gets the <see cref="T:System.Text.Encoding" /> in which the output is written.
            </summary>
        </member>
        <member name="T:Flax.Build.TokenType">
            <summary>
            Types of the tokens supported by the <see cref="T:Flax.Build.Tokenizer"/>.
            </summary>
        </member>
        <member name="F:Flax.Build.TokenType.Whitespace">
            <summary>
            A whitespace.
            </summary>
        </member>
        <member name="F:Flax.Build.TokenType.Newline">
            <summary>
            A Newline.
            </summary>
        </member>
        <member name="F:Flax.Build.TokenType.CommentMultiLine">
            <summary>
            A multi line comment.
            </summary>
        </member>
        <member name="F:Flax.Build.TokenType.CommentSingleLine">
            <summary>
            A single line comment.
            </summary>
        </member>
        <member name="F:Flax.Build.TokenType.Identifier">
            <summary>
            An identifier.
            </summary>
        </member>
        <member name="F:Flax.Build.TokenType.Hex">
            <summary>
            A number in hexadecimal form.
            </summary>
        </member>
        <member name="F:Flax.Build.TokenType.Number">
            <summary>
            A number.
            </summary>
        </member>
        <member name="F:Flax.Build.TokenType.Equal">
            <summary>
            The symbol '='.
            </summary>
        </member>
        <member name="F:Flax.Build.TokenType.Comma">
            <summary>
            A comma ','.
            </summary>
        </member>
        <member name="F:Flax.Build.TokenType.SemiColon">
            <summary>
            A Semicolon ';'.
            </summary>
        </member>
        <member name="F:Flax.Build.TokenType.LeftCurlyBrace">
            <summary>
            A left curly brace '{'.
            </summary>
        </member>
        <member name="F:Flax.Build.TokenType.RightCurlyBrace">
            <summary>
            A right curly brace '}'.
            </summary>
        </member>
        <member name="F:Flax.Build.TokenType.LeftParent">
            <summary>
            A left parenthesis '('.
            </summary>
        </member>
        <member name="F:Flax.Build.TokenType.RightParent">
            <summary>
            A right parenthesis ')'.
            </summary>
        </member>
        <member name="F:Flax.Build.TokenType.LeftBracket">
            <summary>
            A left bracket '['.
            </summary>
        </member>
        <member name="F:Flax.Build.TokenType.RightBracket">
            <summary>
            A right bracket ']'.
            </summary>
        </member>
        <member name="F:Flax.Build.TokenType.String">
            <summary>
            A text.
            </summary>
        </member>
        <member name="F:Flax.Build.TokenType.Character">
            <summary>
            An character.
            </summary>
        </member>
        <member name="F:Flax.Build.TokenType.Preprocessor">
            <summary>
            A preprocessor token '#'
            </summary>
        </member>
        <member name="F:Flax.Build.TokenType.Colon">
            <summary>
            A colon ':'.
            </summary>
        </member>
        <member name="F:Flax.Build.TokenType.DoubleColon">
            <summary>
            A double colon '::'.
            </summary>
        </member>
        <member name="F:Flax.Build.TokenType.Dot">
            <summary>
            A dot '.'.
            </summary>
        </member>
        <member name="F:Flax.Build.TokenType.LessThan">
            <summary>
            A '&lt;'.
            </summary>
        </member>
        <member name="F:Flax.Build.TokenType.GreaterThan">
            <summary>
            A '&gt;'.
            </summary>
        </member>
        <member name="F:Flax.Build.TokenType.And">
            <summary>
            A '&amp;'.
            </summary>
        </member>
        <member name="F:Flax.Build.TokenType.Multiply">
            <summary>
            A '*'.
            </summary>
        </member>
        <member name="F:Flax.Build.TokenType.Divide">
            <summary>
            A '/'.
            </summary>
        </member>
        <member name="F:Flax.Build.TokenType.Add">
            <summary>
            A '+'.
            </summary>
        </member>
        <member name="F:Flax.Build.TokenType.Sub">
            <summary>
            A '-'.
            </summary>
        </member>
        <member name="F:Flax.Build.TokenType.Unknown">
            <summary>
            An unknown symbol.
            </summary>
        </member>
        <member name="F:Flax.Build.TokenType.EndOfFile">
            <summary>
            A end of file token.
            </summary>
        </member>
        <member name="F:Flax.Build.TokenType.LeftAngleBracket">
            <summary>
            A '&lt;'.
            </summary>
        </member>
        <member name="F:Flax.Build.TokenType.RightAngleBracket">
            <summary>
            A '&gt;'.
            </summary>
        </member>
        <member name="T:Flax.Build.Token">
            <summary>
            Contains information about a token language.
            </summary>
        </member>
        <member name="M:Flax.Build.Token.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Flax.Build.Token"/> class.
            </summary>
        </member>
        <member name="M:Flax.Build.Token.#ctor(Flax.Build.TokenType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Flax.Build.Token" /> struct.
            </summary>
            <param name="type">The type.</param>
            <param name="value">The value.</param>
        </member>
        <member name="F:Flax.Build.Token.Type">
            <summary>
            The type of the token.
            </summary>
        </member>
        <member name="F:Flax.Build.Token.Value">
            <summary>
            Value of the token.
            </summary>
        </member>
        <member name="M:Flax.Build.Token.ToString">
            <inheritdoc />
        </member>
        <member name="M:Flax.Build.Token.Equals(Flax.Build.Token)">
            <inheritdoc />
        </member>
        <member name="M:Flax.Build.Token.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Flax.Build.Token.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Flax.Build.Tokenizer">
            <summary>
            The tokens parsing utility that implements basic logic for generic C-like syntax source code parsing.
            </summary>
        </member>
        <member name="P:Flax.Build.Tokenizer.CurrentToken">
            <summary>
            Gets the current token.
            </summary>
        </member>
        <member name="P:Flax.Build.Tokenizer.CurrentLine">
            <summary>
            Gets the current line number (starting from number 1).
            </summary>
        </member>
        <member name="M:Flax.Build.Tokenizer.Tokenize(System.String)">
            <summary>
            Tokenizes the given file (through constructor).
            </summary>
            <param name="sourceCode">The source code for this tokenizer to run on.</param>
        </member>
        <member name="M:Flax.Build.Tokenizer.NextToken(System.Boolean,System.Boolean)">
            <summary>
            Gets next token.
            </summary>
            <param name="includeWhitespaces">When false, all white-space tokens will be ignored.</param>
            <param name="includeComments">When false, all comment (single line and multi-line) tokens will be ignored.</param>
            <returns>The token. Check for EndOfFile token-type to detect end-of-file.</returns>
        </member>
        <member name="M:Flax.Build.Tokenizer.PreviousToken(System.Boolean,System.Boolean)">
            <summary>
            Moves to the previous the token.
            </summary>
            <param name="includeWhitespaces">If set to <c>true</c> includes whitespaces.</param>
            <param name="includeComments">If set to <c>true</c> include comments.</param>
            <returns>The token. Check for EndOfFile token-type to detect end-of-file.</returns>
        </member>
        <member name="M:Flax.Build.Tokenizer.ExpectAnyTokens(Flax.Build.TokenType[],System.Boolean,System.Boolean)">
            <summary>
            Expects any token of given types. Throws <see cref="T:System.Exception"/> when token is not found.
            </summary>
            <param name="tokenTypes">The allowed token types.</param>
            <param name="includeWhitespaces">When false, all white-space tokens will be ignored.</param>
            <param name="includeComments">When false, all comment (single line and multi-line) tokens will be ignored.</param>
            <returns>The found token.</returns>
        </member>
        <member name="M:Flax.Build.Tokenizer.ExpectAllTokens(Flax.Build.TokenType[],System.Boolean,System.Boolean)">
            <summary>
            Expects token of given types in the same order. Throws <see cref="T:System.Exception"/> when token is not found.
            </summary>
            <param name="tokenTypes">The allowed token types.</param>
            <param name="includeWhitespaces">When false, all white-space tokens will be ignored.</param>
            <param name="includeComments">When false, all comment (single line and multi-line) tokens will be ignored.</param>
            <returns>The found token.</returns>
        </member>
        <member name="M:Flax.Build.Tokenizer.ExpectToken(Flax.Build.TokenType,System.Boolean,System.Boolean)">
            <summary>
            Expects any token of given type. Throws <see cref="T:System.Exception"/> when token is not found.
            </summary>
            <param name="tokenType">The only allowed token type.</param>
            <param name="includeWhitespaces">When false, all white-space tokens will be ignored.</param>
            <param name="includeComments">When false, all comment (single line and multi-line) tokens will be ignored.</param>
            <returns>The found token.</returns>
        </member>
        <member name="M:Flax.Build.Tokenizer.SkipUntil(Flax.Build.TokenType)">
            <summary>
            Skips all tokens until the tokenizer steps into token of given type (and it is also skipped, so, NextToken will give the next token).
            </summary>
            <param name="tokenType">The expected token type.</param>
        </member>
        <member name="M:Flax.Build.Tokenizer.SkipUntil(Flax.Build.TokenType,System.String@)">
            <summary>
            Skips all tokens until the tokenizer steps into token of given type (and it is also skipped, so, NextToken will give the next token).
            </summary>
            <param name="tokenType">The expected token type.</param>
            <param name="context">The output contents of the skipped tokens.</param>
        </member>
        <member name="M:Flax.Build.Tokenizer.SkipUntil(Flax.Build.TokenType,System.String@,System.Boolean)">
            <summary>
            Skips all tokens until the tokenizer steps into token of given type (and it is also skipped, so, NextToken will give the next token).
            </summary>
            <param name="tokenType">The expected token type.</param>
            <param name="context">The output contents of the skipped tokens.</param>
            <param name="includeWhitespaces">When false, all white-space tokens will be ignored.</param>
        </member>
        <member name="M:Flax.Build.Tokenizer.Dispose">
            <summary>
            Disposes the <see cref="T:Flax.Build.Tokenizer"/>.
            </summary>
        </member>
        <member name="T:Flax.Build.ITwoWayEnumerator`1">
            <summary>
            The two-way enumerator interface that can move forward or backwards.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <seealso cref="T:System.Collections.Generic.IEnumerator`1" />
        </member>
        <member name="M:Flax.Build.ITwoWayEnumerator`1.MovePrevious">
            <summary>
            Advances the enumerator to the previous element of the collection.
            </summary>
            <returns>
            <see langword="true" /> if the enumerator was successfully advanced to the previous element; <see langword="false" /> if the enumerator has passed the beginning of the collection.</returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="T:Flax.Build.TwoWayEnumerator`1">
            <summary>
            The implementation of the <see cref="T:Flax.Build.ITwoWayEnumerator`1"/> that uses a list.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <seealso cref="T:Flax.Build.ITwoWayEnumerator`1" />
        </member>
        <member name="M:Flax.Build.TwoWayEnumerator`1.#ctor(System.Collections.Generic.IEnumerator{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Flax.Build.TwoWayEnumerator`1"/> class.
            </summary>
            <param name="enumerator">The enumerator.</param>
        </member>
        <member name="M:Flax.Build.TwoWayEnumerator`1.MovePrevious">
            <summary>
            Advances the enumerator to the previous element of the collection.
            </summary>
            <returns><see langword="true" /> if the enumerator was successfully advanced to the previous element; <see langword="false" /> if the enumerator has passed the beginning of the collection.</returns>
        </member>
        <member name="M:Flax.Build.TwoWayEnumerator`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns><see langword="true" /> if the enumerator was successfully advanced to the next element; <see langword="false" /> if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="P:Flax.Build.TwoWayEnumerator`1.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
        </member>
        <member name="M:Flax.Build.TwoWayEnumerator`1.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Flax.Build.TwoWayEnumerator`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Flax.Build.TwoWayEnumerator`1.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
        </member>
        <member name="T:Flax.Build.Utilities">
            <summary>
            The utilities.
            </summary>
        </member>
        <member name="M:Flax.Build.Utilities.GetHashCode(System.String)">
            <summary>
            Gets the hash code for the string (the same for all platforms). Matches Engine algorithm for string hashing.
            </summary>
            <param name="str">The input string.</param>
            <returns>The file size text.</returns>
        </member>
        <member name="M:Flax.Build.Utilities.GetEmptyArray``1">
            <summary>
            Gets the empty array of the given type (shared one).
            </summary>
            <typeparam name="T">The type.</typeparam>
            <returns>The empty array object.</returns>
        </member>
        <member name="M:Flax.Build.Utilities.GetStaticValue(System.String,System.String)">
            <summary>
            Gets the static field value from a given type.
            </summary>
            <param name="typeName">Name of the type.</param>
            <param name="fieldName">Name of the field.</param>
            <returns>The field value.</returns>
        </member>
        <member name="M:Flax.Build.Utilities.GetFileSize(System.String)">
            <summary>
            Gets the size of the file as a readable string.
            </summary>
            <param name="path">The path.</param>
            <returns>The file size text.</returns>
        </member>
        <member name="M:Flax.Build.Utilities.AddRange``1(System.Collections.Generic.HashSet{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the range of the items to the hash set.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="source">The hash set to modify.</param>
            <param name="items">The items collection to append.</param>
        </member>
        <member name="M:Flax.Build.Utilities.GetTwoWayEnumerator``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets the two way enumerator for the given enumerable collection.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="source">The source collection.</param>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:Flax.Build.Utilities.FileCopy(System.String,System.String,System.Boolean)">
            <summary>
            Copies the file.
            </summary>
            <param name="srcFilePath">The source file path.</param>
            <param name="dstFilePath">The destination file path.</param>
            <param name="overwrite"><see langword="true" /> if the destination file can be overwritten; otherwise, <see langword="false" />.</param>
        </member>
        <member name="M:Flax.Build.Utilities.DirectoryCopy(System.String,System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Copies the directories.
            </summary>
            <param name="srcDirectoryPath">The source directory path.</param>
            <param name="dstDirectoryPath">The destination directory path.</param>
            <param name="copySubdirs">If set to <c>true</c> copy sub-directories (recursive copy operation).</param>
            <param name="overrideFiles">If set to <c>true</c> override target files if any is existing.</param>
            <param name="searchPattern">The custom filter for the filenames to copy. Can be used to select files to copy. Null if unused.</param>
        </member>
        <member name="M:Flax.Build.Utilities.FileDelete(System.String)">
            <summary>
            Deletes the file.
            </summary>
            <param name="filePath">The file path.</param>
        </member>
        <member name="M:Flax.Build.Utilities.DirectoryDelete(System.String,System.Boolean)">
            <summary>
            Deletes the directory.
            </summary>
            <param name="directoryPath">The directory path.</param>
            <param name="withSubdirs">if set to <c>true</c> with sub-directories (recursive delete operation).</param>
        </member>
        <member name="M:Flax.Build.Utilities.FilesDelete(System.String,System.String,System.Boolean)">
            <summary>
            Deletes the files inside a directory.
            </summary>
            <param name="directoryPath">The directory path.</param>
            <param name="searchPattern">The custom filter for the filenames to delete. Can be used to select files to delete. Null if unused.</param>
            <param name="withSubdirs">if set to <c>true</c> with sub-directories (recursive delete operation).</param>
        </member>
        <member name="T:Flax.Build.Utilities.RunOptions">
            <summary>
            The process run options.
            </summary>
        </member>
        <member name="F:Flax.Build.Utilities.RunOptions.None">
            <summary>
            The none.
            </summary>
        </member>
        <member name="F:Flax.Build.Utilities.RunOptions.AppMustExist">
            <summary>
            The application must exist.
            </summary>
        </member>
        <member name="F:Flax.Build.Utilities.RunOptions.NoWaitForExit">
            <summary>
            Skip waiting for exit.
            </summary>
        </member>
        <member name="F:Flax.Build.Utilities.RunOptions.NoStdOutRedirect">
            <summary>
            Skip standard output redirection to log.
            </summary>
        </member>
        <member name="F:Flax.Build.Utilities.RunOptions.NoLoggingOfRunCommand">
            <summary>
            Skip logging of command run.
            </summary>
        </member>
        <member name="F:Flax.Build.Utilities.RunOptions.UTF8Output">
            <summary>
            Uses UTF-8 output encoding format.
            </summary>
        </member>
        <member name="F:Flax.Build.Utilities.RunOptions.NoLoggingOfRunDuration">
            <summary>
            Skips logging of run duration.
            </summary>
        </member>
        <member name="F:Flax.Build.Utilities.RunOptions.Default">
            <summary>
            The default options.
            </summary>
        </member>
        <member name="M:Flax.Build.Utilities.Run(System.String,System.String,System.String,System.String,Flax.Build.Utilities.RunOptions,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Runs the external program.
            </summary>
            <param name="app">Program filename.</param>
            <param name="commandLine">Commandline</param>
            <param name="input">Optional Input for the program (will be provided as stdin)</param>
            <param name="workspace">Optional custom workspace directory. Use null to keep the same directory.</param>
            <param name="options">Defines the options how to run. See RunOptions.</param>
            <param name="envVars">Custom environment variables to pass to the child process.</param>
            <returns>The exit code of the program.</returns>
        </member>
        <member name="M:Flax.Build.Utilities.MakePathRelativeTo(System.String,System.String)">
            <summary>
            Constructs a relative path from the given base directory.
            </summary>
            <param name="path">The source path to convert from absolute into a relative format.</param>
            <param name="directory">The directory to create a relative path from.</param>
            <returns>Thew relative path from the given directory.</returns>
        </member>
        <member name="M:Flax.Build.Utilities.NormalizePath(System.String)">
            <summary>
            Normalizes the path to the standard Flax format (all separators are '/' except for drive 'C:\').
            </summary>
            <param name="path">The path.</param>
            <returns>The normalized path.</returns>
        </member>
        <member name="M:Flax.Build.Utilities.RemovePathRelativeParts(System.String)">
            <summary>
            Removes the relative parts from the path. For instance it replaces 'xx/yy/../zz' with 'xx/zz'.
            </summary>
            <param name="path">The input path.</param>
            <returns>The output path.</returns>
        </member>
        <member name="M:Flax.Build.Utilities.WriteFileIfChanged(System.String,System.String)">
            <summary>
            Writes the file contents. Before writing reads the existing file and discards operation if contents are the same.
            </summary>
            <param name="path">The path.</param>
            <param name="contents">The file contents.</param>
            <returns>True if file has been modified, otherwise false.</returns>
        </member>
        <member name="M:Flax.Build.Utilities.ReplaceInFiles(System.String,System.String,System.IO.SearchOption,System.String,System.String)">
            <summary>
            Replaces the given text with other one in the files.
            </summary>
            <param name="folderPath">The relative or absolute path to the directory to search.</param>
            <param name="searchPattern">The search string to match against the names of files in <paramref name="folderPath" />. This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions.</param>
            <param name="searchOption">One of the enumeration values that specifies whether the search operation should include all subdirectories or only the current directory.</param>
            <param name="findWhat">The text to replace.</param>
            <param name="replaceWith">The value to replace to.</param>
        </member>
        <member name="M:Flax.Build.Utilities.ReplaceInFiles(System.String[],System.String,System.String)">
            <summary>
            Replaces the given text with other one in the files.
            </summary>
            <param name="files">The list of the files to process.</param>
            <param name="findWhat">The text to replace.</param>
            <param name="replaceWith">The value to replace to.</param>
        </member>
        <member name="M:Flax.Build.Utilities.ReplaceInFile(System.String,System.String,System.String)">
            <summary>
            Replaces the given text with other one in the file.
            </summary>
            <param name="file">The file to process.</param>
            <param name="findWhat">The text to replace.</param>
            <param name="replaceWith">The value to replace to.</param>
        </member>
        <member name="T:Flax.Build.Globals">
            <summary>
            The build tool global variables.
            </summary>
        </member>
        <member name="F:Flax.Build.Globals.Root">
            <summary>
            The root directory of the current workspace (eg. game project workspace, or engine project workspace).
            </summary>
        </member>
        <member name="F:Flax.Build.Globals.EngineRoot">
            <summary>
            The root directory of the current engine installation.
            </summary>
        </member>
        <member name="F:Flax.Build.Globals.Project">
            <summary>
            The project loaded from the workspace directory.
            </summary>
        </member>
        <member name="F:Flax.Build.Globals.AllPlatforms">
            <summary>
            All platforms array.
            </summary>
        </member>
        <member name="F:Flax.Build.Globals.AllArchitectures">
            <summary>
            All architectures array.
            </summary>
        </member>
        <member name="F:Flax.Build.Globals.AllConfigurations">
            <summary>
            All configurations array.
            </summary>
        </member>
        <member name="T:Flax.Build.Log">
            <summary>
            The logging interface for the build system
            </summary>
        </member>
        <member name="F:Flax.Build.Log.Indent">
            <summary>
            The indent applied to the log messages.
            </summary>
        </member>
        <member name="F:Flax.Build.Log.ApplyConsoleColors">
            <summary>
            If set to true the console will be colored for warning and errors messages.
            </summary>
        </member>
        <member name="M:Flax.Build.Log.Write(System.String,System.ConsoleColor,System.Boolean)">
            <summary>
            Writes the specified message to the log.
            </summary>
            <param name="message">The message.</param>
            <param name="color">The color.</param>
            <param name="consoleLog">If set to <c>true</c> console will get the log.</param>
        </member>
        <member name="M:Flax.Build.Log.Verbose(System.String)">
            <summary>
            Logs the verbose message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Flax.Build.Log.Info(System.String)">
            <summary>
            Logs the information.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Flax.Build.Log.Warning(System.String)">
            <summary>
            Logs the warning message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Flax.Build.Log.Error(System.String)">
            <summary>
            Logs the error message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Flax.Build.Log.VerboseOnce(System.String,System.Boolean@)">
            <summary>
            Logs the verbose message.
            </summary>
            <param name="message">The message.</param>
            <param name="flag">The flag used to indicate whether this log was already sent.</param>
        </member>
        <member name="M:Flax.Build.Log.InfoOnce(System.String,System.Boolean@)">
            <summary>
            Logs the information.
            </summary>
            <param name="message">The message.</param>
            <param name="flag">The flag used to indicate whether this log was already sent.</param>
        </member>
        <member name="M:Flax.Build.Log.WarningOnce(System.String,System.Boolean@)">
            <summary>
            Logs the warning message.
            </summary>
            <param name="message">The message.</param>
            <param name="flag">The flag used to indicate whether this log was already sent.</param>
        </member>
        <member name="M:Flax.Build.Log.ErrorOnce(System.String,System.Boolean@)">
            <summary>
            Logs the error message.
            </summary>
            <param name="message">The message.</param>
            <param name="flag">The flag used to indicate whether this log was already sent.</param>
        </member>
        <member name="M:Flax.Build.Log.Exception(System.Exception)">
            <summary>
            Logs the exception.
            </summary>
            <param name="ex">The exception.</param>
        </member>
        <member name="T:Flax.Build.LogIndentScope">
            <summary>
            Applies a log indent for the lifetime of an object.
            </summary>
        </member>
        <member name="M:Flax.Build.LogIndentScope.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Flax.Build.LogIndentScope"/> class.
            </summary>
            <param name="indent">The indent to apply to the existing indentation.</param>
        </member>
        <member name="M:Flax.Build.LogIndentScope.Dispose">
            <summary>
            Restores the log indent to previous state.
            </summary>
        </member>
        <member name="T:Flax.Build.CommandLine">
            <summary>
            The command line utilities.
            </summary>
        </member>
        <member name="T:Flax.Build.CommandLine.Option">
            <summary>
            The command line option data.
            </summary>
        </member>
        <member name="F:Flax.Build.CommandLine.Option.Name">
            <summary>
            The name.
            </summary>
        </member>
        <member name="F:Flax.Build.CommandLine.Option.Value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:Flax.Build.CommandLine.Option.ToString">
            <inheritdoc />
        </member>
        <member name="M:Flax.Build.CommandLine.Get">
            <summary>
            Gets the program executable string. Post-processed to improve parsing performance.
            </summary>
            <returns>The command line.</returns>
        </member>
        <member name="M:Flax.Build.CommandLine.GetHelp(System.Type)">
            <summary>
            Gets the help information for the command line options for the given type.
            </summary>
            <param name="type">The type.</param>
            <returns>The options help information.</returns>
        </member>
        <member name="M:Flax.Build.CommandLine.GetMembers(System.Type)">
            <summary>
            Gets the options for command line configuration for the given type.
            </summary>
            <param name="type">The type.</param>
            <returns>The list of configurable options.</returns>
        </member>
        <member name="M:Flax.Build.CommandLine.GetMembers(System.Object)">
            <summary>
            Gets the options for command line configuration for the given object instance.
            </summary>
            <param name="obj">The object instance.</param>
            <returns>The list of configurable options.</returns>
        </member>
        <member name="M:Flax.Build.CommandLine.HasOption(System.String)">
            <summary>
            Determines whether the specified option has been specified in the environment command line.
            </summary>
            <param name="name">The option name.</param>
            <returns><c>true</c> if the specified option has been specified; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Flax.Build.CommandLine.HasOption(System.String,System.String)">
            <summary>
            Determines whether the specified option has been specified in the environment command line.
            </summary>
            <param name="name">The option name.</param>
            <param name="commandLine">The command line.</param>
            <returns><c>true</c> if the specified option has been specified; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Flax.Build.CommandLine.GetOptions">
            <summary>
            Gets the options for the current environment command line.
            </summary>
            <returns>The options.</returns>
        </member>
        <member name="M:Flax.Build.CommandLine.GetOptions(System.String)">
            <summary>
            Gets the options for the given command line.
            </summary>
            <param name="commandLine">The command line.</param>
            <returns>The options.</returns>
        </member>
        <member name="M:Flax.Build.CommandLine.Parse(System.String)">
            <summary>
            Parses the specified command line.
            </summary>
            <param name="commandLine">The command line.</param>
            <returns>The options.</returns>
        </member>
        <member name="M:Flax.Build.CommandLine.Configure(System.Object)">
            <summary>
            Configures the members of specified object using the command line options.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="M:Flax.Build.CommandLine.Configure(System.Type)">
            <summary>
            Configures the static members of specified type using the command line options.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Flax.Build.CommandLine.Configure(System.Type,System.String)">
            <summary>
            Configures the members of the specified object using the command line options.
            </summary>
            <param name="type">The type.</param>
            <param name="commandLine">The command line.</param>
        </member>
        <member name="M:Flax.Build.CommandLine.Configure(System.Object,System.String)">
            <summary>
            Configures the members of the specified object using the command line options.
            </summary>
            <param name="obj">The object.</param>
            <param name="commandLine">The command line.</param>
        </member>
        <member name="T:Flax.Build.CommandLineAttribute">
            <summary>
            The attribute to indicate the name of a command line argument and additional help description info.
            </summary>
        </member>
        <member name="F:Flax.Build.CommandLineAttribute.Name">
            <summary>
            The command name. Without leading leading '-' nor '/' and trailing '=' character if a value is expected.
            </summary>
        </member>
        <member name="F:Flax.Build.CommandLineAttribute.Value">
            <summary>
            The specified fixed value for the argument.
            </summary>
        </member>
        <member name="F:Flax.Build.CommandLineAttribute.ValueHint">
            <summary>
            The optional or required argument value hint for command line help.
            </summary>
        </member>
        <member name="F:Flax.Build.CommandLineAttribute.Description">
            <summary>
            The option helper description.
            </summary>
        </member>
        <member name="M:Flax.Build.CommandLineAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Flax.Build.CommandLineAttribute"/> class.
            </summary>
            <param name="name">The option name.</param>
            <param name="description">The option description.</param>
        </member>
        <member name="M:Flax.Build.CommandLineAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Flax.Build.CommandLineAttribute"/> class.
            </summary>
            <param name="name">The option name.</param>
            <param name="valueHint">The option value hint for help.</param>
            <param name="description">The option description.</param>
        </member>
        <member name="T:Flax.Build.ProjectInfo">
            <summary>
            Contains information about Flax project.
            </summary>
        </member>
        <member name="T:Flax.Build.ProjectInfo.Reference">
            <summary>
            The project reference.
            </summary>
        </member>
        <member name="F:Flax.Build.ProjectInfo.Reference.Name">
            <summary>
            The referenced project name.
            </summary>
        </member>
        <member name="F:Flax.Build.ProjectInfo.Reference.Project">
            <summary>
            The referenced project.
            </summary>
        </member>
        <member name="M:Flax.Build.ProjectInfo.Reference.ToString">
            <inheritdoc />
        </member>
        <member name="F:Flax.Build.ProjectInfo.Name">
            <summary>
            The project name.
            </summary>
        </member>
        <member name="F:Flax.Build.ProjectInfo.ProjectPath">
            <summary>
            The project file path.
            </summary>
        </member>
        <member name="F:Flax.Build.ProjectInfo.ProjectFolderPath">
            <summary>
            The project root folder path.
            </summary>
        </member>
        <member name="F:Flax.Build.ProjectInfo.Version">
            <summary>
            The project version.
            </summary>
        </member>
        <member name="F:Flax.Build.ProjectInfo.Company">
            <summary>
            The project publisher company.
            </summary>
        </member>
        <member name="F:Flax.Build.ProjectInfo.Copyright">
            <summary>
            The project copyright note.
            </summary>
        </member>
        <member name="F:Flax.Build.ProjectInfo.GameTarget">
            <summary>
            The name of the build target to use for the game building (final, cooked game code).
            </summary>
        </member>
        <member name="F:Flax.Build.ProjectInfo.EditorTarget">
            <summary>
            The name of the build target to use for the game in editor building (editor game code).
            </summary>
        </member>
        <member name="F:Flax.Build.ProjectInfo.References">
            <summary>
            The project references.
            </summary>
        </member>
        <member name="F:Flax.Build.ProjectInfo.MinEngineVersion">
            <summary>
            The minimum version supported by this project.
            </summary>
        </member>
        <member name="F:Flax.Build.ProjectInfo.EngineNickname">
            <summary>
            The user-friendly nickname of the engine installation to use when opening the project. Can be used to open game project with a custom engine distributed for team members. This value must be the same in engine and game projects to be paired.
            </summary>
        </member>
        <member name="P:Flax.Build.ProjectInfo.IsCSharpOnlyProject">
            <summary>
            True if project is using C#-only and no native toolsets is required to build and use scripts.
            </summary>
        </member>
        <member name="M:Flax.Build.ProjectInfo.GetAllProjects">
            <summary>
            Gets all projects including this project, it's references and their references (any deep level of references).
            </summary>
            <returns>The collection of projects.</returns>
        </member>
        <member name="M:Flax.Build.ProjectInfo.Save">
            <summary>
            Saves the project file.
            </summary>
        </member>
        <member name="M:Flax.Build.ProjectInfo.Load(System.String)">
            <summary>
            Loads the project from the specified file.
            </summary>
            <param name="path">The path.</param>
            <returns>The loaded project.</returns>
        </member>
        <member name="M:Flax.Build.ProjectInfo.ToString">
            <inheritdoc />
        </member>
        <member name="M:Flax.Build.ProjectInfo.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Flax.Build.ProjectInfo.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Flax.Deploy.Deployer">
            <summary>
            The automation and deployment utility.
            </summary>
        </member>
        <member name="T:Flax.Deploy.FlaxBuild">
            <summary>
            Flax.Build environment and tools.
            </summary>
        </member>
        <member name="T:Flax.Deploy.VCEnvironment">
            <summary>
            Stores information about a Visual C++ installation and compile environment.
            </summary>
        </member>
        <member name="P:Flax.Deploy.VCEnvironment.MSBuildPath">
            <summary>
            Gets the path to the MSBuild executable.
            </summary>
        </member>
        <member name="P:Flax.Deploy.VCEnvironment.CscPath">
            <summary>
            Gets the path to the C# compiler executable.
            </summary>
        </member>
        <member name="M:Flax.Deploy.VCEnvironment.BuildProject(System.String,System.String,System.String)">
            <summary>
            Runs msbuild.exe with the specified arguments.
            </summary>
            <param name="project">Path to the project to build.</param>
            <param name="buildConfig">Configuration to build.</param>
            <param name="buildPlatform">Platform to build.</param>
        </member>
        <member name="M:Flax.Deploy.VCEnvironment.BuildSolution(System.String,System.String,System.String)">
            <summary>
            Builds a Visual Studio solution with MsBuild.
            </summary>
            <param name="solutionFile">Path to the solution file</param>
            <param name="buildConfig">Configuration to build.</param>
            <param name="buildPlatform">Platform to build.</param>
        </member>
        <member name="M:Flax.Deploy.VCEnvironment.CleanSolution(System.String)">
            <summary>
            Clears the build a Visual Studio solution cache with MsBuild.
            </summary>
            <param name="solutionFile">Path to the solution file</param>
        </member>
        <member name="T:Flax.Deps.Dependencies.Assimp">
            <summary>
            Official Open Asset Import Library Repository. Loads 40+ 3D file formats into one unified and clean data structure. http://www.assimp.org
            </summary>
            <seealso cref="T:Flax.Deps.Dependency" />
        </member>
        <member name="P:Flax.Deps.Dependencies.Assimp.Platforms">
            <inheritdoc />
        </member>
        <member name="M:Flax.Deps.Dependencies.Assimp.Build(Flax.Deps.Dependency.BuildOptions)">
            <inheritdoc />
        </member>
        <member name="T:Flax.Deps.Dependencies.curl">
            <summary>
            libcurl is a free and easy-to-use client-side URL transfer library, supporting DICT, FILE, FTP, FTPS, Gopher, HTTP, HTTPS, IMAP, IMAPS, LDAP, LDAPS, POP3, POP3S, RTMP, RTSP, SCP, SFTP, SMTP, SMTPS, Telnet and TFTP. libcurl supports SSL certificates, HTTP POST, HTTP PUT, FTP uploading, HTTP form based upload, proxies, cookies, user+password authentication (Basic, Digest, NTLM, Negotiate, Kerberos), file transfer resume, http proxy tunneling and more!
            </summary>
            <seealso cref="T:Flax.Deps.Dependency" />
        </member>
        <member name="P:Flax.Deps.Dependencies.curl.Platforms">
            <inheritdoc />
        </member>
        <member name="M:Flax.Deps.Dependencies.curl.Build(Flax.Deps.Dependency.BuildOptions)">
            <inheritdoc />
        </member>
        <member name="T:Flax.Deps.Dependencies.DirectXMesh">
            <summary>
            DirectXMesh geometry processing library https://walbourn.github.io/directxmesh/
            </summary>
            <seealso cref="T:Flax.Deps.Dependency" />
        </member>
        <member name="P:Flax.Deps.Dependencies.DirectXMesh.Platforms">
            <inheritdoc />
        </member>
        <member name="M:Flax.Deps.Dependencies.DirectXMesh.Build(Flax.Deps.Dependency.BuildOptions)">
            <inheritdoc />
        </member>
        <member name="T:Flax.Deps.Dependencies.DirectXTex">
            <summary>
            DirectXTex texture processing library https://walbourn.github.io/directxtex/
            </summary>
            <seealso cref="T:Flax.Deps.Dependency" />
        </member>
        <member name="P:Flax.Deps.Dependencies.DirectXTex.Platforms">
            <inheritdoc />
        </member>
        <member name="M:Flax.Deps.Dependencies.DirectXTex.Build(Flax.Deps.Dependency.BuildOptions)">
            <inheritdoc />
        </member>
        <member name="T:Flax.Deps.Dependencies.freetype">
            <summary>
            FreeType is a freely available software library to render fonts.
            </summary>
            <seealso cref="T:Flax.Deps.Dependency" />
        </member>
        <member name="P:Flax.Deps.Dependencies.freetype.Platforms">
            <inheritdoc />
        </member>
        <member name="M:Flax.Deps.Dependencies.freetype.Build(Flax.Deps.Dependency.BuildOptions)">
            <inheritdoc />
        </member>
        <member name="T:Flax.Deps.Dependencies.glslang">
            <summary>
            Khronos reference front-end for GLSL and ESSL, and sample SPIR-V generator
            </summary>
            <seealso cref="T:Flax.Deps.Dependency" />
        </member>
        <member name="P:Flax.Deps.Dependencies.glslang.Platforms">
            <inheritdoc />
        </member>
        <member name="M:Flax.Deps.Dependencies.glslang.Build(Flax.Deps.Dependency.BuildOptions)">
            <inheritdoc />
        </member>
        <member name="T:Flax.Deps.Dependencies.mono">
            <summary>
            Mono open source ECMA CLI, C# and .NET implementation. http://www.mono-project.com/
            </summary>
            <seealso cref="T:Flax.Deps.Dependency" />
        </member>
        <member name="P:Flax.Deps.Dependencies.mono.Platforms">
            <inheritdoc />
        </member>
        <member name="M:Flax.Deps.Dependencies.mono.Build(Flax.Deps.Dependency.BuildOptions)">
            <inheritdoc />
        </member>
        <member name="T:Flax.Deps.Dependencies.NewtonsoftJson">
            <summary>
            JSON framework for .NET http://www.newtonsoft.com/json
            </summary>
            <seealso cref="T:Flax.Deps.Dependency" />
        </member>
        <member name="P:Flax.Deps.Dependencies.NewtonsoftJson.Platforms">
            <inheritdoc />
        </member>
        <member name="M:Flax.Deps.Dependencies.NewtonsoftJson.Build(Flax.Deps.Dependency.BuildOptions)">
            <inheritdoc />
        </member>
        <member name="T:Flax.Deps.Dependencies.ogg">
            <summary>
            Ogg project codecs use the Ogg bitstream format to arrange the raw, compressed bitstream into a more robust, useful form. For example, the Ogg bitstream makes seeking, time stamping and error recovery possible, as well as mixing several sepearate, concurrent media streams into a single physical bitstream.
            </summary>
            <seealso cref="T:Flax.Deps.Dependency" />
        </member>
        <member name="P:Flax.Deps.Dependencies.ogg.Platforms">
            <inheritdoc />
        </member>
        <member name="M:Flax.Deps.Dependencies.ogg.Build(Flax.Deps.Dependency.BuildOptions)">
            <inheritdoc />
        </member>
        <member name="T:Flax.Deps.Dependencies.OpenAL">
            <summary>
            OpenAL Soft is a software implementation of the OpenAL 3D audio API.
            </summary>
            <seealso cref="T:Flax.Deps.Dependency" />
        </member>
        <member name="P:Flax.Deps.Dependencies.OpenAL.Platforms">
            <inheritdoc />
        </member>
        <member name="M:Flax.Deps.Dependencies.OpenAL.Build(Flax.Deps.Dependency.BuildOptions)">
            <inheritdoc />
        </member>
        <member name="T:Flax.Deps.Dependencies.PhysX">
            <summary>
            NVIDIA PhysX SDK
            </summary>
            <seealso cref="T:Flax.Deps.Dependency" />
        </member>
        <member name="P:Flax.Deps.Dependencies.PhysX.Platforms">
            <inheritdoc />
        </member>
        <member name="M:Flax.Deps.Dependencies.PhysX.Build(Flax.Deps.Dependency.BuildOptions)">
            <inheritdoc />
        </member>
        <member name="T:Flax.Deps.Dependencies.UVAtlas">
            <summary>
            UVAtlas isochart texture atlas https://walbourn.github.io/uvatlas-return-of-the-isochart/
            </summary>
            <seealso cref="T:Flax.Deps.Dependency" />
        </member>
        <member name="P:Flax.Deps.Dependencies.UVAtlas.Platforms">
            <inheritdoc />
        </member>
        <member name="M:Flax.Deps.Dependencies.UVAtlas.Build(Flax.Deps.Dependency.BuildOptions)">
            <inheritdoc />
        </member>
        <member name="T:Flax.Deps.Dependencies.vorbis">
            <summary>
            vorbis project codecs use the vorbis bitstream format to arrange the raw, compressed bitstream into a more robust, useful form. For example, the vorbis bitstream makes seeking, time stamping and error recovery possible, as well as mixing several sepearate, concurrent media streams into a single physical bitstream.
            </summary>
            <seealso cref="T:Flax.Deps.Dependency" />
        </member>
        <member name="P:Flax.Deps.Dependencies.vorbis.Platforms">
            <inheritdoc />
        </member>
        <member name="M:Flax.Deps.Dependencies.vorbis.Build(Flax.Deps.Dependency.BuildOptions)">
            <inheritdoc />
        </member>
        <member name="T:Flax.Deps.Dependency">
            <summary>
            Represents a single dependency package required by the engine to be pre-build.
            </summary>
        </member>
        <member name="T:Flax.Deps.Dependency.BuildOptions">
            <summary>
            The options.
            </summary>
        </member>
        <member name="F:Flax.Deps.Dependency.BuildOptions.IntermediateFolder">
            <summary>
            The intermediate folder for the deps to be build inside it.
            </summary>
        </member>
        <member name="F:Flax.Deps.Dependency.BuildOptions.PlatformsFolder">
            <summary>
            The output folder for the platform dependencies.
            </summary>
        </member>
        <member name="F:Flax.Deps.Dependency.BuildOptions.ThirdPartyFolder">
            <summary>
            The ThirdParty header files folder for the deps.
            </summary>
        </member>
        <member name="F:Flax.Deps.Dependency.BuildOptions.Platforms">
            <summary>
            The target platforms to build dependency for (contains only platforms supported by the dependency itself).
            </summary>
        </member>
        <member name="P:Flax.Deps.Dependency.BuildPlatform">
            <summary>
            Gets the build platform.
            </summary>
        </member>
        <member name="P:Flax.Deps.Dependency.Platforms">
            <summary>
            Gets the platforms list supported by this dependency to build on the current build platform (based on <see cref="P:Flax.Build.Platform.BuildPlatform"/>).
            </summary>
        </member>
        <member name="M:Flax.Deps.Dependency.Build(Flax.Deps.Dependency.BuildOptions)">
            <summary>
            Builds the dependency package using the specified options.
            </summary>
            <param name="options">The options.</param>
        </member>
        <member name="M:Flax.Deps.Dependency.GetThirdPartyFolder(Flax.Deps.Dependency.BuildOptions,Flax.Build.TargetPlatform,Flax.Build.TargetArchitecture)">
            <summary>
            Gets the dependency third-party packages binaries folder.
            </summary>
            <param name="options">The options.</param>
            <param name="platform">The target platform.</param>
            <param name="architecture">The target architecture.</param>
            <returns>The absolute path to the deps folder for the given platform and architecture configuration.</returns>
        </member>
        <member name="M:Flax.Deps.Dependency.GetBinariesFolder(Flax.Deps.Dependency.BuildOptions,Flax.Build.TargetPlatform)">
            <summary>
            Gets the dependency packages binaries folder.
            </summary>
            <param name="options">The options.</param>
            <param name="platform">The target platform.</param>
            <returns>The absolute path to the deps folder for the given platform and architecture configuration.</returns>
        </member>
        <member name="M:Flax.Deps.Dependency.SetupDirectory(System.String,System.Boolean)">
            <summary>
            Setups the directory.
            </summary>
            <param name="path">The path.</param>
            <param name="forceEmpty">If set to <c>true</c> the directory will be cleared if not empty.</param>
        </member>
        <member name="M:Flax.Deps.Dependency.CloneGitRepo(System.String,System.String,System.String,System.String)">
            <summary>
            Clones the git repository from the remote url (full repository).
            </summary>
            <param name="path">The local path for close.</param>
            <param name="url">The remote url.</param>
            <param name="commit">The commit to checkout.</param>
            <param name="args">The custom arguments to add to the clone command.</param>
        </member>
        <member name="M:Flax.Deps.Dependency.CloneGitRepoFast(System.String,System.String,System.String)">
            <summary>
            Clones the git repository from the remote url.
            </summary>
            <param name="path">The local path for close.</param>
            <param name="url">The remote url.</param>
            <param name="args">The custom arguments to add to the clone command.</param>
        </member>
        <member name="M:Flax.Deps.Dependency.CloneGitRepoSingleBranch(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Clones the git repository from the remote url (clones a single branch).
            </summary>
            <param name="path">The local path for close.</param>
            <param name="url">The remote url.</param>
            <param name="branch">The name of the branch to checkout.</param>
            <param name="commit">The commit to checkout.</param>
            <param name="args">The custom arguments to add to the clone command.</param>
        </member>
        <member name="M:Flax.Deps.Dependency.GitCheckout(System.String,System.String,System.String,System.String)">
            <summary>
            Changes the current branch to the given branch in the git repository (resets all the local changes). Does not perform pull command to update branch with remote repo.
            </summary>
            <param name="path">The local path that contains git repository.</param>
            <param name="branch">The name of the branch to checkout.</param>
            <param name="commit">The commit to checkout.</param>
            <param name="args">The custom arguments to add to the clone command.</param>
        </member>
        <member name="M:Flax.Deps.Dependency.GitResetLocalChanges(System.String)">
            <summary>
            Resets all the local changes.
            </summary>
            <param name="path">The local path that contains git repository.</param>
        </member>
        <member name="M:Flax.Deps.Dependency.RunCmake(System.String,Flax.Build.TargetPlatform,Flax.Build.TargetArchitecture,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Runs the cmake tool.
            </summary>
            <param name="path">The path.</param>
            <param name="platform">The output platform.</param>
            <param name="architecture">The output architecture.</param>
            <param name="customArgs">The custom arguments for the CMake.</param>
            <param name="envVars">Custom environment variables to pass to the child process.</param>
        </member>
        <member name="M:Flax.Deps.Dependency.RunCygwin(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Runs the bash script via Cygwin tool (native bash on platforms other than Windows).
            </summary>
            <param name="path">The path.</param>
            <param name="workspace">The workspace folder.</param>
            <param name="envVars">Custom environment variables to pass to the child process.</param>
        </member>
        <member name="T:Flax.Deps.DepsBuilder">
            <summary>
            Dependency packages building tool.
            </summary>
        </member>
        <member name="T:Flax.Deps.Downloader">
            <summary>
            The helper utility for downloading files from remote url.
            </summary>
        </member>
        <member name="T:Flax.Deps.WebClientWithResponse">
            <summary>
            A <see cref="T:System.Net.WebClient"/> with exposed Response property.
            </summary>
            <seealso cref="T:System.Net.WebClient" />
        </member>
        <member name="P:Flax.Deps.WebClientWithResponse.Response">
            <summary>
            Gets the response.
            </summary>
        </member>
        <member name="M:Flax.Deps.WebClientWithResponse.GetWebResponse(System.Net.WebRequest)">
            <inheritdoc />
        </member>
        <member name="T:Flax.Deps.CookieAwareWebClient">
            <summary>
            Web client used for Google Drive
            </summary>
            <seealso cref="T:System.Net.WebClient" />
        </member>
        <member name="M:Flax.Deps.CookieAwareWebClient.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Flax.Deps.CookieAwareWebClient"/> class.
            </summary>
        </member>
        <member name="M:Flax.Deps.CookieAwareWebClient.GetWebRequest(System.Uri)">
            <inheritdoc />
        </member>
        <member name="M:Flax.Deps.CookieAwareWebClient.GetWebResponse(System.Net.WebRequest,System.IAsyncResult)">
            <inheritdoc />
        </member>
        <member name="M:Flax.Deps.CookieAwareWebClient.GetWebResponse(System.Net.WebRequest)">
            <inheritdoc />
        </member>
        <member name="T:Flax.Deps.ProgressDisplay">
            <summary>
            Class to display download progress
            </summary>
        </member>
        <member name="F:Flax.Deps.ProgressDisplay._progress">
            <summary>
            Current progress
            </summary>
        </member>
        <member name="F:Flax.Deps.ProgressDisplay._asyncDisplayThread">
            <summary>
            Current display thread
            </summary>
        </member>
        <member name="F:Flax.Deps.ProgressDisplay._cursorPos">
            <summary>
            Progress display console position
            </summary>
        </member>
        <member name="F:Flax.Deps.ProgressDisplay._progressQueue">
            <summary>
            Queue of diffs from progress
            </summary>
            <remarks>
            Queue last second of data
            </remarks>
        </member>
        <member name="F:Flax.Deps.ProgressDisplay._lastProgress">
            <summary>
            Last progress to calculate progress diff
            </summary>
        </member>
        <member name="F:Flax.Deps.ProgressDisplay._isAlive">
            <summary>
            Should thread be alive
            </summary>
        </member>
        <member name="P:Flax.Deps.ProgressDisplay.TotalFileSizeBytes">
            <summary>
            Total file size in bytes
            </summary>
        </member>
        <member name="P:Flax.Deps.ProgressDisplay.Progress">
            <summary>
            Current progress of task
            </summary>
        </member>
        <member name="P:Flax.Deps.ProgressDisplay.CanUseConsole">
            <summary>
            Gets a value indicating whether can use system console for progress reporting.
            </summary>
        </member>
        <member name="M:Flax.Deps.ProgressDisplay.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Flax.Deps.ProgressDisplay"/> class.
            </summary>
            <param name="totalFileSizeBytes">The total file size bytes.</param>
        </member>
        <member name="M:Flax.Deps.ProgressDisplay.Update(System.Int64,System.Int64)">
            <summary>
            Updates the progress.
            </summary>
            <param name="progress">The progress.</param>
            <param name="totalLength">The total length.</param>
        </member>
        <member name="M:Flax.Deps.ProgressDisplay.Display">
            <summary>
            Updates console text with current progress.
            </summary>
        </member>
        <member name="M:Flax.Deps.ProgressDisplay.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
    </members>
</doc>
